%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(1) 535 749.33 T
1 14 Q
(Digital Media Netw) 194.9 710.67 T
(orking - dmNet) 318.31 710.67 T
2 12 Q
-0.01 (Note: This is a dr) 126 691 P
-0.01 (aft pr) 209.79 691 P
-0.01 (o) 235.59 691 P
-0.01 (gr) 241.46 691 P
-0.01 (ammer\325) 251.95 691 P
-0.01 (s guide for dmNet. It is intended to be in the style of) 288.79 691 P
(a c) 126 677 T
(hapter for the Insight book \324) 140.15 677 T
(\324IRIS Digitial Media P) 274.48 677 T
(or) 383.17 677 T
(gr) 393.4 677 T
(amming Guide\325) 403.88 677 T
(\325. I have put) 477.54 677 T
-0.14 (little ef) 126 663 P
-0.14 (fort into formating as this document will have to be r) 159.31 663 P
-0.14 (eformated with the of) 411.45 663 P
-0.14 (\336cial) 513.14 663 P
(Insight formats.) 126 649 T
(The c) 126 629 T
(hapter \324) 152.15 629 T
(\324Digital Media Buf) 189.14 629 T
(fer) 280.26 629 T
(s\325) 293.47 629 T
(\325 will need some c) 300.8 629 T
(hang) 387.28 629 T
(es to add dmNet to the list) 411.16 629 T
(of things that can work with DMb) 126 615 T
(uf) 287.77 615 T
(fer) 296.89 615 T
(s.) 310.1 615 T
(Something mor) 126 595 T
(e should be said about the handling of UST/MSC.) 198.55 595 T
0 F
-0.34 (dmNet implements the deli) 72 575 P
-0.34 (v) 201.01 575 P
-0.34 (ery of digital media b) 206.83 575 P
-0.34 (uf) 308.56 575 P
-0.34 (fers o) 318.25 575 P
-0.34 (v) 344.72 575 P
-0.34 (er netw) 350.54 575 P
-0.34 (orks. The central goal of dmNet) 385.73 575 P
(is simple: to allo) 72 561 T
(w media programmers to w) 151.38 561 T
(orry about the details of manipulating media instead) 283.24 561 T
(of managing the netw) 72 547 T
(ork. The API is the same re) 176.2 547 T
(g) 307.66 547 T
(ardless of the underlying netw) 313.6 547 T
(ork - from a 10) 458.78 547 T
(me) 72 533 T
(g) 86.48 533 T
(abit/second Ethernet to striped HIPPI channels transmitting hundreds of me) 92.42 533 T
(g) 455.21 533 T
(abytes/second.) 461.15 533 T
-0.01 (dmNet hides the details and encapsulates tuning ef) 72 519 P
-0.01 (forts to pro) 314.6 519 P
-0.01 (vide the most ef) 367.73 519 P
-0.01 (\336cient data transfer) 444.39 519 P
(possible. dmNet also allo) 72 505 T
(ws ef) 193.03 505 T
(\336cient transfer of DMb) 218.39 505 T
(uf) 329.12 505 T
(fers among processes on the same host.) 338.82 505 T
1 F
(About dmNet) 72 477 T
0 F
(DMb) 72 458 T
(uf) 97.09 458 T
(fers and DMb) 106.79 458 T
(uf) 173.2 458 T
(ferpools allo) 182.89 458 T
(w applications to allocate and use general-purpose system) 242.92 458 T
(memory for transporting media data within an application. A DMb) 72 444 T
(uf) 392.39 444 T
(ferpool is a custom storage) 402.08 444 T
(f) 72 430 T
(acility created by the application. V) 75.88 430 T
(ideo I/O de) 246.46 430 T
(vices, compression de) 300.14 430 T
(vices and algorithms and) 405.49 430 T
-0.32 (graphics de) 72 416 P
-0.32 (vices ha) 126.36 416 P
-0.32 (v) 164.79 416 P
-0.32 (e direct access to this storage on a compartmental basis; each compartment is) 170.61 416 P
(referred to by a DMb) 72 402 T
(uf) 173.72 402 T
(fer) 183.42 402 T
(. An application can de\336ne what this compartment represents, b) 196.08 402 T
(ut in) 501.46 402 T
(general a DMb) 72 388 T
(uf) 143.74 388 T
(fer represents a single image \050e.g., one frame or \336eld of video\051.) 153.43 388 T
(W) 72 369 T
(ithin an application, the contents of a DMb) 82.85 369 T
(uf) 288.59 369 T
(fer are transferred by communicating only a refer-) 298.28 369 T
(ence to the storage location rather than mo) 72 355 T
(ving the actual contents. DMb) 276.11 355 T
(uf) 420.85 355 T
(fers are, essentially) 430.55 355 T
(,) 522.07 355 T
(placeholders which contain pointers to the data; the data bytes are stored else) 72 341 T
(where, in specially) 441.62 341 T
(reserv) 72 327 T
(ed system memory) 101.14 327 T
(. This memory is reserv) 191.02 327 T
(ed at application start-up and guaranteed for the) 304.49 327 T
(life of the application, and is not visited by the page daemon and will not be sw) 72 313 T
(apped out.) 452.84 313 T
(The dmNet API e) 72 294 T
(xtends the functionality of DMb) 156.8 294 T
(uf) 311.22 294 T
(fers, by pro) 320.92 294 T
(viding a lo) 375.72 294 T
(w-ef) 426.76 294 T
(fort, lo) 448.44 294 T
(w-intrusion) 480.8 294 T
(e) 72 280 T
(xtension of the e) 77.15 280 T
(xisting DMb) 156.62 280 T
(uf) 217.39 280 T
(fer API that allo) 227.09 280 T
(ws the application programmer to mo) 304.44 280 T
(v) 484.57 280 T
(e) 490.39 280 T
(DMb) 72 266 T
(uf) 97.09 266 T
(fers across a netw) 106.79 266 T
(ork. It adds four basic calls:) 192.3 266 T
3 F
(dmNetConnect\050\051) 328.61 266 T
0 F
(,) 413.92 266 T
3 F
(dmNetAccept\050\051) 419.92 266 T
0 F
(,) 497.88 266 T
3 F
(dmNetSend\050\051) 72 252 T
0 F
( and) 139.99 252 T
3 F
(dmNetRecv\050\051) 163.32 252 T
0 F
(, which encapsulate the details of sending data on a netw) 231.29 252 T
(ork.) 503.45 252 T
-0.31 (Except for the initialization parameters, the calls are e) 72 238 P
-0.31 (xactly the same, re) 328.26 238 P
-0.31 (g) 417.12 238 P
-0.31 (ardless of netw) 423.06 238 P
-0.31 (ork type.) 494.96 238 P
(This allo) 72 224 T
(ws the application programmer to think about mo) 114.04 224 T
(ving DMb) 351.5 224 T
(uf) 400.93 224 T
(fers, not about the details) 410.63 224 T
(of what are in them.) 72 210 T
(K) 72 191 T
(e) 80.36 191 T
(y features of dmNet include:) 85.51 191 T
(\245) 72 172 T
(dmNet hides man) 90 172 T
(y details of the netw) 174.48 172 T
(ork) 271.68 172 T
(\245) 72 152 T
(the dmNet API is independent of the netw) 90 152 T
(ork) 292.19 152 T
(\245) 72 132 T
-0.3 (on most current netw) 90 132 P
-0.3 (orks, dmNet is no slo) 190.64 132 P
-0.3 (wer than the f) 291.5 132 P
-0.3 (astest alternati) 356.8 132 P
-0.3 (v) 425.19 132 P
-0.3 (e, and can be f) 431.01 132 P
-0.3 (aster) 499.34 132 P
(\245) 72 112 T
(dmNet preserv) 90 112 T
(es all meta-data associated with a DMb) 160.8 112 T
(uf) 349.19 112 T
(fer \050e.g., user data, VITC\051) 358.88 112 T
(\245) 72 92 T
3.53 (dmNet modi\336es the UST on recei) 90 92 P
3.53 (v) 269.01 92 P
3.53 (ed DMb) 274.83 92 P
3.53 (uf) 317.78 92 P
3.53 (fers so that the UST of the recei) 327.47 92 P
3.53 (v) 504.85 92 P
3.53 (ed) 510.67 92 P
(DMb) 90 78 T
(uf) 115.09 78 T
(fers re\337ects the correct time relati) 124.79 78 T
(v) 286.1 78 T
(e to the recei) 291.92 78 T
(v) 353.27 78 T
(er\325) 359.09 78 T
(s clock, not the sender\325) 371.75 78 T
(s clock.) 482.06 78 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(2) 535 749.33 T
0 12 Q
(\245) 72 712 T
(the dmNet API is consistent with other APIs for processing DMb) 90 712 T
(uf) 403.07 712 T
(fers \050e.g., dmIC\051) 412.76 712 T
(\245) 72 692 T
(dmNet can be used to ef) 90 692 T
(\336ciently mo) 206 692 T
(v) 263.5 692 T
(e a DMb) 269.32 692 T
(uf) 311.06 692 T
(fer between processes on the same host) 320.76 692 T
1 F
(Using dmNet) 72 664 T
0 F
(A dmNet connection supports the uni-directional \337o) 72 645 T
(w of DMb) 322.34 645 T
(uf) 372.1 645 T
(fers from the sender to the) 381.79 645 T
(recei) 72 631 T
(v) 95.02 631 T
(er) 100.84 631 T
(. Bi-directional \337o) 109.5 631 T
(w requires tw) 197.53 631 T
(o independent connections. Both the sender and the) 262.73 631 T
-0.46 (recei) 72 617 P
-0.46 (v) 95.02 617 P
-0.46 (er must \336rst create a connection instance with) 100.84 617 P
3 F
-0.46 (dmNetOpen\050\051) 319.78 617 P
0 F
-0.46 (. Then the connections must be) 390.44 617 P
(initialized by setting DMb) 72 603 T
(uf) 198.1 603 T
(fer and netw) 207.79 603 T
(ork parameters. This is discussed in detail belo) 267.65 603 T
(w) 491.99 603 T
(. When) 499.87 603 T
(the connections are initialized, the recei) 72 589 T
(v) 262.32 589 T
(er calls) 268.14 589 T
3 F
(dmNetListen\050\051) 305.46 589 T
0 F
( to initialize the connection and) 380.11 589 T
(calls) 72 575 T
3 F
(dmNetAccept\050\051) 97 575 T
0 F
( to w) 174.96 575 T
(ait for the sender to call) 198.84 575 T
3 F
(dmNetConnect\050\051) 315.48 575 T
0 F
(. Usually) 400.79 575 T
(, the recei) 443.34 575 T
(v) 490.02 575 T
(er will) 495.84 575 T
-0.23 (use a separate, application speci\336c control connection to tell the recei) 72 561 P
-0.23 (v) 402.28 561 P
-0.23 (er which IP port to connect) 408.1 561 P
(to. This message is usually sent after) 72 547 T
3 F
(dmNetListen\050\051) 251.32 547 T
0 F
( returns b) 325.97 547 T
(ut before calling) 371.05 547 T
3 F
(dmNetAccept\050\051) 452.7 547 T
0 F
(.) 530.66 547 T
(Once the connection is established, the sender calls) 72 533 T
3 F
(dmNetSend\050\051) 320.95 533 T
0 F
( to send a b) 388.94 533 T
(uf) 443.36 533 T
(fer and the) 453.06 533 T
(recei) 72 519 T
(v) 95.02 519 T
(er calls) 100.84 519 T
3 F
(dmNetRecv\050\051) 138.16 519 T
0 F
( to recei) 206.12 519 T
(v) 244.48 519 T
(e a DMb) 250.3 519 T
(uf) 292.04 519 T
(fer) 301.74 519 T
(. When the sender and recei) 314.4 519 T
(v) 447.38 519 T
(er are done, the) 453.2 519 T
(y) 526.99 519 T
(each call) 72 505 T
3 F
(dmNetClose\050\051) 117.31 505 T
0 F
( to close the connection. \050A simple application need not ha) 187.96 505 T
(v) 469.34 505 T
(e an applica-) 475.16 505 T
-0.14 (tion speci\336c protocol for start up. The sending and reci) 72 491 P
-0.14 (ving side could simply use an agreed upon) 333.77 491 P
(port number) 72 477 T
(.\051) 130.33 477 T
-0.47 (The information required for initialization v) 72 458 P
-0.47 (aries slightly for the sender and recei) 280.3 458 P
-0.47 (v) 454.43 458 P
-0.47 (er) 460.25 458 P
-0.47 (. The sender is) 468.92 458 P
(only concerned with netw) 72 444 T
(ork parameters. There are three parameters that must be set) 196.19 444 T
(\245) 72 425 T
1.24 (the connection type -- either local, to e) 90 425 P
1.24 (xchange DMb) 283.81 425 P
1.24 (uf) 353.13 425 P
1.24 (fers with another process on the) 362.82 425 P
(same machines, or TCP) 90 411 T
(. \050Other connection types may be added in the future.\051) 202.66 411 T
(\245) 72 391 T
(an IP port number) 90 391 T
(\245) 72 371 T
(the name of the recei) 90 371 T
(v) 190.33 371 T
(er \050or sock) 196.15 371 T
(et address\051) 247.34 371 T
(The recei) 72 351 T
(v) 116.68 351 T
(er must specify the connection type and the port number) 122.5 351 T
(. Both must agree with the) 392.12 351 T
(sending side. In addition, the recei) 72 337 T
(v) 236.68 337 T
(er must create a b) 242.5 337 T
(uf) 326.89 337 T
(fer pool from which DMb) 336.59 337 T
(uf) 460.99 337 T
(fers will be) 470.69 337 T
-0.41 (allocated to hold the recei) 72 323 P
-0.41 (v) 194.02 323 P
-0.41 (ed data. Buf) 199.84 323 P
-0.41 (fer pool def) 257.04 323 P
-0.41 (aults for creating this pool can be obtained with) 312.07 323 P
(the) 72 309 T
3 F
(dmNetGetP) 89.66 309 T
(arams\050\051) 150.19 309 T
0 F
( call. The pool must be re) 190.18 309 T
(gistered with the) 312.31 309 T
3 F
(dmNetRegisterP) 395.3 309 T
(ool\050\051) 479.7 309 T
0 F
( call.) 503.03 309 T
3 F
-0.25 (dmNetRegisterP) 72 295 P
-0.25 (ool\050\051) 156.4 295 P
0 F
-0.25 ( is normally called after) 179.72 295 P
3 F
-0.25 (dmNetAccept\050\051) 295.43 295 P
0 F
-0.25 ( and must be called before the \336rst) 373.39 295 P
(call to) 72 281 T
3 F
(dmNetRecv\050\051) 104.66 281 T
0 F
(.) 172.63 281 T
1 F
(Sending Data With dmNet) 72 253 T
0 F
(The dmNet and digital media entry points used by the sending side are presented belo) 72 234 T
(w) 482.98 234 T
(, in the) 490.86 234 T
(order in which the) 72 220 T
(y should be called.) 159.47 220 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 202.33 T
0 12 Q
(dmNetOpen creates and initializes the DMnetconnection structure.) 72 184 T
-0.26 (T) 72 165 P
-0.26 (o set the netw) 78.37 165 P
-0.26 (ork parameters for the ne) 143.79 165 P
-0.26 (w connection, a DMparams structure must be created and) 263.08 165 P
(\336lled in. The structure is created with) 72 151 T
4 10 Q
(DMstatus dmParamsCreate \050DMparams** params \051;) 72 133.33 T
0 12 Q
(The connection type and port can be set with the dmP) 72 115 T
(aramsSetInt call) 329.78 115 T
4 10 Q
(DMstatus dmParamsSetInt \050DMparams* params, const char* paramName, int value \051;) 72 97.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(3) 535 749.33 T
0 12 Q
(The constants DMNET_CONNECTION_TYPE and DMNET_POR) 72 712 T
(T can be used for the) 398.58 712 T
-0.22 (paramName. The v) 72 698 P
-0.22 (alue for the connection type should be either DMNET_TCP for a netw) 163.55 698 P
-0.22 (ork con-) 499.9 698 P
-0.02 (nection, or DMNET_LOCAL for a connection to another process on the same machine. The port) 72 684 P
(number is a 16 bit, unsigned int. V) 72 670 T
(alues from 0 to 1023 are reserv) 237 670 T
(ed. Applications are free to use) 386.11 670 T
(port numbers from 1024 to 65535 inclusi) 72 656 T
(v) 269.03 656 T
(e.) 274.85 656 T
-0.35 (There are tw) 72 637 P
-0.35 (o w) 131.81 637 P
-0.35 (ays to identify the remote machine to connect to: the machine can be identi\336ed by) 149 637 P
(name or by a sock) 72 623 T
(et address.) 159.19 623 T
(A name can be supplied as a character string using) 72 604 T
4 10 Q
(DMstatus dmParamsSetString \050 DMparams* params, const char* paramName, const) 72 586.33 T
(char* value \051;) 72 574.33 T
0 12 Q
(In this case, use the constant DMNET_REMO) 72 556 T
(TE_HOSTN) 294.49 556 T
(AME as the paramName.) 354.73 556 T
(A sock) 72 537 T
(et address can be supplied with) 105.54 537 T
3 F
(dmP) 258.18 537 T
(aramsSetInt\050\051) 282.06 537 T
0 F
( using the constant) 353.38 537 T
(DMNET_REMO) 72 523 T
(TE_SOCKADDR for the paramName. In this case, the v) 154.85 523 T
(alue will lik) 427.16 523 T
(ely be the) 484.38 523 T
(v) 72 509 T
(alue of the sin_addr) 77.7 509 T
(.s_addr \336eld of an instance of the sockaddr_in structure.) 172.02 509 T
-0.14 (When these parameters are set in the DMparams structure, the sender opens the connection to the) 72 490 P
(recei) 72 476 T
(v) 95.02 476 T
(er with) 100.84 476 T
4 10 Q
(DMstatus dmNetConnect \050DMnetconnection connection, DMparams * params \051;) 72 458.33 T
0 12 Q
-0.46 (Before the sender calls) 72 440 P
3 F
-0.46 (dmNetConnect\050\051) 182.79 440 P
0 F
-0.46 (the sender and recie) 270.63 440 P
-0.46 (v) 364.58 440 P
-0.46 (er must agree on a port number and) 370.4 440 P
(the recei) 72 426 T
(v) 112.68 426 T
(er must ha) 118.5 426 T
(v) 168.25 426 T
(e called) 174.07 426 T
3 F
(dmNetListen\050\051) 214.06 426 T
0 F
(.) 288.71 426 T
(After a successful return from) 72 407 T
3 F
(dmNetConnect\050\051) 218.95 407 T
0 F
(, the sender is free to send b) 304.26 407 T
(uf) 437.99 407 T
(fers with) 447.68 407 T
4 10 Q
(DMstatus dmNetSend \050DMnetconnection connection, DMbuffer buff \051;) 72 389.33 T
0 12 Q
(dmNetSend will attach to the b) 72 371 T
(uf) 220.75 371 T
(fer with) 230.45 371 T
3 F
(dmBufferAttach\050\051) 271.1 371 T
0 F
( and free the b) 363.74 371 T
(uf) 432.14 371 T
(fer with) 441.84 371 T
3 F
(dmBufferFr) 72 357 T
(ee\050\051) 134.44 357 T
0 F
( when it is done. The sending program may call) 153.08 357 T
3 F
(dmBufferFr) 384.72 357 T
(ee\050\051) 447.16 357 T
0 F
( on the sent) 465.8 357 T
(b) 72 343 T
(uf) 77.76 343 T
(fer immediately) 87.46 343 T
(, b) 163 343 T
(ut this does not mean the b) 174.76 343 T
(uf) 303.18 343 T
(fer will be returned the to pool -- dmNet may) 312.88 343 T
(not ha) 72 329 T
(v) 101.42 329 T
(e freed the b) 107.24 329 T
(uf) 166.64 329 T
(fer) 176.34 329 T
(. This call may block or may f) 189 329 T
(ail and set errno to EB) 333.53 329 T
(USY) 441.06 329 T
(, if the netw) 463.51 329 T
(ork) 520.72 329 T
(send queue is full. The application should check for the latter case and retry the send after a suit-) 72 315 T
(able delay) 72 301 T
(.) 120.2 301 T
(The sending program should be careful to ensure that the size has been set in the DMb) 72 282 T
(uf) 486.35 282 T
(fer) 496.04 282 T
(. The) 508.7 282 T
(video library) 72 268 T
(, VL, is careful to do this for captured video, b) 132.88 268 T
(ut if the b) 355.6 268 T
(uf) 401.69 268 T
(fers are being \336lled with) 411.38 268 T
(material coming from other sources, such as disk, the programmer may ha) 72 254 T
(v) 428.03 254 T
(e to set the size with) 433.85 254 T
4 10 Q
(DMstatus dmBufferSetSize \050 DMbuffer buff, int size \051;) 72 236.33 T
0 12 Q
(The size is in bytes.) 72 218 T
-0.26 (The sending program can also use the user data area of the DMb) 72 199 P
-0.26 (uf) 377.9 199 P
-0.26 (fer to carry information such as) 387.6 199 P
(frame number and \336eld information. The user data can be set with) 72 185 T
4 10 Q
(DMstatus dmBufferSetUserData \050 DMbuffer buffer, const u_char *data,) 72 167.33 T
( int size  \051;) 234 155.33 T
0 12 Q
(When the sender is \336nished sending, it should close the connection with) 72 137 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 119.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(4) 535 749.33 T
1 12 Q
(Receiving Data with dmNet) 72 712 T
0 F
(The recei) 72 693 T
(v) 116.68 693 T
(er must open a connection and set the parameter v) 122.5 693 T
(alues just lik) 362.47 693 T
(e the sender) 423.02 693 T
(, e) 479.86 693 T
(xcept it) 491 693 T
(does not ha) 72 679 T
(v) 126.42 679 T
(e to supply either a DMNET_REMO) 132.24 679 T
(TE_HOSTN) 309.41 679 T
(AME or a) 369.65 679 T
(DMNET_REMO) 72 665 T
(TE_SOCKADDR. Also, the recei) 154.85 665 T
(v) 316.86 665 T
(er does not call) 322.68 665 T
3 F
(dmNetConnect\050\051) 398.66 665 T
0 F
(. Instead it) 483.97 665 T
(calls) 72 651 T
3 F
(dmNetListen\050\051) 97 651 T
0 F
( and) 171.65 651 T
3 F
(dmNetAccept\050\051) 194.98 651 T
0 F
(.) 272.94 651 T
4 10 Q
(DMstatus dmNetListen \050DMnetconnection connection, DMparams * params \051;) 72 633.33 T
0 12 Q
-0.22 (This must be called before the sender calls) 72 615 P
3 F
-0.22 (dmNetConnect\050\051) 277.51 615 P
0 F
-0.22 (. This call can f) 362.82 615 P
-0.22 (ail if the port number) 436.12 615 P
(supplied in the params is already in use. In this case the port number in the params should be) 72 601 T
-0.09 (changed, and the call to) 72 587 P
3 F
-0.09 (dmNetListen\050\051) 188.17 587 P
0 F
-0.09 ( retried. When) 262.82 587 P
3 F
-0.09 (dmNetListen\050\051) 334.52 587 P
0 F
-0.09 ( succeeds, the port number) 409.17 587 P
(should be transmitted to the sender so that it kno) 72 573 T
(ws which port number to connect to.) 304.69 573 T
(After) 72 554 T
3 F
(dmNetListen\050\051) 100.32 554 T
0 F
( succeeds call) 174.97 554 T
4 10 Q
(DMstatus dmNetAccept \050DMnetconnection connection \051;) 72 536.33 T
0 12 Q
-0.38 (After the) 72 518 P
3 F
-0.38 (dmNetAccept\050\051) 117.23 518 P
0 F
-0.38 ( call returns, the recei) 195.19 518 P
-0.38 (v) 297.01 518 P
-0.38 (er must re) 302.83 518 P
-0.38 (gister a b) 349.88 518 P
-0.38 (uf) 392.88 518 P
-0.38 (fer pool with dmNet. dmNet) 402.57 518 P
(will allocate b) 72 504 T
(uf) 139.75 504 T
(fers from this pool for the recei) 149.45 504 T
(v) 299.11 504 T
(ed b) 304.93 504 T
(uf) 325.02 504 T
(fers. The b) 334.72 504 T
(uf) 386.12 504 T
(fer pool must be created with) 395.82 504 T
(parameters consistent with dmNet\325) 72 490 T
(s requirements. The call) 238.98 490 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection, DMparams params \051;) 72 472.33 T
0 12 Q
(can be used to modify the b) 72 454 T
(uf) 204.41 454 T
(fer pool creation parameters in params as necessary) 214.1 454 T
(. \050The pool cre-) 460.91 454 T
(ation process in) 72 440 T
(v) 146.84 440 T
(olv) 152.6 440 T
(es se) 167.76 440 T
(v) 190.45 440 T
(eral steps that are best understood from the sample code belo) 196.27 440 T
(w) 488.58 440 T
(.\051) 496.46 440 T
(After the pool is created, it must be re) 72 421 T
(gistered with the dmNet connection) 253.45 421 T
4 10 Q
(DMstatus dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 403.33 T
0 12 Q
(This tells the connection to allocate a b) 72 385 T
(uf) 259.4 385 T
(fer from pool for each b) 269.1 385 T
(uf) 383.82 385 T
(fer recei) 393.52 385 T
(v) 432.85 385 T
(ed with) 438.67 385 T
3 F
(dmNetRecv\050\051) 72 371 T
0 F
(.) 139.97 371 T
3 F
(dmNetRegisterP) 145.97 371 T
(ool\050\051) 230.36 371 T
0 F
( can be called ag) 253.69 371 T
(ain to change the pool, say) 333.6 371 T
(, to switch to a) 460.8 371 T
(lar) 72 357 T
(ger pool. The \336rst pool can then be freed with) 84.44 357 T
3 F
(dmBufferDestr) 307.4 357 T
(oyP) 385.16 357 T
(ool\050\051) 404.26 357 T
0 F
(.) 427.58 357 T
(The recei) 72 338 T
(v) 116.68 338 T
(er recei) 122.5 338 T
(v) 157.84 338 T
(es b) 163.66 338 T
(uf) 182.41 338 T
(fers with) 192.11 338 T
4 10 Q
(int dmNetRecv \050 DMnetconnection connection, DMbuffer * buff \051;) 72 320.33 T
0 12 Q
-0.37 (This call does not block. The recei) 72 302 P
-0.37 (v) 235.13 302 P
-0.37 (er program has tw) 240.95 302 P
-0.37 (o choices. It could use) 326.7 302 P
3 F
-0.37 (select\050\051) 434.84 302 P
0 F
-0.37 ( to ensure that) 470.82 302 P
(there is a b) 72 288 T
(uf) 124.08 288 T
(fer w) 133.78 288 T
(aiting in the netw) 158.64 288 T
(ork\325) 242.18 288 T
(s input queue \050see the Adv) 261.52 288 T
(anced Examples belo) 388.86 288 T
(w\051. The) 490.54 288 T
(alternati) 72 274 T
(v) 111.02 274 T
(e is to check the return v) 116.84 274 T
(alue. If it is DM_SUCCESS then a b) 234.52 274 T
(uf) 410.28 274 T
(fer w) 419.98 274 T
(as recei) 444.84 274 T
(v) 480.85 274 T
(ed. If the) 486.67 274 T
(return v) 72 260 T
(alue is DM_F) 109.36 260 T
(AILURE, then the v) 174.47 260 T
(alue of errno must be check) 271.49 260 T
(ed. A v) 404.33 260 T
(alue of EB) 439.02 260 T
(USY) 490.22 260 T
(implies that there w) 72 246 T
(as no data a) 166.87 246 T
(v) 222.95 246 T
(ailable and) 228.65 246 T
3 F
(dmNetRecv\050\051) 283.97 246 T
0 F
( should be called ag) 351.94 246 T
(ain after a suitable) 447.19 246 T
(delay) 72 232 T
(. If errno is 0 then the connection has been closed \050the sender could ha) 97.21 232 T
(v) 434.56 232 T
(e died or closed the) 440.38 232 T
(connection\051.) 72 218 T
3 F
(dmNetRecv\050\051) 72 199 T
0 F
( can f) 139.97 199 T
(ail if it is unable to allocate a DMb) 166.5 199 T
(uf) 333.58 199 T
(fer to recei) 343.27 199 T
(v) 394.94 199 T
(e the data into. The applica-) 400.76 199 T
-0.12 (tion is responsible for ensuring that there is a free b) 72 185 P
-0.12 (uf) 317.2 185 P
-0.12 (fer in the pool before calling) 326.89 185 P
3 F
-0.12 (dmNetRecv\050\051) 466.15 185 P
0 F
-0.12 (.) 534.12 185 P
-0.4 (It could do this by k) 72 171 P
-0.4 (eeping careful count of allocated b) 166.22 171 P
-0.4 (uf) 330.27 171 P
-0.4 (fers, b) 339.97 171 P
-0.4 (ut this can be dif) 369.32 171 P
-0.4 (\336cult if DMb) 447.42 171 P
-0.4 (uf) 509.71 171 P
-0.4 (fers) 519.41 171 P
-0.13 (are sent to VL or other libraries that hold the b) 72 157 P
-0.13 (uf) 293.73 157 P
-0.13 (fers in queues until processing is completed. The) 303.42 157 P
-0.11 (alternati) 72 143 P
-0.11 (v) 111.02 143 P
-0.11 (e is to delay until there is a free b) 116.84 143 P
-0.11 (uf) 275.25 143 P
-0.11 (fer in the b) 284.95 143 P
-0.11 (uf) 336.7 143 P
-0.11 (fer pool. Code to do this is sho) 346.4 143 P
-0.11 (wn in the) 492.67 143 P
(Adv) 72 129 T
(anced Examples belo) 92.36 129 T
(w) 194.04 129 T
(.) 201.92 129 T
(When the recei) 72 110 T
(v) 144.34 110 T
(er program is \336nished recei) 150.16 110 T
(ving it should call) 281.16 110 T
3 F
(dmNetClose\050\051) 370.5 110 T
0 F
(.) 441.14 110 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(5) 535 749.33 T
0 12 Q
(If the b) 72 712 T
(uf) 106.42 712 T
(fer pool that is re) 116.11 712 T
(gistered on the recie) 197.92 712 T
(ving side supports v) 294.59 712 T
(ariable size DMb) 390.62 712 T
(uf) 473.03 712 T
(fers \050e.g.,) 482.72 712 T
4 10 Q
(dmParamsSetEnum\050plist, DM_POOL_VARIABLE, DM_TRUE\051;) 72 698 T
0 12 Q
(\051, then dmNet will allocate b) 372 698 T
(uf) 509.08 698 T
(fers) 518.77 698 T
(big enough for the incoming data, rounded up to the ne) 72 684 T
(xt con) 336.12 684 T
(v) 365.3 684 T
(enient size. This means that audio) 371.12 684 T
(data \050probably a fe) 72 670 T
(w k bytes per DMb) 162 670 T
(uf) 254.41 670 T
(fer\051 and video data \050probably 100\325) 264.11 670 T
(s of k bytes per) 428.4 670 T
(DMb) 72 656 T
(uf) 97.09 656 T
(fer\051 can be mix) 106.79 656 T
(ed on the same dmNet connection and the use of the b) 179.58 656 T
(uf) 438.96 656 T
(fer pool memory) 448.66 656 T
(will be ef) 72 642 T
(\336cient.) 117.02 642 T
1 F
(Examples) 72 614 T
0 F
(A simple program for sending DMb) 72 595 T
(uf) 244.74 595 T
(fers to a process on another host) 254.44 595 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 577.33 T
(main \050int argc, char ** argv\051 {) 72 553.33 T
(  int i;) 72 529.33 T
(  int Nframes     = 10;) 72 517.33 T
(  int sizeInBytes = 10;) 72 505.33 T
(  int bufferCount = 5;) 72 493.33 T
(  int bufferSize  = 100;) 72 481.33 T
(  int port        = 9161;) 72 469.33 T
(  DMbufferpool    pool;) 72 445.33 T
(  DMnetconnection connection;) 72 433.33 T
(  DMparams *      plist;) 72 421.33 T
(  DMbuffer        buff;) 72 409.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 385.33 T
(    abort\050\051;) 72 373.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 361.33 T
(    abort\050\051;) 72 349.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 337.33 T
(      DM_FAILURE\051) 72 325.33 T
(    abort\050\051;) 72 313.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 301.33 T
(    abort\050\051;) 72 289.33 T
(  /* A remote address may also be specified instead by the following call:) 72 277.33 T
(  ** dmParamsSetInt\050plist, DMNET_REMOTE_SOCKADDR, sin.sin_addr.s_addr\051; */) 72 265.33 T
(  if \050dmParamsSetString\050plist, DMNET_REMOTE_HOSTNAME, \322hostname\323\051 ==) 72 253.33 T
(      DM_FAILURE\051) 72 241.33 T
(    abort\050\051;) 72 229.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 217.33 T
(     dmNetListen. */) 72 205.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 193.33 T
(    abort\050\051;) 72 181.33 T
(  /* now create the buffer pool */) 72 157.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 145.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 133.33 T
(    abort\050\051;) 72 121.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 109.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 97.33 T
(    abort\050\051;) 72 85.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(6) 535 749.33 T
4 F
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 713.33 T
(    abort\050\051;) 72 701.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 677.33 T
(    if \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 665.33 T
(      abort\050\051;) 72 653.33 T
(    /* put some data into buff here*/) 72 641.33 T
(    /* if necessary, set its size with ... */) 72 629.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 617.33 T
(    if \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 605.33 T
(      abort\050\051;) 72 593.33 T
(    }) 72 581.33 T
(    dmBufferFree\050buff\051;) 72 569.33 T
(  }) 72 557.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 533.33 T
(    abort\050\051;) 72 521.33 T
(}) 72 509.33 T
0 12 Q
(A simple program for recei) 72 479 T
(ving DMb) 202.33 479 T
(uf) 251.76 479 T
(fers from a remote host) 261.46 479 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 461.33 T
(main \050int argc, char ** argv\051 {) 72 437.33 T
(  int i;) 72 413.33 T
(  int Nframes     = 10;) 72 401.33 T
(  int bufferCount = 5;) 72 389.33 T
(  int bufferSize  = 100;) 72 377.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 365.33 T
(  DMnetconnection connection;) 72 341.33 T
(  DMparams *      plist;) 72 329.33 T
(  DMbufferpool    pool;) 72 317.33 T
(  DMbuffer        buff;) 72 305.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 233.33 T
(      DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 173.33 T
(    /* we should try a new port number if we get here. */) 72 161.33 T
(    abort\050\051;) 72 149.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 137.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 125.33 T
(    abort\050\051;) 72 113.33 T
(  /* Now set up the buffer pool */) 72 101.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 89.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(7) 535 749.33 T
4 F
(    abort\050\051;) 72 713.33 T
(  /* set the pool parameters as needed by dmNet. */) 72 701.33 T
(  /* you may also have to call, for example, vlDMPoolGetParams, to get the) 72 689.33 T
(buffer) 72 677.33 T
(     pool parameters needed by vl. */) 72 665.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 653.33 T
(    abort\050\051;) 72 641.33 T
(  /* create the buffer pool */) 72 629.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(  if \050dmNetRegisterPool\050connection, pool\051 != DM_SUCCESS\051) 72 593.33 T
(    abort\050\051;) 72 581.33 T
(  /* now loop to receive the buffers. */) 72 569.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 557.33 T
(    if \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 545.33 T
(      abort\050\051;) 72 533.33 T
(    }) 72 521.33 T
(    /* use the data in buff here */) 72 509.33 T
(    dmBufferFree\050buff\051;) 72 497.33 T
(  }) 72 485.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 473.33 T
(    abort\050\051;) 72 461.33 T
(}) 72 449.33 T
1 12 Q
(Sending DMb) 72 398 T
(uff) 148.43 398 T
(er) 163.63 398 T
(s fr) 174.79 398 T
(om Pr) 193.22 398 T
(ocess to Pr) 226.99 398 T
(ocess on one Host) 291.44 398 T
0 F
-0.43 (dmNet can ef) 72 379 P
-0.43 (\336ciently mo) 135.48 379 P
-0.43 (v) 192.54 379 P
-0.43 (e DMb) 198.36 379 P
-0.43 (uf) 231.35 379 P
-0.43 (fers between processes on the same host. The dif) 241.04 379 P
-0.43 (ferences from) 471.56 379 P
(the remote case are) 72 365 T
(\245) 72 346 T
4.42 (the DMNET_CONNECTION_TYPE is DMNET_LOCAL for both the sender and) 90 346 P
(recei) 90 332 T
(v) 113.02 332 T
(er) 118.84 332 T
(.) 127.5 332 T
(\245) 72 312 T
13.14 (the sender need not specify the DMNET_REMO) 90 312 P
13.14 (TE_HOSTN) 402.96 312 P
13.14 (AME nor) 463.2 312 P
(DMNET_REMO) 90 298 T
(TE_SOCKADDR) 172.85 298 T
(\245) 72 278 T
(the recei) 90 278 T
(v) 130.68 278 T
(e need not allocate or re) 136.5 278 T
(gister a b) 251.28 278 T
(uf) 295.03 278 T
(fer pool) 304.73 278 T
(There is a critical dif) 72 258 T
(ference between the local and remote cases for DMb) 171.67 258 T
(uf) 424.01 258 T
(fer handling. In the) 433.7 258 T
(remote case, DMb) 72 244 T
(uf) 160.07 244 T
(fers that are sent are quickly returned to the sender\325) 169.76 244 T
(s pool \050assuming the) 416.03 244 T
(sender calls) 72 230 T
3 F
(dmNetFr) 131.32 230 T
(ee\050\051) 178.42 230 T
0 F
( after) 197.06 230 T
3 F
(dmNetSend\050\051) 225.05 230 T
0 F
(\051. In the local case, the b) 293.04 230 T
(uf) 410.1 230 T
(fers are passed to the) 419.8 230 T
(recei) 72 216 T
(ving process and are not returned to the sender\325) 95.02 216 T
(s pool until the after the recei) 322.3 216 T
(v) 462.64 216 T
(er frees them.) 468.46 216 T
-0.16 (Thus, the sender must allocate a pool big enough for both the sender\325) 72 202 P
-0.16 (s and recei) 401.66 202 P
-0.16 (v) 452.35 202 P
-0.16 (er\325) 458.17 202 P
-0.16 (s needs. Also,) 470.83 202 P
(b) 72 188 T
(uf) 77.76 188 T
(fer pool parameters can depend on the w) 87.46 188 T
(ay the b) 282.28 188 T
(uf) 320.03 188 T
(fers will be used. F) 329.72 188 T
(or e) 421.2 188 T
(xample,) 439.34 188 T
3 F
-0.16 (vlDMP) 72 174 P
-0.16 (oolGetP) 108.42 174 P
-0.16 (arams\050\051) 149.63 174 P
0 F
-0.16 ( can be used to set a DMparams structure with parameters needed for the) 189.61 174 P
(video library) 72 160 T
(. In the remote case, if the recei) 132.88 160 T
(v) 283.52 160 T
(er is sending b) 289.34 160 T
(uf) 358.76 160 T
(fers to VL, it w) 368.46 160 T
(ould call) 442 160 T
3 F
-0.33 (vlDMP) 72 146 P
-0.33 (oolGetP) 108.42 146 P
-0.33 (arams\050\051) 149.63 146 P
0 F
-0.33 (, b) 189.61 146 P
-0.33 (ut in the local case, the sender must mak) 201.04 146 P
-0.33 (e this call and set up the b) 392.56 146 P
-0.33 (uf) 514.32 146 P
-0.33 (fer) 524.01 146 P
(pool appropriately) 72 132 T
(. All b) 159.54 132 T
(uf) 189.64 132 T
(fer pool requirements for the recei) 199.33 132 T
(v) 363.31 132 T
(er are pushed back onto the sender) 369.13 132 T
(so that the sender must kno) 72 118 T
(w ho) 202.69 118 T
(w the recei) 226.06 118 T
(v) 278.4 118 T
(er will use the DMb) 284.22 118 T
(uf) 379.97 118 T
(fers.) 389.66 118 T
3 F
(Examples) 72 99 T
0 F
(A simple program for sending DMb) 72 80 T
(uf) 244.74 80 T
(fers to a process on the same host) 254.44 80 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(8) 535 749.33 T
4 F
(#include <dmedia/dmnet.h>) 72 713.33 T
(#include <errno.h>) 72 701.33 T
(main \050int argc, char ** argv\051 {) 72 677.33 T
(  int i;) 72 653.33 T
(  int Nframes     = 10;) 72 641.33 T
(  int sizeInBytes = 10;) 72 629.33 T
(  int bufferCount = 5;) 72 617.33 T
(  int bufferSize  = 100;) 72 605.33 T
(  int port        = 9161;) 72 593.33 T
(  DMbufferpool    pool;) 72 569.33 T
(  DMnetconnection connection;) 72 557.33 T
(  DMparams *      plist;) 72 545.33 T
(  DMbuffer        buff;) 72 533.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 509.33 T
(    abort\050\051;) 72 497.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 485.33 T
(    abort\050\051;) 72 473.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 461.33 T
(      DM_FAILURE\051) 72 449.33 T
(    abort\050\051;) 72 437.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 425.33 T
(    abort\050\051;) 72 413.33 T
(  /* we don\325t need to specify the remote host in the local case. */) 72 389.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 365.33 T
(     dmNetListen. */) 72 353.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  /* now create the buffer pool */) 72 305.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 293.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 281.33 T
(    abort\050\051;) 72 269.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 257.33 T
(  /* in the local case, the pool params must be appropriate for how */) 72 245.33 T
(  /* the receiver will use the buffers too. */) 72 233.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 161.33 T
(    while \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 149.33 T
(      abort\050\051;) 72 137.33 T
(    /* put some data into buff here*/) 72 125.33 T
(    /* if necessary, set its size with ... */) 72 113.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 101.33 T
(    while \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 89.33 T
(       if \050errno != EBUSY\051 {) 72 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(9) 535 749.33 T
4 F
(      abort\050\051;) 90 713.33 T
(      }) 72 701.33 T
-0.6 (      /* in local case we get EBUSY if we send faster than receiver consumes. */) 72 689.33 P
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    dmBufferFree\050buff\051;) 72 653.33 T
(    sginap\0505\051;  /* give the receiver a chance to do something. */) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 605.33 T
(    abort\050\051;) 72 593.33 T
(}) 72 581.33 T
0 12 Q
(A simple program for recei) 72 551 T
(ving DMb) 202.33 551 T
(uf) 251.76 551 T
(fers from a process on the same host) 261.46 551 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 533.33 T
(#include <errno.h>) 72 521.33 T
(main \050int argc, char ** argv\051 {) 72 497.33 T
(  int i;) 72 473.33 T
(  int Nframes     = 10;) 72 461.33 T
(  int bufferCount = 5;) 72 449.33 T
(  int bufferSize  = 100;) 72 437.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 425.33 T
(  DMnetconnection connection;) 72 401.33 T
(  DMparams *      plist;) 72 389.33 T
(  DMbufferpool    pool;) 72 377.33 T
(  DMbuffer        buff;) 72 365.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 317.33 T
(    abort\050\051;) 72 305.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 293.33 T
(      DM_FAILURE\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 233.33 T
(    /* we should try a new port number if we get here. */) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 197.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 185.33 T
(    abort\050\051;) 72 173.33 T
(  /* receiver does not need a pool in the local case. */) 72 149.33 T
(  /* now loop to receive the buffers. */) 72 125.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 113.33 T
(    while \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 101.33 T
(      if \050errno != EBUSY\051 {) 72 89.33 T
(     abort\050\051;) 90 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(10) 530 749.33 T
4 F
(      }) 72 713.33 T
(      /* if we don\325t give the sender enough time to send we get */) 72 701.33 T
(      /* EBUSY in the local case. */) 72 689.33 T
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    /* use the data in buff here */) 72 653.33 T
(    dmBufferFree\050buff\051;) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(}) 72 593.33 T
1 12 Q
(UST and MSC v) 72 566 T
(alues) 160.44 566 T
0 F
(If the DMb) 72 547 T
(uf) 125.75 547 T
(fer to be sent contains a non-zero UST v) 135.44 547 T
(alue,) 329.1 547 T
3 F
(dmNetSend\050\051) 355.09 547 T
0 F
( will cooperate with) 423.08 547 T
3 F
-0.22 (dmNetRecv\050\051) 72 533 P
0 F
-0.22 ( to adjust the UST v) 139.97 533 P
-0.22 (alue. The attempt is to mak) 234.92 533 P
-0.22 (e the UST v) 364.37 533 P
-0.22 (alue at the recei) 421.08 533 P
-0.22 (ving end) 495.77 533 P
(of the netw) 72 519 T
(ork connection equi) 125.87 519 T
(v) 220.88 519 T
(alent to the UST v) 226.58 519 T
(alue that w) 314.28 519 T
(as set at the sending end. This is) 366.82 519 T
(accomplished by con) 72 505 T
(v) 172.84 505 T
(erting the sent UST to an equi) 178.66 505 T
(v) 322.34 505 T
(alent \322w) 328.04 505 T
(all clock\323 v) 368.24 505 T
(alue \050via) 423.26 505 T
3 F
(dmGetUSTCurr) 72 491 T
(entT) 156.44 491 T
(imeP) 180.23 491 T
(air\050\051) 206.1 491 T
0 F
(\051. This w) 228.76 491 T
(all clock v) 271.63 491 T
(alue is sent to the recei) 321.32 491 T
(ving end, which con-) 430.67 491 T
(v) 72 477 T
(erts it back to an equi) 77.82 477 T
(v) 180.5 477 T
(alent local UST v) 186.2 477 T
(alue. F) 270.23 477 T
(or this to be ef) 302.71 477 T
(fecti) 371.74 477 T
(v) 392.76 477 T
(e, the system clocks on the) 398.58 477 T
-0.07 (tw) 72 463 P
-0.07 (o machines must be synchronized by some e) 83.88 463 P
-0.07 (xternal mechanism, such as) 296.86 463 P
2 F
-0.07 (xntpd) 431.57 463 P
0 F
-0.07 (or) 461.17 463 P
2 F
-0.07 (timed) 474.1 463 P
0 F
-0.07 (. T) 500.76 463 P
-0.07 (o dis-) 513.07 463 P
-0.28 (able this con) 72 449 P
-0.28 (v) 131.62 449 P
-0.28 (ersion, or to mak) 137.44 449 P
-0.28 (e it clear to the recei) 217.8 449 P
-0.28 (ving end that the UST v) 313.73 449 P
-0.28 (alue is not to be trusted) 427.02 449 P
(\050perhaps because it is kno) 72 435 T
(wn that the system clocks are not synchronized\051, the sender can set the) 195.67 435 T
(UST v) 72 421 T
(alue in the DMb) 103.37 421 T
(uf) 181.45 421 T
(fer to zero, using) 191.15 421 T
3 F
(dmBufferSetUSTMSCpair\050\051) 275.46 421 T
0 F
(.) 420.78 421 T
(This con) 72 402 T
(v) 113.18 402 T
(ersion is not done when DMNET_CONNECTION_TYPE is DMNET_LOCAL.) 119 402 T
(If the DMb) 72 383 T
(uf) 125.75 383 T
(fer to be sent contains a non-zero MSC v) 135.44 383 T
(alue, DMnet preserv) 331.78 383 T
(es it. This is useful) 429.9 383 T
-0.2 (when relaying DMb) 72 369 P
-0.2 (uf) 168 369 P
-0.2 (fers that ha) 177.69 369 P
-0.2 (v) 230.36 369 P
-0.2 (e been \336lled by a de) 236.18 369 P
-0.2 (vice dri) 331.16 369 P
-0.2 (v) 366.98 369 P
-0.2 (er) 372.8 369 P
-0.2 (. When \336lling DMb) 381.46 369 P
-0.2 (uf) 475.28 369 P
-0.2 (fers from a) 484.97 369 P
-0.28 (disk \336le or memory) 72 355 P
-0.28 (, there may not be an associated MSC. If the sender lea) 164.7 355 P
-0.28 (v) 425.61 355 P
-0.28 (es the MSC \336eld zero,) 431.43 355 P
3 F
-0.28 (dmNetSend\050\051) 72 341 P
0 F
-0.28 ( will pro) 139.99 341 P
-0.28 (vide a monotonically increasing v) 179.92 341 P
-0.28 (alue. T) 341.15 341 P
-0.28 (o a) 373.23 341 P
-0.28 (v) 387.04 341 P
-0.28 (oid possible confusion, callers) 392.8 341 P
(should either) 72 327 T
3 F
(always) 137.33 327 T
0 F
( set the MSC v) 172 327 T
(alue or) 243.04 327 T
3 F
( ne) 276.02 327 T
(v) 290.84 327 T
(er) 296.72 327 T
0 F
( set one.) 307.38 327 T
1 F
(Ad) 72 299 T
(v) 87.82 299 T
(anced Examples) 94.25 299 T
3 F
(P) 72 280 T
(ort number management and connection start up) 79.09 280 T
0 F
-0.04 (There are tw) 72 261 P
-0.04 (o k) 132.44 261 P
-0.04 (e) 147.28 261 P
-0.04 (y issues to be concerned with when starting up a connection: the recei) 152.43 261 P
-0.04 (v) 486.93 261 P
-0.04 (er should) 492.75 261 P
-0.46 (call) 72 247 P
3 F
-0.46 (dmNetListen\050\051) 91.87 247 P
0 F
-0.46 ( before the sender calls) 166.52 247 P
3 F
-0.46 (dmNetConnect\050\051) 277.87 247 P
0 F
-0.46 (, and the sender and recei) 363.18 247 P
-0.46 (v) 482.56 247 P
-0.46 (er must be) 488.38 247 P
(prepared for) 72 233 T
3 F
(dmNetListen\050\051) 133.97 233 T
0 F
( to f) 208.62 233 T
(ail because the port is in use.) 227.83 233 T
(Normally the sender and recei) 72 214 T
(v) 216.32 214 T
(er use a bi-directional sock) 222.14 214 T
(et connection and an application spe-) 351.32 214 T
(ci\336c protocol to start up a session. This control connection can be used to send the port number) 72 200 T
(from the recei) 72 186 T
(v) 139.01 186 T
(er to the sender) 144.83 186 T
(, after the recei) 217.99 186 T
(v) 289.66 186 T
(er has successfully called) 295.48 186 T
3 F
(dmNetListen\050\051) 420.11 186 T
0 F
(. The) 494.76 186 T
(sender\325) 72 172 T
(s code is v) 106.66 172 T
(ery simple:) 156.8 172 T
4 10 Q
(/* receive a message from the receiver saying which port to send to. */) 72 154.33 T
(/* set dmNetPort to that port number. */) 72 142.33 T
(int dmNetPort = ...;) 72 130.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 72 118.33 T
(return FAIL;) 90 106.33 T
(}) 72 94.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(11) 530 749.33 T
4 F
(dmNetConnect\050connection, plist\051 == DM_FAILURE\051 {) 72 713.33 T
(return FAIL;) 90 701.33 T
(}) 72 689.33 T
0 12 Q
(The recei) 72 671 T
(v) 116.68 671 T
(er code follo) 122.5 671 T
(ws) 182.84 671 T
4 10 Q
(int i;) 72 653.33 T
(int dmNetPort = ...;) 72 641.33 T
(/* some initial port number */) 204 641.33 T
(for \050i = 0; i < 10; i++\051 {) 72 629.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 90 617.33 T
(return FAIL;) 108 605.33 T
(}) 90 593.33 T
(if \050dmNetListen\050connection, plist\051 == DM_SUCCESS\051 {) 90 581.33 T
(/* success, exit for loop and carry on. */) 108 569.33 T
(break;) 108 557.33 T
(}) 90 545.33 T
(if \050errno != EADDRINUSE\051 {) 90 533.33 T
(/* dmNetListen failed for some other reason */) 108 521.33 T
(return FAIL;) 108 509.33 T
(}) 90 497.33 T
(/* increment port and try again */) 90 485.33 T
(dmNetPort++;) 90 473.33 T
(}) 72 461.33 T
(if \050i >= 10\051 {) 72 449.33 T
(/* could not find a free port. */) 90 437.33 T
(return FAIL;) 90 425.33 T
(}) 72 413.33 T
(/* at this point, send dmNetPort to the sender. */) 72 401.33 T
(if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051 {) 72 389.33 T
(/* unexpected error in dmNetAccept\050\051. */) 90 377.33 T
(return FAIL;) 90 365.33 T
(}) 72 353.33 T
0 12 Q
(The recei) 72 335 T
(v) 116.68 335 T
(er starts from some initial port number) 122.5 335 T
(. It calls) 307.15 335 T
3 F
(dmNetListen\050\051) 348.48 335 T
0 F
( on each port number) 423.13 335 T
-0.3 (until it succeeds. Then it sends the port number to the sender and calls) 72 321 P
3 F
-0.3 (dmNetAccept\050\051) 407.38 321 P
0 F
-0.3 ( to w) 485.34 321 P
-0.3 (ait for) 508.61 321 P
(the sender to call) 72 307 T
3 F
(dmNetConnect\050\051) 156.65 307 T
0 F
(.) 241.96 307 T
3 F
(A) 72 269 T
(v) 79.46 269 T
(oiding Spinning on dmNetRecv\050\051) 85.34 269 T
0 F
(The simple e) 72 250 T
(xample abo) 133.81 250 T
(v) 189.29 250 T
(e loops on) 195.11 250 T
3 F
(dmNetRecv\050\051) 247.44 250 T
0 F
( with a small delay if) 315.41 250 T
3 F
(dmNetRecv\050\051) 419.4 250 T
0 F
( f) 487.37 250 T
(ails) 494.24 250 T
(because nothing is a) 72 236 T
(v) 168.74 236 T
(ailable. An alternati) 174.44 236 T
(v) 269.12 236 T
(e is to use) 274.94 236 T
3 F
(select\050\051) 325.61 236 T
0 F
( to ensure that there is data a) 361.58 236 T
(v) 498.31 236 T
(ailable) 504.01 236 T
(before calling) 72 222 T
3 F
(dmNetRecv\050\051) 141.31 222 T
0 F
(:) 209.28 222 T
4 10 Q
(fd_set readFDs;) 72 204.33 T
(struct timeval waitTime;) 72 180.33 T
(waitTime.tv_sec = 2;) 72 168.33 T
(waitTime.tv_usec = 0;) 72 156.33 T
(FD_ZERO\050&readFDs\051;) 72 132.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 120.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 108.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 96.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 84.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(12) 530 749.33 T
4 F
(}) 72 713.33 T
(while \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 689.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 677.33 T
(  abort\050\051;) 72 665.33 T
(}) 72 653.33 T
3 12 Q
(Ensuring ther) 72 623 T
(e is a fr) 143.46 623 T
(ee b) 180.9 623 T
(uffer in the pool) 200.99 623 T
0 F
(The recei) 72 604 T
(v) 116.68 604 T
(er program is responsible for ensuring that there is a free b) 122.5 604 T
(uf) 403.19 604 T
(fer in the b) 412.88 604 T
(uf) 464.96 604 T
(fer pool) 474.66 604 T
-0.06 (before calling) 72 590 P
3 F
-0.06 (dmNetRecv\050\051) 141.18 590 P
0 F
-0.06 (. It may not be practical to do this by counting b) 209.15 590 P
-0.06 (uf) 438.85 590 P
-0.06 (fer allocations and) 448.55 590 P
(frees because when a b) 72 576 T
(uf) 182.38 576 T
(fer is queued in for processing by the VLor dmIC, it may be some time) 192.07 576 T
(before it is freed. An alternati) 72 562 T
(v) 213.66 562 T
(e is to use) 219.48 562 T
3 F
(select\050\051) 270.14 562 T
0 F
( to delay until a b) 306.12 562 T
(uf) 389.54 562 T
(fer is free:) 399.24 562 T
4 10 Q
(fd_set readFDs;) 72 544.33 T
(fd_set writeFDs;) 72 532.33 T
(long long bytesAvailable;) 72 508.33 T
(int       buffersAvailable;) 72 496.33 T
(struct timeval waitTime;) 72 472.33 T
(waitTime.tv_sec = 2;) 72 460.33 T
(waitTime.tv_usec = 0;) 72 448.33 T
(/* wait for something to recv. */) 72 424.33 T
(FD_ZERO\050&readFDs\051;) 72 412.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 400.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 388.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 376.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 364.33 T
(}) 72 352.33 T
(if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 328.33 T
(    != DM_SUCCESS\051 {) 72 316.33 T
(   abort\050\051;) 72 304.33 T
(}) 72 292.33 T
(/* wait for a free buffer */) 72 268.33 T
(while \050buffersAvailable < 1\051 {) 72 256.33 T
(  FD_ZERO\050&writeFDs\051;) 72 244.33 T
(  FD_SET \050poolFD, &writeFDs\051;) 72 232.33 T
(  while \050select \050poolFD+1, NULL, &writeFDs, NULL, &waitTime\051 == 0\051 {) 72 220.33 T
(    if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 208.33 T
(  != DM_SUCCESS\051 {) 90 196.33 T
(      abort\050\051;) 72 184.33 T
(    }) 72 172.33 T
(    fprintf\050stderr, \322Select waiting 2 seconds for a free buffer.\134n\323\051;) 72 160.33 T
(    FD_SET \050poolFD, &writeFDs\051;) 72 148.33 T
(  }) 72 136.33 T
(  if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 124.33 T
(!= DM_SUCCESS\051 {) 90 112.33 T
(    abort\050\051;) 72 100.33 T
(  }) 72 88.33 T
(}) 72 76.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(13) 530 749.33 T
4 F
(if \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 701.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 689.33 T
(  abort\050\051;) 72 677.33 T
(}) 72 665.33 T
0 12 Q
(Note that this code can f) 72 635 T
(ail if there is another thread or a de) 188.86 635 T
(vice dri) 356.51 635 T
(v) 392.53 635 T
(er allocating from the same) 398.35 635 T
(pool. Also note that this code \336rst w) 72 621 T
(aits for input to become a) 245.88 621 T
(v) 367.96 621 T
(ailable, then it w) 373.66 621 T
(aits for a b) 453.53 621 T
(uf) 504.28 621 T
(fer) 513.97 621 T
(.) 526.63 621 T
-0.06 (This is to simplify generalizing to the multi-threaded case with multiple allocators. The goal is to) 72 607 P
-0.36 (minimize the delay between a b) 72 593 P
-0.36 (uf) 222.28 593 P
-0.36 (fer becoming a) 231.98 593 P
-0.36 (v) 303 593 P
-0.36 (ailable in the pool and using it. The data w) 308.7 593 P
-0.36 (aiting) 510.02 593 P
(in the netw) 72 579 T
(ork input queue will not go a) 125.21 579 T
(w) 263.69 579 T
(ay) 272.23 579 T
(, b) 282.78 579 T
(ut the free b) 294.54 579 T
(uf) 351.95 579 T
(fer in the b) 361.64 579 T
(uf) 413.72 579 T
(fer pool might be allo-) 423.42 579 T
(cated by the other thread.) 72 565 T
-0.06 (Note that the b) 72 546 P
-0.06 (uf) 142.56 546 P
-0.06 (fer pool\325) 152.25 546 P
-0.06 (s fd is sent to select as a write fd.  This is because) 193.18 546 P
3 F
-0.06 (dmNetRecv\050\051) 433.23 546 P
0 F
-0.06 ( will be) 501.2 546 P
(trying to get a DMb) 72 532 T
(uf) 167.09 532 T
(fer to write to.  \050A common mistak) 176.78 532 T
(e may be to use it as a read fd because) 343.98 532 T
(this code is trying to read.\051) 72 518 T
1 F
(Summar) 72 490 T
(y of Entr) 120.13 490 T
(y P) 168.92 490 T
(oints) 186.46 490 T
0 F
-0.37 (A) 72 471 P
3 F
-0.37 (DMnetconnection) 83.29 471 P
0 F
-0.37 ( is an opaque structure which maintains the state of both the control and data) 174.61 471 P
(connections. It is a pointer to the real structure the library allocates and maintains.) 72 457 T
(There are logically tw) 72 438 T
(o connections in a DMnetconnection, the \336rst for control \050e.g., setup, tear-) 177.52 438 T
(do) 72 424 T
(wn, management and synchronization\051, and the second for passing DMb) 83.7 424 T
(uf) 431.06 424 T
(fer content. Cur-) 440.76 424 T
(rently the control connection is al) 72 410 T
(w) 232.86 410 T
(ays a sock) 241.4 410 T
(et. The current implementation of dmNet supports) 290.6 410 T
(data connections which are either sock) 72 396 T
(ets \050for remote\051 or local \050using a DMS \336fo\051.) 257.5 396 T
4 10 Q
(DMnetconnection connection;) 72 378.33 T
3 12 Q
-0.25 (dmNetOpen\050\051) 72 360 P
0 F
-0.25 ( is the \336rst dmNet call one mak) 142.66 360 P
-0.25 (es. It allocates the internal connection struct and ini-) 291.08 360 P
(tializes it. Returns DM_SUCCESS on successful open, DM_F) 72 346 T
(AILURE otherwise.) 370.12 346 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 328.33 T
3 12 Q
(dmNetClose\050\051) 72 310 T
0 F
( is the last call to mak) 142.64 310 T
(e, it deallocates all the structures including an) 247.19 310 T
(y DMS \336fos) 466.31 310 T
(that might ha) 72 296 T
(v) 135.1 296 T
(e been created. Returns DM_SUCCESS.) 140.92 296 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 278.33 T
3 12 Q
(dmNetConnect\050\051) 72 260 T
0 F
( is the sender side call that sets up the control connection. It looks through the) 157.31 260 T
(DMparams ar) 72 246 T
(gument for a remote host name or remote address and opens a communications) 138.1 246 T
(sock) 72 232 T
(et to the speci\336ed destination. It calls) 93.88 232 T
3 F
(connect\050\051) 275.2 232 T
0 F
( and sets appropriate sock) 322.51 232 T
(et options. Then it) 446.36 232 T
-0.08 (creates whate) 72 218 P
-0.08 (v) 136.59 218 P
-0.08 (er form of communication channel has been speci\336ed for the data portion. Returns) 142.41 218 P
(DM_SUCCESS if connection made and) 72 204 T
3 F
(setsock) 267.66 204 T
(opt\050\051) 304.14 204 T
0 F
( calls succeed, DM_F) 328.8 204 T
(AILURE otherwise.) 431.89 204 T
(This call will block until the recei) 72 190 T
(v) 233.69 190 T
(er calls) 239.51 190 T
3 F
(dmNetAccept\050\051) 276.83 190 T
0 F
(.) 354.79 190 T
4 10 Q
(DMstatus dmNetConnect \050 DMnetconnection connection, DMparams* plist \051;) 72 172.33 T
3 12 Q
(dmNetListen\050\051) 72 154 T
0 F
(and) 149.65 154 T
3 F
( dmNetAccept\050\051) 166.98 154 T
0 F
( are the recei) 247.94 154 T
(v) 309.28 154 T
(er side calls that sets up the control and data) 315.1 154 T
(connections.) 72 140 T
3 F
(dmNetListen\050\051) 135.32 140 T
0 F
( should be called by the recei) 209.98 140 T
(v) 349.64 140 T
(er before the sender calls) 355.46 140 T
3 F
(dmNetConnect\050\051) 72 126 T
0 F
(. T) 157.31 126 T
(ypically) 169.68 126 T
(, the recei) 207.56 126 T
(v) 254.24 126 T
(er will tell the sender what port to use after calling) 260.06 126 T
3 F
(dmNetListen\050\051) 72 112 T
0 F
( b) 146.65 112 T
(ut before calling) 155.41 112 T
3 F
(dmNetAccept\050\051) 237.06 112 T
0 F
(.) 315.02 112 T
3 F
(dmNetAccept\050\051) 321.02 112 T
0 F
( will block until the sender) 398.99 112 T
(calls) 72 98 T
3 F
(dmNetConnect\050\051) 97 98 T
0 F
(.) 182.3 98 T
4 10 Q
(DMstatus dmNetListen \050 DMnetconnection connection , DMparams* plist \051;) 72 80.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(14) 530 749.33 T
4 F
(DMstatus dmNetAccept \050 DMnetconnection connection , DMparams* plist \051;) 72 713.33 T
3 12 Q
(dmNetRegisterP) 72 695 T
(ool\050\051) 156.4 695 T
0 F
( re) 179.72 695 T
(gisters a b) 191.87 695 T
(uf) 240.29 695 T
(fer pool on the connection. This is only needed on a recei) 249.98 695 T
(v-) 524.96 695 T
(ing side. DMb) 72 681 T
(uf) 140.76 681 T
(fers to hold incoming data will be allocated from this pool.) 150.46 681 T
4 10 Q
(int dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 663.33 T
3 12 Q
(dmNetGetP) 72 645 T
(arams\050\051) 132.53 645 T
0 F
( tak) 172.51 645 T
(es the speci\336ed parameter list and modi\336es and/or adds parameters v) 190.06 645 T
(al-) 519.7 645 T
-0.11 (ues as necessary for DMb) 72 631 P
-0.11 (uf) 195.28 631 P
-0.11 (ferpool creation and also adds the parameters which describe the data) 204.97 631 P
(connection.) 72 617 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection , DMparams* plist \051;) 72 599.33 T
3 12 Q
-0.05 (dmNetSend\050\051) 72 581 P
0 F
-0.05 ( sends the dmBuf) 139.99 581 P
-0.05 (fer o) 223.2 581 P
-0.05 (v) 245.29 581 P
-0.05 (er the data connection. Returns DM_SUCCESS on success,) 251.11 581 P
(DM_F) 72 567 T
(AILURE otherwise and errno is set to EB) 103.12 567 T
(USY if the \336fo o) 303.3 567 T
(v) 383.78 567 T
(er\337o) 389.6 567 T
(ws \050i.e., the block couldn\325) 411.3 567 T
(t) 536.06 567 T
(be enqueued because too man) 72 553 T
(y outstanding blocks in the queue\051. If the errno is 0, the underlying) 215.11 553 T
(connection w) 72 539 T
(as closed \050possibly because the recei) 136.2 539 T
(v) 311.52 539 T
(er died or closed the connection\051.) 317.34 539 T
4 10 Q
(DMstatus dmNetSend \050 DMnetconnection connection , DMbuffer buff\051;) 72 521.33 T
3 12 Q
(dmNetRecv\050\051) 72 503 T
0 F
( recei) 139.97 503 T
(v) 165.98 503 T
(es a DMb) 171.8 503 T
(uf) 218.22 503 T
(fer from the data connection. When called,) 227.92 503 T
3 F
(dmNetRecv\050\051) 436.19 503 T
0 F
( allo-) 504.15 503 T
(cates a DMb) 72 489 T
(uf) 132.41 489 T
(fer from the re) 142.1 489 T
(gistered pool, \336lls in the recei) 211.56 489 T
(v) 353.92 489 T
(ed data and metadata and returns it.) 359.74 489 T
(This is a non-blocking call and returns DM_F) 72 475 T
(AILURE with errno set to EB) 290.76 475 T
(USY if no data w) 434.29 475 T
(as) 518.16 475 T
(a) 72 461 T
(v) 77.09 461 T
(ailable. Applications can loop on this return v) 82.79 461 T
(alue or select on the fd \050use) 301.8 461 T
3 F
(dmNetDataFd\050\051) 436.76 461 T
0 F
( to) 518.08 461 T
(get the fd\051. If there are no free DMb) 72 447 T
(uf) 244.69 447 T
(fers in the b) 254.39 447 T
(uf) 311.14 447 T
(fer pool DM_F) 320.83 447 T
(AILURE will be returned and) 392.6 447 T
(errno will be set to ENOMEM. The application can simply delay until a b) 72 433 T
(uf) 425.72 433 T
(fer should ha) 435.42 433 T
(v) 497.83 433 T
(e been) 503.65 433 T
(freed and try ag) 72 419 T
(ain. If the size of the DMb) 147.58 419 T
(uf) 274.31 419 T
(fers in the b) 284 419 T
(uf) 340.75 419 T
(fer pool is set to small for the b) 350.45 419 T
(uf) 500.2 419 T
(fers) 509.89 419 T
(being recie) 72 405 T
(v) 124.68 405 T
(ed, DM_F) 130.5 405 T
(AILURE will be returned and errno will be set to ERANGE. If) 178.94 405 T
(DM_F) 72 391 T
(AILURE is returned and errno is 0, the underlying connection w) 103.12 391 T
(as closed \050possibly) 412.61 391 T
(because the sender died or closed the connection\051.) 72 377 T
4 10 Q
(DMstatus dmNetRecv \050 DMnetconnection, DMbuffer* \051;) 72 359.33 T
3 12 Q
(dmNetContr) 72 341 T
(olFd\050\051) 137.1 341 T
0 F
( returns the \336le descriptor used to select on the dmNet control connection.) 168.43 341 T
4 10 Q
(int dmNetControlFd \050 DMnetconnection \051;) 72 323.33 T
3 12 Q
(dmNetDataFd\050\051) 72 305 T
0 F
( returns the \336le descriptor for the data connection. If the data connection is a) 153.31 305 T
(sock) 72 291 T
(et, it just returns the sock) 93.88 291 T
(et, if it\325) 214.42 291 T
(s a \336fo, it returns its fd. This fd can be used to select on to get) 249.42 291 T
(noti\336cation of when DMb) 72 277 T
(uf) 196.75 277 T
(fers arri) 206.45 277 T
(v) 243.79 277 T
(e.) 249.61 277 T
4 10 Q
(int dmNetDataFd \050 DMnetconnection \051;) 72 259.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "1" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(1) 535 749.33 T
1 14 Q
(Digital Media Netw) 194.9 710.67 T
(orking - dmNet) 318.31 710.67 T
2 12 Q
-0.01 (Note: This is a dr) 126 691 P
-0.01 (aft pr) 209.79 691 P
-0.01 (o) 235.59 691 P
-0.01 (gr) 241.46 691 P
-0.01 (ammer\325) 251.95 691 P
-0.01 (s guide for dmNet. It is intended to be in the style of) 288.79 691 P
(a c) 126 677 T
(hapter for the Insight book \324) 140.15 677 T
(\324IRIS Digitial Media P) 274.48 677 T
(or) 383.17 677 T
(gr) 393.4 677 T
(amming Guide\325) 403.88 677 T
(\325. I have put) 477.54 677 T
-0.14 (little ef) 126 663 P
-0.14 (fort into formating as this document will have to be r) 159.31 663 P
-0.14 (eformated with the of) 411.45 663 P
-0.14 (\336cial) 513.14 663 P
(Insight formats.) 126 649 T
(The c) 126 629 T
(hapter \324) 152.15 629 T
(\324Digital Media Buf) 189.14 629 T
(fer) 280.26 629 T
(s\325) 293.47 629 T
(\325 will need some c) 300.8 629 T
(hang) 387.28 629 T
(es to add dmNet to the list) 411.16 629 T
(of things that can work with DMb) 126 615 T
(uf) 287.77 615 T
(fer) 296.89 615 T
(s.) 310.1 615 T
(Something mor) 126 595 T
(e should be said about the handling of UST/MSC.) 198.55 595 T
0 F
-0.34 (dmNet implements the deli) 72 575 P
-0.34 (v) 201.01 575 P
-0.34 (ery of digital media b) 206.83 575 P
-0.34 (uf) 308.56 575 P
-0.34 (fers o) 318.25 575 P
-0.34 (v) 344.72 575 P
-0.34 (er netw) 350.54 575 P
-0.34 (orks. The central goal of dmNet) 385.73 575 P
(is simple: to allo) 72 561 T
(w media programmers to w) 151.38 561 T
(orry about the details of manipulating media instead) 283.24 561 T
(of managing the netw) 72 547 T
(ork. The API is the same re) 176.2 547 T
(g) 307.66 547 T
(ardless of the underlying netw) 313.6 547 T
(ork - from a 10) 458.78 547 T
(me) 72 533 T
(g) 86.48 533 T
(abit/second Ethernet to striped HIPPI channels transmitting hundreds of me) 92.42 533 T
(g) 455.21 533 T
(abytes/second.) 461.15 533 T
-0.01 (dmNet hides the details and encapsulates tuning ef) 72 519 P
-0.01 (forts to pro) 314.6 519 P
-0.01 (vide the most ef) 367.73 519 P
-0.01 (\336cient data transfer) 444.39 519 P
(possible. dmNet also allo) 72 505 T
(ws ef) 193.03 505 T
(\336cient transfer of DMb) 218.39 505 T
(uf) 329.12 505 T
(fers among processes on the same host.) 338.82 505 T
1 F
(About dmNet) 72 477 T
0 F
(DMb) 72 458 T
(uf) 97.09 458 T
(fers and DMb) 106.79 458 T
(uf) 173.2 458 T
(ferpools allo) 182.89 458 T
(w applications to allocate and use general-purpose system) 242.92 458 T
(memory for transporting media data within an application. A DMb) 72 444 T
(uf) 392.39 444 T
(ferpool is a custom storage) 402.08 444 T
(f) 72 430 T
(acility created by the application. V) 75.88 430 T
(ideo I/O de) 246.46 430 T
(vices, compression de) 300.14 430 T
(vices and algorithms and) 405.49 430 T
-0.32 (graphics de) 72 416 P
-0.32 (vices ha) 126.36 416 P
-0.32 (v) 164.79 416 P
-0.32 (e direct access to this storage on a compartmental basis; each compartment is) 170.61 416 P
(referred to by a DMb) 72 402 T
(uf) 173.72 402 T
(fer) 183.42 402 T
(. An application can de\336ne what this compartment represents, b) 196.08 402 T
(ut in) 501.46 402 T
(general a DMb) 72 388 T
(uf) 143.74 388 T
(fer represents a single image \050e.g., one frame or \336eld of video\051.) 153.43 388 T
(W) 72 369 T
(ithin an application, the contents of a DMb) 82.85 369 T
(uf) 288.59 369 T
(fer are transferred by communicating only a refer-) 298.28 369 T
(ence to the storage location rather than mo) 72 355 T
(ving the actual contents. DMb) 276.11 355 T
(uf) 420.85 355 T
(fers are, essentially) 430.55 355 T
(,) 522.07 355 T
(placeholders which contain pointers to the data; the data bytes are stored else) 72 341 T
(where, in specially) 441.62 341 T
(reserv) 72 327 T
(ed system memory) 101.14 327 T
(. This memory is reserv) 191.02 327 T
(ed at application start-up and guaranteed for the) 304.49 327 T
(life of the application, and is not visited by the page daemon and will not be sw) 72 313 T
(apped out.) 452.84 313 T
(The dmNet API e) 72 294 T
(xtends the functionality of DMb) 156.8 294 T
(uf) 311.22 294 T
(fers, by pro) 320.92 294 T
(viding a lo) 375.72 294 T
(w-ef) 426.76 294 T
(fort, lo) 448.44 294 T
(w-intrusion) 480.8 294 T
(e) 72 280 T
(xtension of the e) 77.15 280 T
(xisting DMb) 156.62 280 T
(uf) 217.39 280 T
(fer API that allo) 227.09 280 T
(ws the application programmer to mo) 304.44 280 T
(v) 484.57 280 T
(e) 490.39 280 T
(DMb) 72 266 T
(uf) 97.09 266 T
(fers across a netw) 106.79 266 T
(ork. It adds four basic calls:) 192.3 266 T
3 F
(dmNetConnect\050\051) 328.61 266 T
0 F
(,) 413.92 266 T
3 F
(dmNetAccept\050\051) 419.92 266 T
0 F
(,) 497.88 266 T
3 F
(dmNetSend\050\051) 72 252 T
0 F
( and) 139.99 252 T
3 F
(dmNetRecv\050\051) 163.32 252 T
0 F
(, which encapsulate the details of sending data on a netw) 231.29 252 T
(ork.) 503.45 252 T
-0.31 (Except for the initialization parameters, the calls are e) 72 238 P
-0.31 (xactly the same, re) 328.26 238 P
-0.31 (g) 417.12 238 P
-0.31 (ardless of netw) 423.06 238 P
-0.31 (ork type.) 494.96 238 P
(This allo) 72 224 T
(ws the application programmer to think about mo) 114.04 224 T
(ving DMb) 351.5 224 T
(uf) 400.93 224 T
(fers, not about the details) 410.63 224 T
(of what are in them.) 72 210 T
(K) 72 191 T
(e) 80.36 191 T
(y features of dmNet include:) 85.51 191 T
(\245) 72 172 T
(dmNet hides man) 90 172 T
(y details of the netw) 174.48 172 T
(ork) 271.68 172 T
(\245) 72 152 T
(the dmNet API is independent of the netw) 90 152 T
(ork) 292.19 152 T
(\245) 72 132 T
-0.3 (on most current netw) 90 132 P
-0.3 (orks, dmNet is no slo) 190.64 132 P
-0.3 (wer than the f) 291.5 132 P
-0.3 (astest alternati) 356.8 132 P
-0.3 (v) 425.19 132 P
-0.3 (e, and can be f) 431.01 132 P
-0.3 (aster) 499.34 132 P
(\245) 72 112 T
(dmNet preserv) 90 112 T
(es all meta-data associated with a DMb) 160.8 112 T
(uf) 349.19 112 T
(fer \050e.g., user data, VITC\051) 358.88 112 T
(\245) 72 92 T
3.53 (dmNet modi\336es the UST on recei) 90 92 P
3.53 (v) 269.01 92 P
3.53 (ed DMb) 274.83 92 P
3.53 (uf) 317.78 92 P
3.53 (fers so that the UST of the recei) 327.47 92 P
3.53 (v) 504.85 92 P
3.53 (ed) 510.67 92 P
(DMb) 90 78 T
(uf) 115.09 78 T
(fers re\337ects the correct time relati) 124.79 78 T
(v) 286.1 78 T
(e to the recei) 291.92 78 T
(v) 353.27 78 T
(er\325) 359.09 78 T
(s clock, not the sender\325) 371.75 78 T
(s clock.) 482.06 78 T
FMENDPAGE
%%EndPage: "1" 15
%%Page: "2" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(2) 535 749.33 T
0 12 Q
(\245) 72 712 T
(the dmNet API is consistent with other APIs for processing DMb) 90 712 T
(uf) 403.07 712 T
(fers \050e.g., dmIC\051) 412.76 712 T
(\245) 72 692 T
(dmNet can be used to ef) 90 692 T
(\336ciently mo) 206 692 T
(v) 263.5 692 T
(e a DMb) 269.32 692 T
(uf) 311.06 692 T
(fer between processes on the same host) 320.76 692 T
1 F
(Using dmNet) 72 664 T
0 F
(A dmNet connection supports the uni-directional \337o) 72 645 T
(w of DMb) 322.34 645 T
(uf) 372.1 645 T
(fers from the sender to the) 381.79 645 T
(recei) 72 631 T
(v) 95.02 631 T
(er) 100.84 631 T
(. Bi-directional \337o) 109.5 631 T
(w requires tw) 197.53 631 T
(o independent connections. Both the sender and the) 262.73 631 T
-0.46 (recei) 72 617 P
-0.46 (v) 95.02 617 P
-0.46 (er must \336rst create a connection instance with) 100.84 617 P
3 F
-0.46 (dmNetOpen\050\051) 319.78 617 P
0 F
-0.46 (. Then the connections must be) 390.44 617 P
(initialized by setting DMb) 72 603 T
(uf) 198.1 603 T
(fer and netw) 207.79 603 T
(ork parameters. This is discussed in detail belo) 267.65 603 T
(w) 491.99 603 T
(. When) 499.87 603 T
(the connections are initialized, the recei) 72 589 T
(v) 262.32 589 T
(er calls) 268.14 589 T
3 F
(dmNetListen\050\051) 305.46 589 T
0 F
( to initialize the connection and) 380.11 589 T
(calls) 72 575 T
3 F
(dmNetAccept\050\051) 97 575 T
0 F
( to w) 174.96 575 T
(ait for the sender to call) 198.84 575 T
3 F
(dmNetConnect\050\051) 315.48 575 T
0 F
(. Usually) 400.79 575 T
(, the recei) 443.34 575 T
(v) 490.02 575 T
(er will) 495.84 575 T
-0.23 (use a separate, application speci\336c control connection to tell the recei) 72 561 P
-0.23 (v) 402.28 561 P
-0.23 (er which IP port to connect) 408.1 561 P
(to. This message is usually sent after) 72 547 T
3 F
(dmNetListen\050\051) 251.32 547 T
0 F
( returns b) 325.97 547 T
(ut before calling) 371.05 547 T
3 F
(dmNetAccept\050\051) 452.7 547 T
0 F
(.) 530.66 547 T
(Once the connection is established, the sender calls) 72 533 T
3 F
(dmNetSend\050\051) 320.95 533 T
0 F
( to send a b) 388.94 533 T
(uf) 443.36 533 T
(fer and the) 453.06 533 T
(recei) 72 519 T
(v) 95.02 519 T
(er calls) 100.84 519 T
3 F
(dmNetRecv\050\051) 138.16 519 T
0 F
( to recei) 206.12 519 T
(v) 244.48 519 T
(e a DMb) 250.3 519 T
(uf) 292.04 519 T
(fer) 301.74 519 T
(. When the sender and recei) 314.4 519 T
(v) 447.38 519 T
(er are done, the) 453.2 519 T
(y) 526.99 519 T
(each call) 72 505 T
3 F
(dmNetClose\050\051) 117.31 505 T
0 F
( to close the connection. \050A simple application need not ha) 187.96 505 T
(v) 469.34 505 T
(e an applica-) 475.16 505 T
-0.14 (tion speci\336c protocol for start up. The sending and reci) 72 491 P
-0.14 (ving side could simply use an agreed upon) 333.77 491 P
(port number) 72 477 T
(.\051) 130.33 477 T
-0.47 (The information required for initialization v) 72 458 P
-0.47 (aries slightly for the sender and recei) 280.3 458 P
-0.47 (v) 454.43 458 P
-0.47 (er) 460.25 458 P
-0.47 (. The sender is) 468.92 458 P
(only concerned with netw) 72 444 T
(ork parameters. There are three parameters that must be set) 196.19 444 T
(\245) 72 425 T
1.24 (the connection type -- either local, to e) 90 425 P
1.24 (xchange DMb) 283.81 425 P
1.24 (uf) 353.13 425 P
1.24 (fers with another process on the) 362.82 425 P
(same machines, or TCP) 90 411 T
(. \050Other connection types may be added in the future.\051) 202.66 411 T
(\245) 72 391 T
(an IP port number) 90 391 T
(\245) 72 371 T
(the name of the recei) 90 371 T
(v) 190.33 371 T
(er \050or sock) 196.15 371 T
(et address\051) 247.34 371 T
(The recei) 72 351 T
(v) 116.68 351 T
(er must specify the connection type and the port number) 122.5 351 T
(. Both must agree with the) 392.12 351 T
(sending side. In addition, the recei) 72 337 T
(v) 236.68 337 T
(er must create a b) 242.5 337 T
(uf) 326.89 337 T
(fer pool from which DMb) 336.59 337 T
(uf) 460.99 337 T
(fers will be) 470.69 337 T
-0.41 (allocated to hold the recei) 72 323 P
-0.41 (v) 194.02 323 P
-0.41 (ed data. Buf) 199.84 323 P
-0.41 (fer pool def) 257.04 323 P
-0.41 (aults for creating this pool can be obtained with) 312.07 323 P
(the) 72 309 T
3 F
(dmNetGetP) 89.66 309 T
(arams\050\051) 150.19 309 T
0 F
( call. The pool must be re) 190.18 309 T
(gistered with the) 312.31 309 T
3 F
(dmNetRegisterP) 395.3 309 T
(ool\050\051) 479.7 309 T
0 F
( call.) 503.03 309 T
3 F
-0.25 (dmNetRegisterP) 72 295 P
-0.25 (ool\050\051) 156.4 295 P
0 F
-0.25 ( is normally called after) 179.72 295 P
3 F
-0.25 (dmNetAccept\050\051) 295.43 295 P
0 F
-0.25 ( and must be called before the \336rst) 373.39 295 P
(call to) 72 281 T
3 F
(dmNetRecv\050\051) 104.66 281 T
0 F
(.) 172.63 281 T
1 F
(Sending Data With dmNet) 72 253 T
0 F
(The dmNet and digital media entry points used by the sending side are presented belo) 72 234 T
(w) 482.98 234 T
(, in the) 490.86 234 T
(order in which the) 72 220 T
(y should be called.) 159.47 220 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 202.33 T
0 12 Q
(dmNetOpen creates and initializes the DMnetconnection structure.) 72 184 T
-0.26 (T) 72 165 P
-0.26 (o set the netw) 78.37 165 P
-0.26 (ork parameters for the ne) 143.79 165 P
-0.26 (w connection, a DMparams structure must be created and) 263.08 165 P
(\336lled in. The structure is created with) 72 151 T
4 10 Q
(DMstatus dmParamsCreate \050DMparams** params \051;) 72 133.33 T
0 12 Q
(The connection type and port can be set with the dmP) 72 115 T
(aramsSetInt call) 329.78 115 T
4 10 Q
(DMstatus dmParamsSetInt \050DMparams* params, const char* paramName, int value \051;) 72 97.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 16
%%Page: "3" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(3) 535 749.33 T
0 12 Q
(The constants DMNET_CONNECTION_TYPE and DMNET_POR) 72 712 T
(T can be used for the) 398.58 712 T
-0.22 (paramName. The v) 72 698 P
-0.22 (alue for the connection type should be either DMNET_TCP for a netw) 163.55 698 P
-0.22 (ork con-) 499.9 698 P
-0.02 (nection, or DMNET_LOCAL for a connection to another process on the same machine. The port) 72 684 P
(number is a 16 bit, unsigned int. V) 72 670 T
(alues from 0 to 1023 are reserv) 237 670 T
(ed. Applications are free to use) 386.11 670 T
(port numbers from 1024 to 65535 inclusi) 72 656 T
(v) 269.03 656 T
(e.) 274.85 656 T
-0.35 (There are tw) 72 637 P
-0.35 (o w) 131.81 637 P
-0.35 (ays to identify the remote machine to connect to: the machine can be identi\336ed by) 149 637 P
(name or by a sock) 72 623 T
(et address.) 159.19 623 T
(A name can be supplied as a character string using) 72 604 T
4 10 Q
(DMstatus dmParamsSetString \050 DMparams* params, const char* paramName, const) 72 586.33 T
(char* value \051;) 72 574.33 T
0 12 Q
(In this case, use the constant DMNET_REMO) 72 556 T
(TE_HOSTN) 294.49 556 T
(AME as the paramName.) 354.73 556 T
(A sock) 72 537 T
(et address can be supplied with) 105.54 537 T
3 F
(dmP) 258.18 537 T
(aramsSetInt\050\051) 282.06 537 T
0 F
( using the constant) 353.38 537 T
(DMNET_REMO) 72 523 T
(TE_SOCKADDR for the paramName. In this case, the v) 154.85 523 T
(alue will lik) 427.16 523 T
(ely be the) 484.38 523 T
(v) 72 509 T
(alue of the sin_addr) 77.7 509 T
(.s_addr \336eld of an instance of the sockaddr_in structure.) 172.02 509 T
-0.14 (When these parameters are set in the DMparams structure, the sender opens the connection to the) 72 490 P
(recei) 72 476 T
(v) 95.02 476 T
(er with) 100.84 476 T
4 10 Q
(DMstatus dmNetConnect \050DMnetconnection connection, DMparams * params \051;) 72 458.33 T
0 12 Q
-0.46 (Before the sender calls) 72 440 P
3 F
-0.46 (dmNetConnect\050\051) 182.79 440 P
0 F
-0.46 (the sender and recie) 270.63 440 P
-0.46 (v) 364.58 440 P
-0.46 (er must agree on a port number and) 370.4 440 P
(the recei) 72 426 T
(v) 112.68 426 T
(er must ha) 118.5 426 T
(v) 168.25 426 T
(e called) 174.07 426 T
3 F
(dmNetListen\050\051) 214.06 426 T
0 F
(.) 288.71 426 T
(After a successful return from) 72 407 T
3 F
(dmNetConnect\050\051) 218.95 407 T
0 F
(, the sender is free to send b) 304.26 407 T
(uf) 437.99 407 T
(fers with) 447.68 407 T
4 10 Q
(DMstatus dmNetSend \050DMnetconnection connection, DMbuffer buff \051;) 72 389.33 T
0 12 Q
(dmNetSend will attach to the b) 72 371 T
(uf) 220.75 371 T
(fer with) 230.45 371 T
3 F
(dmBufferAttach\050\051) 271.1 371 T
0 F
( and free the b) 363.74 371 T
(uf) 432.14 371 T
(fer with) 441.84 371 T
3 F
(dmBufferFr) 72 357 T
(ee\050\051) 134.44 357 T
0 F
( when it is done. The sending program may call) 153.08 357 T
3 F
(dmBufferFr) 384.72 357 T
(ee\050\051) 447.16 357 T
0 F
( on the sent) 465.8 357 T
(b) 72 343 T
(uf) 77.76 343 T
(fer immediately) 87.46 343 T
(, b) 163 343 T
(ut this does not mean the b) 174.76 343 T
(uf) 303.18 343 T
(fer will be returned the to pool -- dmNet may) 312.88 343 T
(not ha) 72 329 T
(v) 101.42 329 T
(e freed the b) 107.24 329 T
(uf) 166.64 329 T
(fer) 176.34 329 T
(. This call may block or may f) 189 329 T
(ail and set errno to EB) 333.53 329 T
(USY) 441.06 329 T
(, if the netw) 463.51 329 T
(ork) 520.72 329 T
(send queue is full. The application should check for the latter case and retry the send after a suit-) 72 315 T
(able delay) 72 301 T
(.) 120.2 301 T
(The sending program should be careful to ensure that the size has been set in the DMb) 72 282 T
(uf) 486.35 282 T
(fer) 496.04 282 T
(. The) 508.7 282 T
(video library) 72 268 T
(, VL, is careful to do this for captured video, b) 132.88 268 T
(ut if the b) 355.6 268 T
(uf) 401.69 268 T
(fers are being \336lled with) 411.38 268 T
(material coming from other sources, such as disk, the programmer may ha) 72 254 T
(v) 428.03 254 T
(e to set the size with) 433.85 254 T
4 10 Q
(DMstatus dmBufferSetSize \050 DMbuffer buff, int size \051;) 72 236.33 T
0 12 Q
(The size is in bytes.) 72 218 T
-0.26 (The sending program can also use the user data area of the DMb) 72 199 P
-0.26 (uf) 377.9 199 P
-0.26 (fer to carry information such as) 387.6 199 P
(frame number and \336eld information. The user data can be set with) 72 185 T
4 10 Q
(DMstatus dmBufferSetUserData \050 DMbuffer buffer, const u_char *data,) 72 167.33 T
( int size  \051;) 234 155.33 T
0 12 Q
(When the sender is \336nished sending, it should close the connection with) 72 137 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 119.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 17
%%Page: "4" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(4) 535 749.33 T
1 12 Q
(Receiving Data with dmNet) 72 712 T
0 F
(The recei) 72 693 T
(v) 116.68 693 T
(er must open a connection and set the parameter v) 122.5 693 T
(alues just lik) 362.47 693 T
(e the sender) 423.02 693 T
(, e) 479.86 693 T
(xcept it) 491 693 T
(does not ha) 72 679 T
(v) 126.42 679 T
(e to supply either a DMNET_REMO) 132.24 679 T
(TE_HOSTN) 309.41 679 T
(AME or a) 369.65 679 T
(DMNET_REMO) 72 665 T
(TE_SOCKADDR. Also, the recei) 154.85 665 T
(v) 316.86 665 T
(er does not call) 322.68 665 T
3 F
(dmNetConnect\050\051) 398.66 665 T
0 F
(. Instead it) 483.97 665 T
(calls) 72 651 T
3 F
(dmNetListen\050\051) 97 651 T
0 F
( and) 171.65 651 T
3 F
(dmNetAccept\050\051) 194.98 651 T
0 F
(.) 272.94 651 T
4 10 Q
(DMstatus dmNetListen \050DMnetconnection connection, DMparams * params \051;) 72 633.33 T
0 12 Q
-0.22 (This must be called before the sender calls) 72 615 P
3 F
-0.22 (dmNetConnect\050\051) 277.51 615 P
0 F
-0.22 (. This call can f) 362.82 615 P
-0.22 (ail if the port number) 436.12 615 P
(supplied in the params is already in use. In this case the port number in the params should be) 72 601 T
-0.09 (changed, and the call to) 72 587 P
3 F
-0.09 (dmNetListen\050\051) 188.17 587 P
0 F
-0.09 ( retried. When) 262.82 587 P
3 F
-0.09 (dmNetListen\050\051) 334.52 587 P
0 F
-0.09 ( succeeds, the port number) 409.17 587 P
(should be transmitted to the sender so that it kno) 72 573 T
(ws which port number to connect to.) 304.69 573 T
(After) 72 554 T
3 F
(dmNetListen\050\051) 100.32 554 T
0 F
( succeeds call) 174.97 554 T
4 10 Q
(DMstatus dmNetAccept \050DMnetconnection connection \051;) 72 536.33 T
0 12 Q
-0.38 (After the) 72 518 P
3 F
-0.38 (dmNetAccept\050\051) 117.23 518 P
0 F
-0.38 ( call returns, the recei) 195.19 518 P
-0.38 (v) 297.01 518 P
-0.38 (er must re) 302.83 518 P
-0.38 (gister a b) 349.88 518 P
-0.38 (uf) 392.88 518 P
-0.38 (fer pool with dmNet. dmNet) 402.57 518 P
(will allocate b) 72 504 T
(uf) 139.75 504 T
(fers from this pool for the recei) 149.45 504 T
(v) 299.11 504 T
(ed b) 304.93 504 T
(uf) 325.02 504 T
(fers. The b) 334.72 504 T
(uf) 386.12 504 T
(fer pool must be created with) 395.82 504 T
(parameters consistent with dmNet\325) 72 490 T
(s requirements. The call) 238.98 490 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection, DMparams params \051;) 72 472.33 T
0 12 Q
(can be used to modify the b) 72 454 T
(uf) 204.41 454 T
(fer pool creation parameters in params as necessary) 214.1 454 T
(. \050The pool cre-) 460.91 454 T
(ation process in) 72 440 T
(v) 146.84 440 T
(olv) 152.6 440 T
(es se) 167.76 440 T
(v) 190.45 440 T
(eral steps that are best understood from the sample code belo) 196.27 440 T
(w) 488.58 440 T
(.\051) 496.46 440 T
(After the pool is created, it must be re) 72 421 T
(gistered with the dmNet connection) 253.45 421 T
4 10 Q
(DMstatus dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 403.33 T
0 12 Q
(This tells the connection to allocate a b) 72 385 T
(uf) 259.4 385 T
(fer from pool for each b) 269.1 385 T
(uf) 383.82 385 T
(fer recei) 393.52 385 T
(v) 432.85 385 T
(ed with) 438.67 385 T
3 F
(dmNetRecv\050\051) 72 371 T
0 F
(.) 139.97 371 T
3 F
(dmNetRegisterP) 145.97 371 T
(ool\050\051) 230.36 371 T
0 F
( can be called ag) 253.69 371 T
(ain to change the pool, say) 333.6 371 T
(, to switch to a) 460.8 371 T
(lar) 72 357 T
(ger pool. The \336rst pool can then be freed with) 84.44 357 T
3 F
(dmBufferDestr) 307.4 357 T
(oyP) 385.16 357 T
(ool\050\051) 404.26 357 T
0 F
(.) 427.58 357 T
(The recei) 72 338 T
(v) 116.68 338 T
(er recei) 122.5 338 T
(v) 157.84 338 T
(es b) 163.66 338 T
(uf) 182.41 338 T
(fers with) 192.11 338 T
4 10 Q
(int dmNetRecv \050 DMnetconnection connection, DMbuffer * buff \051;) 72 320.33 T
0 12 Q
-0.37 (This call does not block. The recei) 72 302 P
-0.37 (v) 235.13 302 P
-0.37 (er program has tw) 240.95 302 P
-0.37 (o choices. It could use) 326.7 302 P
3 F
-0.37 (select\050\051) 434.84 302 P
0 F
-0.37 ( to ensure that) 470.82 302 P
(there is a b) 72 288 T
(uf) 124.08 288 T
(fer w) 133.78 288 T
(aiting in the netw) 158.64 288 T
(ork\325) 242.18 288 T
(s input queue \050see the Adv) 261.52 288 T
(anced Examples belo) 388.86 288 T
(w\051. The) 490.54 288 T
(alternati) 72 274 T
(v) 111.02 274 T
(e is to check the return v) 116.84 274 T
(alue. If it is DM_SUCCESS then a b) 234.52 274 T
(uf) 410.28 274 T
(fer w) 419.98 274 T
(as recei) 444.84 274 T
(v) 480.85 274 T
(ed. If the) 486.67 274 T
(return v) 72 260 T
(alue is DM_F) 109.36 260 T
(AILURE, then the v) 174.47 260 T
(alue of errno must be check) 271.49 260 T
(ed. A v) 404.33 260 T
(alue of EB) 439.02 260 T
(USY) 490.22 260 T
(implies that there w) 72 246 T
(as no data a) 166.87 246 T
(v) 222.95 246 T
(ailable and) 228.65 246 T
3 F
(dmNetRecv\050\051) 283.97 246 T
0 F
( should be called ag) 351.94 246 T
(ain after a suitable) 447.19 246 T
(delay) 72 232 T
(. If errno is 0 then the connection has been closed \050the sender could ha) 97.21 232 T
(v) 434.56 232 T
(e died or closed the) 440.38 232 T
(connection\051.) 72 218 T
3 F
(dmNetRecv\050\051) 72 199 T
0 F
( can f) 139.97 199 T
(ail if it is unable to allocate a DMb) 166.5 199 T
(uf) 333.58 199 T
(fer to recei) 343.27 199 T
(v) 394.94 199 T
(e the data into. The applica-) 400.76 199 T
-0.12 (tion is responsible for ensuring that there is a free b) 72 185 P
-0.12 (uf) 317.2 185 P
-0.12 (fer in the pool before calling) 326.89 185 P
3 F
-0.12 (dmNetRecv\050\051) 466.15 185 P
0 F
-0.12 (.) 534.12 185 P
-0.4 (It could do this by k) 72 171 P
-0.4 (eeping careful count of allocated b) 166.22 171 P
-0.4 (uf) 330.27 171 P
-0.4 (fers, b) 339.97 171 P
-0.4 (ut this can be dif) 369.32 171 P
-0.4 (\336cult if DMb) 447.42 171 P
-0.4 (uf) 509.71 171 P
-0.4 (fers) 519.41 171 P
-0.13 (are sent to VL or other libraries that hold the b) 72 157 P
-0.13 (uf) 293.73 157 P
-0.13 (fers in queues until processing is completed. The) 303.42 157 P
-0.11 (alternati) 72 143 P
-0.11 (v) 111.02 143 P
-0.11 (e is to delay until there is a free b) 116.84 143 P
-0.11 (uf) 275.25 143 P
-0.11 (fer in the b) 284.95 143 P
-0.11 (uf) 336.7 143 P
-0.11 (fer pool. Code to do this is sho) 346.4 143 P
-0.11 (wn in the) 492.67 143 P
(Adv) 72 129 T
(anced Examples belo) 92.36 129 T
(w) 194.04 129 T
(.) 201.92 129 T
(When the recei) 72 110 T
(v) 144.34 110 T
(er program is \336nished recei) 150.16 110 T
(ving it should call) 281.16 110 T
3 F
(dmNetClose\050\051) 370.5 110 T
0 F
(.) 441.14 110 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 18
%%Page: "5" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(5) 535 749.33 T
0 12 Q
(If the b) 72 712 T
(uf) 106.42 712 T
(fer pool that is re) 116.11 712 T
(gistered on the recie) 197.92 712 T
(ving side supports v) 294.59 712 T
(ariable size DMb) 390.62 712 T
(uf) 473.03 712 T
(fers \050e.g.,) 482.72 712 T
4 10 Q
(dmParamsSetEnum\050plist, DM_POOL_VARIABLE, DM_TRUE\051;) 72 698 T
0 12 Q
(\051, then dmNet will allocate b) 372 698 T
(uf) 509.08 698 T
(fers) 518.77 698 T
(big enough for the incoming data, rounded up to the ne) 72 684 T
(xt con) 336.12 684 T
(v) 365.3 684 T
(enient size. This means that audio) 371.12 684 T
(data \050probably a fe) 72 670 T
(w k bytes per DMb) 162 670 T
(uf) 254.41 670 T
(fer\051 and video data \050probably 100\325) 264.11 670 T
(s of k bytes per) 428.4 670 T
(DMb) 72 656 T
(uf) 97.09 656 T
(fer\051 can be mix) 106.79 656 T
(ed on the same dmNet connection and the use of the b) 179.58 656 T
(uf) 438.96 656 T
(fer pool memory) 448.66 656 T
(will be ef) 72 642 T
(\336cient.) 117.02 642 T
1 F
(Examples) 72 614 T
0 F
(A simple program for sending DMb) 72 595 T
(uf) 244.74 595 T
(fers to a process on another host) 254.44 595 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 577.33 T
(main \050int argc, char ** argv\051 {) 72 553.33 T
(  int i;) 72 529.33 T
(  int Nframes     = 10;) 72 517.33 T
(  int sizeInBytes = 10;) 72 505.33 T
(  int bufferCount = 5;) 72 493.33 T
(  int bufferSize  = 100;) 72 481.33 T
(  int port        = 9161;) 72 469.33 T
(  DMbufferpool    pool;) 72 445.33 T
(  DMnetconnection connection;) 72 433.33 T
(  DMparams *      plist;) 72 421.33 T
(  DMbuffer        buff;) 72 409.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 385.33 T
(    abort\050\051;) 72 373.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 361.33 T
(    abort\050\051;) 72 349.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 337.33 T
(      DM_FAILURE\051) 72 325.33 T
(    abort\050\051;) 72 313.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 301.33 T
(    abort\050\051;) 72 289.33 T
(  /* A remote address may also be specified instead by the following call:) 72 277.33 T
(  ** dmParamsSetInt\050plist, DMNET_REMOTE_SOCKADDR, sin.sin_addr.s_addr\051; */) 72 265.33 T
(  if \050dmParamsSetString\050plist, DMNET_REMOTE_HOSTNAME, \322hostname\323\051 ==) 72 253.33 T
(      DM_FAILURE\051) 72 241.33 T
(    abort\050\051;) 72 229.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 217.33 T
(     dmNetListen. */) 72 205.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 193.33 T
(    abort\050\051;) 72 181.33 T
(  /* now create the buffer pool */) 72 157.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 145.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 133.33 T
(    abort\050\051;) 72 121.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 109.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 97.33 T
(    abort\050\051;) 72 85.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 19
%%Page: "6" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(6) 535 749.33 T
4 F
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 713.33 T
(    abort\050\051;) 72 701.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 677.33 T
(    if \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 665.33 T
(      abort\050\051;) 72 653.33 T
(    /* put some data into buff here*/) 72 641.33 T
(    /* if necessary, set its size with ... */) 72 629.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 617.33 T
(    if \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 605.33 T
(      abort\050\051;) 72 593.33 T
(    }) 72 581.33 T
(    dmBufferFree\050buff\051;) 72 569.33 T
(  }) 72 557.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 533.33 T
(    abort\050\051;) 72 521.33 T
(}) 72 509.33 T
0 12 Q
(A simple program for recei) 72 479 T
(ving DMb) 202.33 479 T
(uf) 251.76 479 T
(fers from a remote host) 261.46 479 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 461.33 T
(main \050int argc, char ** argv\051 {) 72 437.33 T
(  int i;) 72 413.33 T
(  int Nframes     = 10;) 72 401.33 T
(  int bufferCount = 5;) 72 389.33 T
(  int bufferSize  = 100;) 72 377.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 365.33 T
(  DMnetconnection connection;) 72 341.33 T
(  DMparams *      plist;) 72 329.33 T
(  DMbufferpool    pool;) 72 317.33 T
(  DMbuffer        buff;) 72 305.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 233.33 T
(      DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 173.33 T
(    /* we should try a new port number if we get here. */) 72 161.33 T
(    abort\050\051;) 72 149.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 137.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 125.33 T
(    abort\050\051;) 72 113.33 T
(  /* Now set up the buffer pool */) 72 101.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 89.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 20
%%Page: "7" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(7) 535 749.33 T
4 F
(    abort\050\051;) 72 713.33 T
(  /* set the pool parameters as needed by dmNet. */) 72 701.33 T
(  /* you may also have to call, for example, vlDMPoolGetParams, to get the) 72 689.33 T
(buffer) 72 677.33 T
(     pool parameters needed by vl. */) 72 665.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 653.33 T
(    abort\050\051;) 72 641.33 T
(  /* create the buffer pool */) 72 629.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(  if \050dmNetRegisterPool\050connection, pool\051 != DM_SUCCESS\051) 72 593.33 T
(    abort\050\051;) 72 581.33 T
(  /* now loop to receive the buffers. */) 72 569.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 557.33 T
(    if \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 545.33 T
(      abort\050\051;) 72 533.33 T
(    }) 72 521.33 T
(    /* use the data in buff here */) 72 509.33 T
(    dmBufferFree\050buff\051;) 72 497.33 T
(  }) 72 485.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 473.33 T
(    abort\050\051;) 72 461.33 T
(}) 72 449.33 T
1 12 Q
(Sending DMb) 72 398 T
(uff) 148.43 398 T
(er) 163.63 398 T
(s fr) 174.79 398 T
(om Pr) 193.22 398 T
(ocess to Pr) 226.99 398 T
(ocess on one Host) 291.44 398 T
0 F
-0.43 (dmNet can ef) 72 379 P
-0.43 (\336ciently mo) 135.48 379 P
-0.43 (v) 192.54 379 P
-0.43 (e DMb) 198.36 379 P
-0.43 (uf) 231.35 379 P
-0.43 (fers between processes on the same host. The dif) 241.04 379 P
-0.43 (ferences from) 471.56 379 P
(the remote case are) 72 365 T
(\245) 72 346 T
4.42 (the DMNET_CONNECTION_TYPE is DMNET_LOCAL for both the sender and) 90 346 P
(recei) 90 332 T
(v) 113.02 332 T
(er) 118.84 332 T
(.) 127.5 332 T
(\245) 72 312 T
13.14 (the sender need not specify the DMNET_REMO) 90 312 P
13.14 (TE_HOSTN) 402.96 312 P
13.14 (AME nor) 463.2 312 P
(DMNET_REMO) 90 298 T
(TE_SOCKADDR) 172.85 298 T
(\245) 72 278 T
(the recei) 90 278 T
(v) 130.68 278 T
(e need not allocate or re) 136.5 278 T
(gister a b) 251.28 278 T
(uf) 295.03 278 T
(fer pool) 304.73 278 T
(There is a critical dif) 72 258 T
(ference between the local and remote cases for DMb) 171.67 258 T
(uf) 424.01 258 T
(fer handling. In the) 433.7 258 T
(remote case, DMb) 72 244 T
(uf) 160.07 244 T
(fers that are sent are quickly returned to the sender\325) 169.76 244 T
(s pool \050assuming the) 416.03 244 T
(sender calls) 72 230 T
3 F
(dmNetFr) 131.32 230 T
(ee\050\051) 178.42 230 T
0 F
( after) 197.06 230 T
3 F
(dmNetSend\050\051) 225.05 230 T
0 F
(\051. In the local case, the b) 293.04 230 T
(uf) 410.1 230 T
(fers are passed to the) 419.8 230 T
(recei) 72 216 T
(ving process and are not returned to the sender\325) 95.02 216 T
(s pool until the after the recei) 322.3 216 T
(v) 462.64 216 T
(er frees them.) 468.46 216 T
-0.16 (Thus, the sender must allocate a pool big enough for both the sender\325) 72 202 P
-0.16 (s and recei) 401.66 202 P
-0.16 (v) 452.35 202 P
-0.16 (er\325) 458.17 202 P
-0.16 (s needs. Also,) 470.83 202 P
(b) 72 188 T
(uf) 77.76 188 T
(fer pool parameters can depend on the w) 87.46 188 T
(ay the b) 282.28 188 T
(uf) 320.03 188 T
(fers will be used. F) 329.72 188 T
(or e) 421.2 188 T
(xample,) 439.34 188 T
3 F
-0.16 (vlDMP) 72 174 P
-0.16 (oolGetP) 108.42 174 P
-0.16 (arams\050\051) 149.63 174 P
0 F
-0.16 ( can be used to set a DMparams structure with parameters needed for the) 189.61 174 P
(video library) 72 160 T
(. In the remote case, if the recei) 132.88 160 T
(v) 283.52 160 T
(er is sending b) 289.34 160 T
(uf) 358.76 160 T
(fers to VL, it w) 368.46 160 T
(ould call) 442 160 T
3 F
-0.33 (vlDMP) 72 146 P
-0.33 (oolGetP) 108.42 146 P
-0.33 (arams\050\051) 149.63 146 P
0 F
-0.33 (, b) 189.61 146 P
-0.33 (ut in the local case, the sender must mak) 201.04 146 P
-0.33 (e this call and set up the b) 392.56 146 P
-0.33 (uf) 514.32 146 P
-0.33 (fer) 524.01 146 P
(pool appropriately) 72 132 T
(. All b) 159.54 132 T
(uf) 189.64 132 T
(fer pool requirements for the recei) 199.33 132 T
(v) 363.31 132 T
(er are pushed back onto the sender) 369.13 132 T
(so that the sender must kno) 72 118 T
(w ho) 202.69 118 T
(w the recei) 226.06 118 T
(v) 278.4 118 T
(er will use the DMb) 284.22 118 T
(uf) 379.97 118 T
(fers.) 389.66 118 T
3 F
(Examples) 72 99 T
0 F
(A simple program for sending DMb) 72 80 T
(uf) 244.74 80 T
(fers to a process on the same host) 254.44 80 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 21
%%Page: "8" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(8) 535 749.33 T
4 F
(#include <dmedia/dmnet.h>) 72 713.33 T
(#include <errno.h>) 72 701.33 T
(main \050int argc, char ** argv\051 {) 72 677.33 T
(  int i;) 72 653.33 T
(  int Nframes     = 10;) 72 641.33 T
(  int sizeInBytes = 10;) 72 629.33 T
(  int bufferCount = 5;) 72 617.33 T
(  int bufferSize  = 100;) 72 605.33 T
(  int port        = 9161;) 72 593.33 T
(  DMbufferpool    pool;) 72 569.33 T
(  DMnetconnection connection;) 72 557.33 T
(  DMparams *      plist;) 72 545.33 T
(  DMbuffer        buff;) 72 533.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 509.33 T
(    abort\050\051;) 72 497.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 485.33 T
(    abort\050\051;) 72 473.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 461.33 T
(      DM_FAILURE\051) 72 449.33 T
(    abort\050\051;) 72 437.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 425.33 T
(    abort\050\051;) 72 413.33 T
(  /* we don\325t need to specify the remote host in the local case. */) 72 389.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 365.33 T
(     dmNetListen. */) 72 353.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  /* now create the buffer pool */) 72 305.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 293.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 281.33 T
(    abort\050\051;) 72 269.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 257.33 T
(  /* in the local case, the pool params must be appropriate for how */) 72 245.33 T
(  /* the receiver will use the buffers too. */) 72 233.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 161.33 T
(    while \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 149.33 T
(      abort\050\051;) 72 137.33 T
(    /* put some data into buff here*/) 72 125.33 T
(    /* if necessary, set its size with ... */) 72 113.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 101.33 T
(    while \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 89.33 T
(       if \050errno != EBUSY\051 {) 72 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 22
%%Page: "9" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(9) 535 749.33 T
4 F
(      abort\050\051;) 90 713.33 T
(      }) 72 701.33 T
-0.6 (      /* in local case we get EBUSY if we send faster than receiver consumes. */) 72 689.33 P
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    dmBufferFree\050buff\051;) 72 653.33 T
(    sginap\0505\051;  /* give the receiver a chance to do something. */) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 605.33 T
(    abort\050\051;) 72 593.33 T
(}) 72 581.33 T
0 12 Q
(A simple program for recei) 72 551 T
(ving DMb) 202.33 551 T
(uf) 251.76 551 T
(fers from a process on the same host) 261.46 551 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 533.33 T
(#include <errno.h>) 72 521.33 T
(main \050int argc, char ** argv\051 {) 72 497.33 T
(  int i;) 72 473.33 T
(  int Nframes     = 10;) 72 461.33 T
(  int bufferCount = 5;) 72 449.33 T
(  int bufferSize  = 100;) 72 437.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 425.33 T
(  DMnetconnection connection;) 72 401.33 T
(  DMparams *      plist;) 72 389.33 T
(  DMbufferpool    pool;) 72 377.33 T
(  DMbuffer        buff;) 72 365.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 317.33 T
(    abort\050\051;) 72 305.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 293.33 T
(      DM_FAILURE\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 233.33 T
(    /* we should try a new port number if we get here. */) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 197.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 185.33 T
(    abort\050\051;) 72 173.33 T
(  /* receiver does not need a pool in the local case. */) 72 149.33 T
(  /* now loop to receive the buffers. */) 72 125.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 113.33 T
(    while \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 101.33 T
(      if \050errno != EBUSY\051 {) 72 89.33 T
(     abort\050\051;) 90 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 23
%%Page: "10" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(10) 530 749.33 T
4 F
(      }) 72 713.33 T
(      /* if we don\325t give the sender enough time to send we get */) 72 701.33 T
(      /* EBUSY in the local case. */) 72 689.33 T
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    /* use the data in buff here */) 72 653.33 T
(    dmBufferFree\050buff\051;) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(}) 72 593.33 T
1 12 Q
(UST and MSC v) 72 566 T
(alues) 160.44 566 T
0 F
(If the DMb) 72 547 T
(uf) 125.75 547 T
(fer to be sent contains a non-zero UST v) 135.44 547 T
(alue,) 329.1 547 T
3 F
(dmNetSend\050\051) 355.09 547 T
0 F
( will cooperate with) 423.08 547 T
3 F
-0.22 (dmNetRecv\050\051) 72 533 P
0 F
-0.22 ( to adjust the UST v) 139.97 533 P
-0.22 (alue. The attempt is to mak) 234.92 533 P
-0.22 (e the UST v) 364.37 533 P
-0.22 (alue at the recei) 421.08 533 P
-0.22 (ving end) 495.77 533 P
(of the netw) 72 519 T
(ork connection equi) 125.87 519 T
(v) 220.88 519 T
(alent to the UST v) 226.58 519 T
(alue that w) 314.28 519 T
(as set at the sending end. This is) 366.82 519 T
(accomplished by con) 72 505 T
(v) 172.84 505 T
(erting the sent UST to an equi) 178.66 505 T
(v) 322.34 505 T
(alent \322w) 328.04 505 T
(all clock\323 v) 368.24 505 T
(alue \050via) 423.26 505 T
3 F
(dmGetUSTCurr) 72 491 T
(entT) 156.44 491 T
(imeP) 180.23 491 T
(air\050\051) 206.1 491 T
0 F
(\051. This w) 228.76 491 T
(all clock v) 271.63 491 T
(alue is sent to the recei) 321.32 491 T
(ving end, which con-) 430.67 491 T
(v) 72 477 T
(erts it back to an equi) 77.82 477 T
(v) 180.5 477 T
(alent local UST v) 186.2 477 T
(alue. F) 270.23 477 T
(or this to be ef) 302.71 477 T
(fecti) 371.74 477 T
(v) 392.76 477 T
(e, the system clocks on the) 398.58 477 T
-0.07 (tw) 72 463 P
-0.07 (o machines must be synchronized by some e) 83.88 463 P
-0.07 (xternal mechanism, such as) 296.86 463 P
2 F
-0.07 (xntpd) 431.57 463 P
0 F
-0.07 (or) 461.17 463 P
2 F
-0.07 (timed) 474.1 463 P
0 F
-0.07 (. T) 500.76 463 P
-0.07 (o dis-) 513.07 463 P
-0.28 (able this con) 72 449 P
-0.28 (v) 131.62 449 P
-0.28 (ersion, or to mak) 137.44 449 P
-0.28 (e it clear to the recei) 217.8 449 P
-0.28 (ving end that the UST v) 313.73 449 P
-0.28 (alue is not to be trusted) 427.02 449 P
(\050perhaps because it is kno) 72 435 T
(wn that the system clocks are not synchronized\051, the sender can set the) 195.67 435 T
(UST v) 72 421 T
(alue in the DMb) 103.37 421 T
(uf) 181.45 421 T
(fer to zero, using) 191.15 421 T
3 F
(dmBufferSetUSTMSCpair\050\051) 275.46 421 T
0 F
(.) 420.78 421 T
(This con) 72 402 T
(v) 113.18 402 T
(ersion is not done when DMNET_CONNECTION_TYPE is DMNET_LOCAL.) 119 402 T
(If the DMb) 72 383 T
(uf) 125.75 383 T
(fer to be sent contains a non-zero MSC v) 135.44 383 T
(alue, DMnet preserv) 331.78 383 T
(es it. This is useful) 429.9 383 T
-0.2 (when relaying DMb) 72 369 P
-0.2 (uf) 168 369 P
-0.2 (fers that ha) 177.69 369 P
-0.2 (v) 230.36 369 P
-0.2 (e been \336lled by a de) 236.18 369 P
-0.2 (vice dri) 331.16 369 P
-0.2 (v) 366.98 369 P
-0.2 (er) 372.8 369 P
-0.2 (. When \336lling DMb) 381.46 369 P
-0.2 (uf) 475.28 369 P
-0.2 (fers from a) 484.97 369 P
-0.28 (disk \336le or memory) 72 355 P
-0.28 (, there may not be an associated MSC. If the sender lea) 164.7 355 P
-0.28 (v) 425.61 355 P
-0.28 (es the MSC \336eld zero,) 431.43 355 P
3 F
-0.28 (dmNetSend\050\051) 72 341 P
0 F
-0.28 ( will pro) 139.99 341 P
-0.28 (vide a monotonically increasing v) 179.92 341 P
-0.28 (alue. T) 341.15 341 P
-0.28 (o a) 373.23 341 P
-0.28 (v) 387.04 341 P
-0.28 (oid possible confusion, callers) 392.8 341 P
(should either) 72 327 T
3 F
(always) 137.33 327 T
0 F
( set the MSC v) 172 327 T
(alue or) 243.04 327 T
3 F
( ne) 276.02 327 T
(v) 290.84 327 T
(er) 296.72 327 T
0 F
( set one.) 307.38 327 T
1 F
(Ad) 72 299 T
(v) 87.82 299 T
(anced Examples) 94.25 299 T
3 F
(P) 72 280 T
(ort number management and connection start up) 79.09 280 T
0 F
-0.04 (There are tw) 72 261 P
-0.04 (o k) 132.44 261 P
-0.04 (e) 147.28 261 P
-0.04 (y issues to be concerned with when starting up a connection: the recei) 152.43 261 P
-0.04 (v) 486.93 261 P
-0.04 (er should) 492.75 261 P
-0.46 (call) 72 247 P
3 F
-0.46 (dmNetListen\050\051) 91.87 247 P
0 F
-0.46 ( before the sender calls) 166.52 247 P
3 F
-0.46 (dmNetConnect\050\051) 277.87 247 P
0 F
-0.46 (, and the sender and recei) 363.18 247 P
-0.46 (v) 482.56 247 P
-0.46 (er must be) 488.38 247 P
(prepared for) 72 233 T
3 F
(dmNetListen\050\051) 133.97 233 T
0 F
( to f) 208.62 233 T
(ail because the port is in use.) 227.83 233 T
(Normally the sender and recei) 72 214 T
(v) 216.32 214 T
(er use a bi-directional sock) 222.14 214 T
(et connection and an application spe-) 351.32 214 T
(ci\336c protocol to start up a session. This control connection can be used to send the port number) 72 200 T
(from the recei) 72 186 T
(v) 139.01 186 T
(er to the sender) 144.83 186 T
(, after the recei) 217.99 186 T
(v) 289.66 186 T
(er has successfully called) 295.48 186 T
3 F
(dmNetListen\050\051) 420.11 186 T
0 F
(. The) 494.76 186 T
(sender\325) 72 172 T
(s code is v) 106.66 172 T
(ery simple:) 156.8 172 T
4 10 Q
(/* receive a message from the receiver saying which port to send to. */) 72 154.33 T
(/* set dmNetPort to that port number. */) 72 142.33 T
(int dmNetPort = ...;) 72 130.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 72 118.33 T
(return FAIL;) 90 106.33 T
(}) 72 94.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 24
%%Page: "11" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(11) 530 749.33 T
4 F
(dmNetConnect\050connection, plist\051 == DM_FAILURE\051 {) 72 713.33 T
(return FAIL;) 90 701.33 T
(}) 72 689.33 T
0 12 Q
(The recei) 72 671 T
(v) 116.68 671 T
(er code follo) 122.5 671 T
(ws) 182.84 671 T
4 10 Q
(int i;) 72 653.33 T
(int dmNetPort = ...;) 72 641.33 T
(/* some initial port number */) 204 641.33 T
(for \050i = 0; i < 10; i++\051 {) 72 629.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 90 617.33 T
(return FAIL;) 108 605.33 T
(}) 90 593.33 T
(if \050dmNetListen\050connection, plist\051 == DM_SUCCESS\051 {) 90 581.33 T
(/* success, exit for loop and carry on. */) 108 569.33 T
(break;) 108 557.33 T
(}) 90 545.33 T
(if \050errno != EADDRINUSE\051 {) 90 533.33 T
(/* dmNetListen failed for some other reason */) 108 521.33 T
(return FAIL;) 108 509.33 T
(}) 90 497.33 T
(/* increment port and try again */) 90 485.33 T
(dmNetPort++;) 90 473.33 T
(}) 72 461.33 T
(if \050i >= 10\051 {) 72 449.33 T
(/* could not find a free port. */) 90 437.33 T
(return FAIL;) 90 425.33 T
(}) 72 413.33 T
(/* at this point, send dmNetPort to the sender. */) 72 401.33 T
(if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051 {) 72 389.33 T
(/* unexpected error in dmNetAccept\050\051. */) 90 377.33 T
(return FAIL;) 90 365.33 T
(}) 72 353.33 T
0 12 Q
(The recei) 72 335 T
(v) 116.68 335 T
(er starts from some initial port number) 122.5 335 T
(. It calls) 307.15 335 T
3 F
(dmNetListen\050\051) 348.48 335 T
0 F
( on each port number) 423.13 335 T
-0.3 (until it succeeds. Then it sends the port number to the sender and calls) 72 321 P
3 F
-0.3 (dmNetAccept\050\051) 407.38 321 P
0 F
-0.3 ( to w) 485.34 321 P
-0.3 (ait for) 508.61 321 P
(the sender to call) 72 307 T
3 F
(dmNetConnect\050\051) 156.65 307 T
0 F
(.) 241.96 307 T
3 F
(A) 72 269 T
(v) 79.46 269 T
(oiding Spinning on dmNetRecv\050\051) 85.34 269 T
0 F
(The simple e) 72 250 T
(xample abo) 133.81 250 T
(v) 189.29 250 T
(e loops on) 195.11 250 T
3 F
(dmNetRecv\050\051) 247.44 250 T
0 F
( with a small delay if) 315.41 250 T
3 F
(dmNetRecv\050\051) 419.4 250 T
0 F
( f) 487.37 250 T
(ails) 494.24 250 T
(because nothing is a) 72 236 T
(v) 168.74 236 T
(ailable. An alternati) 174.44 236 T
(v) 269.12 236 T
(e is to use) 274.94 236 T
3 F
(select\050\051) 325.61 236 T
0 F
( to ensure that there is data a) 361.58 236 T
(v) 498.31 236 T
(ailable) 504.01 236 T
(before calling) 72 222 T
3 F
(dmNetRecv\050\051) 141.31 222 T
0 F
(:) 209.28 222 T
4 10 Q
(fd_set readFDs;) 72 204.33 T
(struct timeval waitTime;) 72 180.33 T
(waitTime.tv_sec = 2;) 72 168.33 T
(waitTime.tv_usec = 0;) 72 156.33 T
(FD_ZERO\050&readFDs\051;) 72 132.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 120.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 108.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 96.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 84.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 25
%%Page: "12" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(12) 530 749.33 T
4 F
(}) 72 713.33 T
(while \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 689.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 677.33 T
(  abort\050\051;) 72 665.33 T
(}) 72 653.33 T
3 12 Q
(Ensuring ther) 72 623 T
(e is a fr) 143.46 623 T
(ee b) 180.9 623 T
(uffer in the pool) 200.99 623 T
0 F
(The recei) 72 604 T
(v) 116.68 604 T
(er program is responsible for ensuring that there is a free b) 122.5 604 T
(uf) 403.19 604 T
(fer in the b) 412.88 604 T
(uf) 464.96 604 T
(fer pool) 474.66 604 T
-0.06 (before calling) 72 590 P
3 F
-0.06 (dmNetRecv\050\051) 141.18 590 P
0 F
-0.06 (. It may not be practical to do this by counting b) 209.15 590 P
-0.06 (uf) 438.85 590 P
-0.06 (fer allocations and) 448.55 590 P
(frees because when a b) 72 576 T
(uf) 182.38 576 T
(fer is queued in for processing by the VLor dmIC, it may be some time) 192.07 576 T
(before it is freed. An alternati) 72 562 T
(v) 213.66 562 T
(e is to use) 219.48 562 T
3 F
(select\050\051) 270.14 562 T
0 F
( to delay until a b) 306.12 562 T
(uf) 389.54 562 T
(fer is free:) 399.24 562 T
4 10 Q
(fd_set readFDs;) 72 544.33 T
(fd_set writeFDs;) 72 532.33 T
(long long bytesAvailable;) 72 508.33 T
(int       buffersAvailable;) 72 496.33 T
(struct timeval waitTime;) 72 472.33 T
(waitTime.tv_sec = 2;) 72 460.33 T
(waitTime.tv_usec = 0;) 72 448.33 T
(/* wait for something to recv. */) 72 424.33 T
(FD_ZERO\050&readFDs\051;) 72 412.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 400.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 388.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 376.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 364.33 T
(}) 72 352.33 T
(if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 328.33 T
(    != DM_SUCCESS\051 {) 72 316.33 T
(   abort\050\051;) 72 304.33 T
(}) 72 292.33 T
(/* wait for a free buffer */) 72 268.33 T
(while \050buffersAvailable < 1\051 {) 72 256.33 T
(  FD_ZERO\050&writeFDs\051;) 72 244.33 T
(  FD_SET \050poolFD, &writeFDs\051;) 72 232.33 T
(  while \050select \050poolFD+1, NULL, &writeFDs, NULL, &waitTime\051 == 0\051 {) 72 220.33 T
(    if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 208.33 T
(  != DM_SUCCESS\051 {) 90 196.33 T
(      abort\050\051;) 72 184.33 T
(    }) 72 172.33 T
(    fprintf\050stderr, \322Select waiting 2 seconds for a free buffer.\134n\323\051;) 72 160.33 T
(    FD_SET \050poolFD, &writeFDs\051;) 72 148.33 T
(  }) 72 136.33 T
(  if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 124.33 T
(!= DM_SUCCESS\051 {) 90 112.33 T
(    abort\050\051;) 72 100.33 T
(  }) 72 88.33 T
(}) 72 76.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 26
%%Page: "13" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(13) 530 749.33 T
4 F
(if \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 701.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 689.33 T
(  abort\050\051;) 72 677.33 T
(}) 72 665.33 T
0 12 Q
(Note that this code can f) 72 635 T
(ail if there is another thread or a de) 188.86 635 T
(vice dri) 356.51 635 T
(v) 392.53 635 T
(er allocating from the same) 398.35 635 T
(pool. Also note that this code \336rst w) 72 621 T
(aits for input to become a) 245.88 621 T
(v) 367.96 621 T
(ailable, then it w) 373.66 621 T
(aits for a b) 453.53 621 T
(uf) 504.28 621 T
(fer) 513.97 621 T
(.) 526.63 621 T
-0.06 (This is to simplify generalizing to the multi-threaded case with multiple allocators. The goal is to) 72 607 P
-0.36 (minimize the delay between a b) 72 593 P
-0.36 (uf) 222.28 593 P
-0.36 (fer becoming a) 231.98 593 P
-0.36 (v) 303 593 P
-0.36 (ailable in the pool and using it. The data w) 308.7 593 P
-0.36 (aiting) 510.02 593 P
(in the netw) 72 579 T
(ork input queue will not go a) 125.21 579 T
(w) 263.69 579 T
(ay) 272.23 579 T
(, b) 282.78 579 T
(ut the free b) 294.54 579 T
(uf) 351.95 579 T
(fer in the b) 361.64 579 T
(uf) 413.72 579 T
(fer pool might be allo-) 423.42 579 T
(cated by the other thread.) 72 565 T
-0.06 (Note that the b) 72 546 P
-0.06 (uf) 142.56 546 P
-0.06 (fer pool\325) 152.25 546 P
-0.06 (s fd is sent to select as a write fd.  This is because) 193.18 546 P
3 F
-0.06 (dmNetRecv\050\051) 433.23 546 P
0 F
-0.06 ( will be) 501.2 546 P
(trying to get a DMb) 72 532 T
(uf) 167.09 532 T
(fer to write to.  \050A common mistak) 176.78 532 T
(e may be to use it as a read fd because) 343.98 532 T
(this code is trying to read.\051) 72 518 T
1 F
(Summar) 72 490 T
(y of Entr) 120.13 490 T
(y P) 168.92 490 T
(oints) 186.46 490 T
0 F
-0.37 (A) 72 471 P
3 F
-0.37 (DMnetconnection) 83.29 471 P
0 F
-0.37 ( is an opaque structure which maintains the state of both the control and data) 174.61 471 P
(connections. It is a pointer to the real structure the library allocates and maintains.) 72 457 T
(There are logically tw) 72 438 T
(o connections in a DMnetconnection, the \336rst for control \050e.g., setup, tear-) 177.52 438 T
(do) 72 424 T
(wn, management and synchronization\051, and the second for passing DMb) 83.7 424 T
(uf) 431.06 424 T
(fer content. Cur-) 440.76 424 T
(rently the control connection is al) 72 410 T
(w) 232.86 410 T
(ays a sock) 241.4 410 T
(et. The current implementation of dmNet supports) 290.6 410 T
(data connections which are either sock) 72 396 T
(ets \050for remote\051 or local \050using a DMS \336fo\051.) 257.5 396 T
4 10 Q
(DMnetconnection connection;) 72 378.33 T
3 12 Q
-0.25 (dmNetOpen\050\051) 72 360 P
0 F
-0.25 ( is the \336rst dmNet call one mak) 142.66 360 P
-0.25 (es. It allocates the internal connection struct and ini-) 291.08 360 P
(tializes it. Returns DM_SUCCESS on successful open, DM_F) 72 346 T
(AILURE otherwise.) 370.12 346 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 328.33 T
3 12 Q
(dmNetClose\050\051) 72 310 T
0 F
( is the last call to mak) 142.64 310 T
(e, it deallocates all the structures including an) 247.19 310 T
(y DMS \336fos) 466.31 310 T
(that might ha) 72 296 T
(v) 135.1 296 T
(e been created. Returns DM_SUCCESS.) 140.92 296 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 278.33 T
3 12 Q
(dmNetConnect\050\051) 72 260 T
0 F
( is the sender side call that sets up the control connection. It looks through the) 157.31 260 T
(DMparams ar) 72 246 T
(gument for a remote host name or remote address and opens a communications) 138.1 246 T
(sock) 72 232 T
(et to the speci\336ed destination. It calls) 93.88 232 T
3 F
(connect\050\051) 275.2 232 T
0 F
( and sets appropriate sock) 322.51 232 T
(et options. Then it) 446.36 232 T
-0.08 (creates whate) 72 218 P
-0.08 (v) 136.59 218 P
-0.08 (er form of communication channel has been speci\336ed for the data portion. Returns) 142.41 218 P
(DM_SUCCESS if connection made and) 72 204 T
3 F
(setsock) 267.66 204 T
(opt\050\051) 304.14 204 T
0 F
( calls succeed, DM_F) 328.8 204 T
(AILURE otherwise.) 431.89 204 T
(This call will block until the recei) 72 190 T
(v) 233.69 190 T
(er calls) 239.51 190 T
3 F
(dmNetAccept\050\051) 276.83 190 T
0 F
(.) 354.79 190 T
4 10 Q
(DMstatus dmNetConnect \050 DMnetconnection connection, DMparams* plist \051;) 72 172.33 T
3 12 Q
(dmNetListen\050\051) 72 154 T
0 F
(and) 149.65 154 T
3 F
( dmNetAccept\050\051) 166.98 154 T
0 F
( are the recei) 247.94 154 T
(v) 309.28 154 T
(er side calls that sets up the control and data) 315.1 154 T
(connections.) 72 140 T
3 F
(dmNetListen\050\051) 135.32 140 T
0 F
( should be called by the recei) 209.98 140 T
(v) 349.64 140 T
(er before the sender calls) 355.46 140 T
3 F
(dmNetConnect\050\051) 72 126 T
0 F
(. T) 157.31 126 T
(ypically) 169.68 126 T
(, the recei) 207.56 126 T
(v) 254.24 126 T
(er will tell the sender what port to use after calling) 260.06 126 T
3 F
(dmNetListen\050\051) 72 112 T
0 F
( b) 146.65 112 T
(ut before calling) 155.41 112 T
3 F
(dmNetAccept\050\051) 237.06 112 T
0 F
(.) 315.02 112 T
3 F
(dmNetAccept\050\051) 321.02 112 T
0 F
( will block until the sender) 398.99 112 T
(calls) 72 98 T
3 F
(dmNetConnect\050\051) 97 98 T
0 F
(.) 182.3 98 T
4 10 Q
(DMstatus dmNetListen \050 DMnetconnection connection , DMparams* plist \051;) 72 80.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 27
%%Page: "14" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(14) 530 749.33 T
4 F
(DMstatus dmNetAccept \050 DMnetconnection connection , DMparams* plist \051;) 72 713.33 T
3 12 Q
(dmNetRegisterP) 72 695 T
(ool\050\051) 156.4 695 T
0 F
( re) 179.72 695 T
(gisters a b) 191.87 695 T
(uf) 240.29 695 T
(fer pool on the connection. This is only needed on a recei) 249.98 695 T
(v-) 524.96 695 T
(ing side. DMb) 72 681 T
(uf) 140.76 681 T
(fers to hold incoming data will be allocated from this pool.) 150.46 681 T
4 10 Q
(int dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 663.33 T
3 12 Q
(dmNetGetP) 72 645 T
(arams\050\051) 132.53 645 T
0 F
( tak) 172.51 645 T
(es the speci\336ed parameter list and modi\336es and/or adds parameters v) 190.06 645 T
(al-) 519.7 645 T
-0.11 (ues as necessary for DMb) 72 631 P
-0.11 (uf) 195.28 631 P
-0.11 (ferpool creation and also adds the parameters which describe the data) 204.97 631 P
(connection.) 72 617 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection , DMparams* plist \051;) 72 599.33 T
3 12 Q
-0.05 (dmNetSend\050\051) 72 581 P
0 F
-0.05 ( sends the dmBuf) 139.99 581 P
-0.05 (fer o) 223.2 581 P
-0.05 (v) 245.29 581 P
-0.05 (er the data connection. Returns DM_SUCCESS on success,) 251.11 581 P
(DM_F) 72 567 T
(AILURE otherwise and errno is set to EB) 103.12 567 T
(USY if the \336fo o) 303.3 567 T
(v) 383.78 567 T
(er\337o) 389.6 567 T
(ws \050i.e., the block couldn\325) 411.3 567 T
(t) 536.06 567 T
(be enqueued because too man) 72 553 T
(y outstanding blocks in the queue\051. If the errno is 0, the underlying) 215.11 553 T
(connection w) 72 539 T
(as closed \050possibly because the recei) 136.2 539 T
(v) 311.52 539 T
(er died or closed the connection\051.) 317.34 539 T
4 10 Q
(DMstatus dmNetSend \050 DMnetconnection connection , DMbuffer buff\051;) 72 521.33 T
3 12 Q
(dmNetRecv\050\051) 72 503 T
0 F
( recei) 139.97 503 T
(v) 165.98 503 T
(es a DMb) 171.8 503 T
(uf) 218.22 503 T
(fer from the data connection. When called,) 227.92 503 T
3 F
(dmNetRecv\050\051) 436.19 503 T
0 F
( allo-) 504.15 503 T
(cates a DMb) 72 489 T
(uf) 132.41 489 T
(fer from the re) 142.1 489 T
(gistered pool, \336lls in the recei) 211.56 489 T
(v) 353.92 489 T
(ed data and metadata and returns it.) 359.74 489 T
(This is a non-blocking call and returns DM_F) 72 475 T
(AILURE with errno set to EB) 290.76 475 T
(USY if no data w) 434.29 475 T
(as) 518.16 475 T
(a) 72 461 T
(v) 77.09 461 T
(ailable. Applications can loop on this return v) 82.79 461 T
(alue or select on the fd \050use) 301.8 461 T
3 F
(dmNetDataFd\050\051) 436.76 461 T
0 F
( to) 518.08 461 T
(get the fd\051. If there are no free DMb) 72 447 T
(uf) 244.69 447 T
(fers in the b) 254.39 447 T
(uf) 311.14 447 T
(fer pool DM_F) 320.83 447 T
(AILURE will be returned and) 392.6 447 T
(errno will be set to ENOMEM. The application can simply delay until a b) 72 433 T
(uf) 425.72 433 T
(fer should ha) 435.42 433 T
(v) 497.83 433 T
(e been) 503.65 433 T
(freed and try ag) 72 419 T
(ain. If the size of the DMb) 147.58 419 T
(uf) 274.31 419 T
(fers in the b) 284 419 T
(uf) 340.75 419 T
(fer pool is set to small for the b) 350.45 419 T
(uf) 500.2 419 T
(fers) 509.89 419 T
(being recie) 72 405 T
(v) 124.68 405 T
(ed, DM_F) 130.5 405 T
(AILURE will be returned and errno will be set to ERANGE. If) 178.94 405 T
(DM_F) 72 391 T
(AILURE is returned and errno is 0, the underlying connection w) 103.12 391 T
(as closed \050possibly) 412.61 391 T
(because the sender died or closed the connection\051.) 72 377 T
4 10 Q
(DMstatus dmNetRecv \050 DMnetconnection, DMbuffer* \051;) 72 359.33 T
3 12 Q
(dmNetContr) 72 341 T
(olFd\050\051) 137.1 341 T
0 F
( returns the \336le descriptor used to select on the dmNet control connection.) 168.43 341 T
4 10 Q
(int dmNetControlFd \050 DMnetconnection \051;) 72 323.33 T
3 12 Q
(dmNetDataFd\050\051) 72 305 T
0 F
( returns the \336le descriptor for the data connection. If the data connection is a) 153.31 305 T
(sock) 72 291 T
(et, it just returns the sock) 93.88 291 T
(et, if it\325) 214.42 291 T
(s a \336fo, it returns its fd. This fd can be used to select on to get) 249.42 291 T
(noti\336cation of when DMb) 72 277 T
(uf) 196.75 277 T
(fers arri) 206.45 277 T
(v) 243.79 277 T
(e.) 249.61 277 T
4 10 Q
(int dmNetDataFd \050 DMnetconnection \051;) 72 259.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 28
%%Page: "1" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(1) 535 749.33 T
1 14 Q
(Digital Media Netw) 194.9 710.67 T
(orking - dmNet) 318.31 710.67 T
2 12 Q
-0.01 (Note: This is a dr) 126 691 P
-0.01 (aft pr) 209.79 691 P
-0.01 (o) 235.59 691 P
-0.01 (gr) 241.46 691 P
-0.01 (ammer\325) 251.95 691 P
-0.01 (s guide for dmNet. It is intended to be in the style of) 288.79 691 P
(a c) 126 677 T
(hapter for the Insight book \324) 140.15 677 T
(\324IRIS Digitial Media P) 274.48 677 T
(or) 383.17 677 T
(gr) 393.4 677 T
(amming Guide\325) 403.88 677 T
(\325. I have put) 477.54 677 T
-0.14 (little ef) 126 663 P
-0.14 (fort into formating as this document will have to be r) 159.31 663 P
-0.14 (eformated with the of) 411.45 663 P
-0.14 (\336cial) 513.14 663 P
(Insight formats.) 126 649 T
(The c) 126 629 T
(hapter \324) 152.15 629 T
(\324Digital Media Buf) 189.14 629 T
(fer) 280.26 629 T
(s\325) 293.47 629 T
(\325 will need some c) 300.8 629 T
(hang) 387.28 629 T
(es to add dmNet to the list) 411.16 629 T
(of things that can work with DMb) 126 615 T
(uf) 287.77 615 T
(fer) 296.89 615 T
(s.) 310.1 615 T
(Something mor) 126 595 T
(e should be said about the handling of UST/MSC.) 198.55 595 T
0 F
-0.34 (dmNet implements the deli) 72 575 P
-0.34 (v) 201.01 575 P
-0.34 (ery of digital media b) 206.83 575 P
-0.34 (uf) 308.56 575 P
-0.34 (fers o) 318.25 575 P
-0.34 (v) 344.72 575 P
-0.34 (er netw) 350.54 575 P
-0.34 (orks. The central goal of dmNet) 385.73 575 P
(is simple: to allo) 72 561 T
(w media programmers to w) 151.38 561 T
(orry about the details of manipulating media instead) 283.24 561 T
(of managing the netw) 72 547 T
(ork. The API is the same re) 176.2 547 T
(g) 307.66 547 T
(ardless of the underlying netw) 313.6 547 T
(ork - from a 10) 458.78 547 T
(me) 72 533 T
(g) 86.48 533 T
(abit/second Ethernet to striped HIPPI channels transmitting hundreds of me) 92.42 533 T
(g) 455.21 533 T
(abytes/second.) 461.15 533 T
-0.01 (dmNet hides the details and encapsulates tuning ef) 72 519 P
-0.01 (forts to pro) 314.6 519 P
-0.01 (vide the most ef) 367.73 519 P
-0.01 (\336cient data transfer) 444.39 519 P
(possible. dmNet also allo) 72 505 T
(ws ef) 193.03 505 T
(\336cient transfer of DMb) 218.39 505 T
(uf) 329.12 505 T
(fers among processes on the same host.) 338.82 505 T
1 F
(About dmNet) 72 477 T
0 F
(DMb) 72 458 T
(uf) 97.09 458 T
(fers and DMb) 106.79 458 T
(uf) 173.2 458 T
(ferpools allo) 182.89 458 T
(w applications to allocate and use general-purpose system) 242.92 458 T
(memory for transporting media data within an application. A DMb) 72 444 T
(uf) 392.39 444 T
(ferpool is a custom storage) 402.08 444 T
(f) 72 430 T
(acility created by the application. V) 75.88 430 T
(ideo I/O de) 246.46 430 T
(vices, compression de) 300.14 430 T
(vices and algorithms and) 405.49 430 T
-0.32 (graphics de) 72 416 P
-0.32 (vices ha) 126.36 416 P
-0.32 (v) 164.79 416 P
-0.32 (e direct access to this storage on a compartmental basis; each compartment is) 170.61 416 P
(referred to by a DMb) 72 402 T
(uf) 173.72 402 T
(fer) 183.42 402 T
(. An application can de\336ne what this compartment represents, b) 196.08 402 T
(ut in) 501.46 402 T
(general a DMb) 72 388 T
(uf) 143.74 388 T
(fer represents a single image \050e.g., one frame or \336eld of video\051.) 153.43 388 T
(W) 72 369 T
(ithin an application, the contents of a DMb) 82.85 369 T
(uf) 288.59 369 T
(fer are transferred by communicating only a refer-) 298.28 369 T
(ence to the storage location rather than mo) 72 355 T
(ving the actual contents. DMb) 276.11 355 T
(uf) 420.85 355 T
(fers are, essentially) 430.55 355 T
(,) 522.07 355 T
(placeholders which contain pointers to the data; the data bytes are stored else) 72 341 T
(where, in specially) 441.62 341 T
(reserv) 72 327 T
(ed system memory) 101.14 327 T
(. This memory is reserv) 191.02 327 T
(ed at application start-up and guaranteed for the) 304.49 327 T
(life of the application, and is not visited by the page daemon and will not be sw) 72 313 T
(apped out.) 452.84 313 T
(The dmNet API e) 72 294 T
(xtends the functionality of DMb) 156.8 294 T
(uf) 311.22 294 T
(fers, by pro) 320.92 294 T
(viding a lo) 375.72 294 T
(w-ef) 426.76 294 T
(fort, lo) 448.44 294 T
(w-intrusion) 480.8 294 T
(e) 72 280 T
(xtension of the e) 77.15 280 T
(xisting DMb) 156.62 280 T
(uf) 217.39 280 T
(fer API that allo) 227.09 280 T
(ws the application programmer to mo) 304.44 280 T
(v) 484.57 280 T
(e) 490.39 280 T
(DMb) 72 266 T
(uf) 97.09 266 T
(fers across a netw) 106.79 266 T
(ork. It adds four basic calls:) 192.3 266 T
3 F
(dmNetConnect\050\051) 328.61 266 T
0 F
(,) 413.92 266 T
3 F
(dmNetAccept\050\051) 419.92 266 T
0 F
(,) 497.88 266 T
3 F
(dmNetSend\050\051) 72 252 T
0 F
( and) 139.99 252 T
3 F
(dmNetRecv\050\051) 163.32 252 T
0 F
(, which encapsulate the details of sending data on a netw) 231.29 252 T
(ork.) 503.45 252 T
-0.31 (Except for the initialization parameters, the calls are e) 72 238 P
-0.31 (xactly the same, re) 328.26 238 P
-0.31 (g) 417.12 238 P
-0.31 (ardless of netw) 423.06 238 P
-0.31 (ork type.) 494.96 238 P
(This allo) 72 224 T
(ws the application programmer to think about mo) 114.04 224 T
(ving DMb) 351.5 224 T
(uf) 400.93 224 T
(fers, not about the details) 410.63 224 T
(of what are in them.) 72 210 T
(K) 72 191 T
(e) 80.36 191 T
(y features of dmNet include:) 85.51 191 T
(\245) 72 172 T
(dmNet hides man) 90 172 T
(y details of the netw) 174.48 172 T
(ork) 271.68 172 T
(\245) 72 152 T
(the dmNet API is independent of the netw) 90 152 T
(ork) 292.19 152 T
(\245) 72 132 T
-0.3 (on most current netw) 90 132 P
-0.3 (orks, dmNet is no slo) 190.64 132 P
-0.3 (wer than the f) 291.5 132 P
-0.3 (astest alternati) 356.8 132 P
-0.3 (v) 425.19 132 P
-0.3 (e, and can be f) 431.01 132 P
-0.3 (aster) 499.34 132 P
(\245) 72 112 T
(dmNet preserv) 90 112 T
(es all meta-data associated with a DMb) 160.8 112 T
(uf) 349.19 112 T
(fer \050e.g., user data, VITC\051) 358.88 112 T
(\245) 72 92 T
3.53 (dmNet modi\336es the UST on recei) 90 92 P
3.53 (v) 269.01 92 P
3.53 (ed DMb) 274.83 92 P
3.53 (uf) 317.78 92 P
3.53 (fers so that the UST of the recei) 327.47 92 P
3.53 (v) 504.85 92 P
3.53 (ed) 510.67 92 P
(DMb) 90 78 T
(uf) 115.09 78 T
(fers re\337ects the correct time relati) 124.79 78 T
(v) 286.1 78 T
(e to the recei) 291.92 78 T
(v) 353.27 78 T
(er\325) 359.09 78 T
(s clock, not the sender\325) 371.75 78 T
(s clock.) 482.06 78 T
FMENDPAGE
%%EndPage: "1" 29
%%Page: "2" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(2) 535 749.33 T
0 12 Q
(\245) 72 712 T
(the dmNet API is consistent with other APIs for processing DMb) 90 712 T
(uf) 403.07 712 T
(fers \050e.g., dmIC\051) 412.76 712 T
(\245) 72 692 T
(dmNet can be used to ef) 90 692 T
(\336ciently mo) 206 692 T
(v) 263.5 692 T
(e a DMb) 269.32 692 T
(uf) 311.06 692 T
(fer between processes on the same host) 320.76 692 T
1 F
(Using dmNet) 72 664 T
0 F
(A dmNet connection supports the uni-directional \337o) 72 645 T
(w of DMb) 322.34 645 T
(uf) 372.1 645 T
(fers from the sender to the) 381.79 645 T
(recei) 72 631 T
(v) 95.02 631 T
(er) 100.84 631 T
(. Bi-directional \337o) 109.5 631 T
(w requires tw) 197.53 631 T
(o independent connections. Both the sender and the) 262.73 631 T
-0.46 (recei) 72 617 P
-0.46 (v) 95.02 617 P
-0.46 (er must \336rst create a connection instance with) 100.84 617 P
3 F
-0.46 (dmNetOpen\050\051) 319.78 617 P
0 F
-0.46 (. Then the connections must be) 390.44 617 P
(initialized by setting DMb) 72 603 T
(uf) 198.1 603 T
(fer and netw) 207.79 603 T
(ork parameters. This is discussed in detail belo) 267.65 603 T
(w) 491.99 603 T
(. When) 499.87 603 T
(the connections are initialized, the recei) 72 589 T
(v) 262.32 589 T
(er calls) 268.14 589 T
3 F
(dmNetListen\050\051) 305.46 589 T
0 F
( to initialize the connection and) 380.11 589 T
(calls) 72 575 T
3 F
(dmNetAccept\050\051) 97 575 T
0 F
( to w) 174.96 575 T
(ait for the sender to call) 198.84 575 T
3 F
(dmNetConnect\050\051) 315.48 575 T
0 F
(. Usually) 400.79 575 T
(, the recei) 443.34 575 T
(v) 490.02 575 T
(er will) 495.84 575 T
-0.23 (use a separate, application speci\336c control connection to tell the recei) 72 561 P
-0.23 (v) 402.28 561 P
-0.23 (er which IP port to connect) 408.1 561 P
(to. This message is usually sent after) 72 547 T
3 F
(dmNetListen\050\051) 251.32 547 T
0 F
( returns b) 325.97 547 T
(ut before calling) 371.05 547 T
3 F
(dmNetAccept\050\051) 452.7 547 T
0 F
(.) 530.66 547 T
(Once the connection is established, the sender calls) 72 533 T
3 F
(dmNetSend\050\051) 320.95 533 T
0 F
( to send a b) 388.94 533 T
(uf) 443.36 533 T
(fer and the) 453.06 533 T
(recei) 72 519 T
(v) 95.02 519 T
(er calls) 100.84 519 T
3 F
(dmNetRecv\050\051) 138.16 519 T
0 F
( to recei) 206.12 519 T
(v) 244.48 519 T
(e a DMb) 250.3 519 T
(uf) 292.04 519 T
(fer) 301.74 519 T
(. When the sender and recei) 314.4 519 T
(v) 447.38 519 T
(er are done, the) 453.2 519 T
(y) 526.99 519 T
(each call) 72 505 T
3 F
(dmNetClose\050\051) 117.31 505 T
0 F
( to close the connection. \050A simple application need not ha) 187.96 505 T
(v) 469.34 505 T
(e an applica-) 475.16 505 T
-0.14 (tion speci\336c protocol for start up. The sending and reci) 72 491 P
-0.14 (ving side could simply use an agreed upon) 333.77 491 P
(port number) 72 477 T
(.\051) 130.33 477 T
-0.47 (The information required for initialization v) 72 458 P
-0.47 (aries slightly for the sender and recei) 280.3 458 P
-0.47 (v) 454.43 458 P
-0.47 (er) 460.25 458 P
-0.47 (. The sender is) 468.92 458 P
(only concerned with netw) 72 444 T
(ork parameters. There are three parameters that must be set) 196.19 444 T
(\245) 72 425 T
1.24 (the connection type -- either local, to e) 90 425 P
1.24 (xchange DMb) 283.81 425 P
1.24 (uf) 353.13 425 P
1.24 (fers with another process on the) 362.82 425 P
(same machines, or TCP) 90 411 T
(. \050Other connection types may be added in the future.\051) 202.66 411 T
(\245) 72 391 T
(an IP port number) 90 391 T
(\245) 72 371 T
(the name of the recei) 90 371 T
(v) 190.33 371 T
(er \050or sock) 196.15 371 T
(et address\051) 247.34 371 T
(The recei) 72 351 T
(v) 116.68 351 T
(er must specify the connection type and the port number) 122.5 351 T
(. Both must agree with the) 392.12 351 T
(sending side. In addition, the recei) 72 337 T
(v) 236.68 337 T
(er must create a b) 242.5 337 T
(uf) 326.89 337 T
(fer pool from which DMb) 336.59 337 T
(uf) 460.99 337 T
(fers will be) 470.69 337 T
-0.41 (allocated to hold the recei) 72 323 P
-0.41 (v) 194.02 323 P
-0.41 (ed data. Buf) 199.84 323 P
-0.41 (fer pool def) 257.04 323 P
-0.41 (aults for creating this pool can be obtained with) 312.07 323 P
(the) 72 309 T
3 F
(dmNetGetP) 89.66 309 T
(arams\050\051) 150.19 309 T
0 F
( call. The pool must be re) 190.18 309 T
(gistered with the) 312.31 309 T
3 F
(dmNetRegisterP) 395.3 309 T
(ool\050\051) 479.7 309 T
0 F
( call.) 503.03 309 T
3 F
-0.25 (dmNetRegisterP) 72 295 P
-0.25 (ool\050\051) 156.4 295 P
0 F
-0.25 ( is normally called after) 179.72 295 P
3 F
-0.25 (dmNetAccept\050\051) 295.43 295 P
0 F
-0.25 ( and must be called before the \336rst) 373.39 295 P
(call to) 72 281 T
3 F
(dmNetRecv\050\051) 104.66 281 T
0 F
(.) 172.63 281 T
1 F
(Sending Data With dmNet) 72 253 T
0 F
(The dmNet and digital media entry points used by the sending side are presented belo) 72 234 T
(w) 482.98 234 T
(, in the) 490.86 234 T
(order in which the) 72 220 T
(y should be called.) 159.47 220 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 202.33 T
0 12 Q
(dmNetOpen creates and initializes the DMnetconnection structure.) 72 184 T
-0.26 (T) 72 165 P
-0.26 (o set the netw) 78.37 165 P
-0.26 (ork parameters for the ne) 143.79 165 P
-0.26 (w connection, a DMparams structure must be created and) 263.08 165 P
(\336lled in. The structure is created with) 72 151 T
4 10 Q
(DMstatus dmParamsCreate \050DMparams** params \051;) 72 133.33 T
0 12 Q
(The connection type and port can be set with the dmP) 72 115 T
(aramsSetInt call) 329.78 115 T
4 10 Q
(DMstatus dmParamsSetInt \050DMparams* params, const char* paramName, int value \051;) 72 97.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 30
%%Page: "3" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(3) 535 749.33 T
0 12 Q
(The constants DMNET_CONNECTION_TYPE and DMNET_POR) 72 712 T
(T can be used for the) 398.58 712 T
-0.22 (paramName. The v) 72 698 P
-0.22 (alue for the connection type should be either DMNET_TCP for a netw) 163.55 698 P
-0.22 (ork con-) 499.9 698 P
-0.02 (nection, or DMNET_LOCAL for a connection to another process on the same machine. The port) 72 684 P
(number is a 16 bit, unsigned int. V) 72 670 T
(alues from 0 to 1023 are reserv) 237 670 T
(ed. Applications are free to use) 386.11 670 T
(port numbers from 1024 to 65535 inclusi) 72 656 T
(v) 269.03 656 T
(e.) 274.85 656 T
-0.35 (There are tw) 72 637 P
-0.35 (o w) 131.81 637 P
-0.35 (ays to identify the remote machine to connect to: the machine can be identi\336ed by) 149 637 P
(name or by a sock) 72 623 T
(et address.) 159.19 623 T
(A name can be supplied as a character string using) 72 604 T
4 10 Q
(DMstatus dmParamsSetString \050 DMparams* params, const char* paramName, const) 72 586.33 T
(char* value \051;) 72 574.33 T
0 12 Q
(In this case, use the constant DMNET_REMO) 72 556 T
(TE_HOSTN) 294.49 556 T
(AME as the paramName.) 354.73 556 T
(A sock) 72 537 T
(et address can be supplied with) 105.54 537 T
3 F
(dmP) 258.18 537 T
(aramsSetInt\050\051) 282.06 537 T
0 F
( using the constant) 353.38 537 T
(DMNET_REMO) 72 523 T
(TE_SOCKADDR for the paramName. In this case, the v) 154.85 523 T
(alue will lik) 427.16 523 T
(ely be the) 484.38 523 T
(v) 72 509 T
(alue of the sin_addr) 77.7 509 T
(.s_addr \336eld of an instance of the sockaddr_in structure.) 172.02 509 T
-0.14 (When these parameters are set in the DMparams structure, the sender opens the connection to the) 72 490 P
(recei) 72 476 T
(v) 95.02 476 T
(er with) 100.84 476 T
4 10 Q
(DMstatus dmNetConnect \050DMnetconnection connection, DMparams * params \051;) 72 458.33 T
0 12 Q
-0.46 (Before the sender calls) 72 440 P
3 F
-0.46 (dmNetConnect\050\051) 182.79 440 P
0 F
-0.46 (the sender and recie) 270.63 440 P
-0.46 (v) 364.58 440 P
-0.46 (er must agree on a port number and) 370.4 440 P
(the recei) 72 426 T
(v) 112.68 426 T
(er must ha) 118.5 426 T
(v) 168.25 426 T
(e called) 174.07 426 T
3 F
(dmNetListen\050\051) 214.06 426 T
0 F
(.) 288.71 426 T
(After a successful return from) 72 407 T
3 F
(dmNetConnect\050\051) 218.95 407 T
0 F
(, the sender is free to send b) 304.26 407 T
(uf) 437.99 407 T
(fers with) 447.68 407 T
4 10 Q
(DMstatus dmNetSend \050DMnetconnection connection, DMbuffer buff \051;) 72 389.33 T
0 12 Q
(dmNetSend will attach to the b) 72 371 T
(uf) 220.75 371 T
(fer with) 230.45 371 T
3 F
(dmBufferAttach\050\051) 271.1 371 T
0 F
( and free the b) 363.74 371 T
(uf) 432.14 371 T
(fer with) 441.84 371 T
3 F
(dmBufferFr) 72 357 T
(ee\050\051) 134.44 357 T
0 F
( when it is done. The sending program may call) 153.08 357 T
3 F
(dmBufferFr) 384.72 357 T
(ee\050\051) 447.16 357 T
0 F
( on the sent) 465.8 357 T
(b) 72 343 T
(uf) 77.76 343 T
(fer immediately) 87.46 343 T
(, b) 163 343 T
(ut this does not mean the b) 174.76 343 T
(uf) 303.18 343 T
(fer will be returned the to pool -- dmNet may) 312.88 343 T
(not ha) 72 329 T
(v) 101.42 329 T
(e freed the b) 107.24 329 T
(uf) 166.64 329 T
(fer) 176.34 329 T
(. This call may block or may f) 189 329 T
(ail and set errno to EB) 333.53 329 T
(USY) 441.06 329 T
(, if the netw) 463.51 329 T
(ork) 520.72 329 T
(send queue is full. The application should check for the latter case and retry the send after a suit-) 72 315 T
(able delay) 72 301 T
(.) 120.2 301 T
(The sending program should be careful to ensure that the size has been set in the DMb) 72 282 T
(uf) 486.35 282 T
(fer) 496.04 282 T
(. The) 508.7 282 T
(video library) 72 268 T
(, VL, is careful to do this for captured video, b) 132.88 268 T
(ut if the b) 355.6 268 T
(uf) 401.69 268 T
(fers are being \336lled with) 411.38 268 T
(material coming from other sources, such as disk, the programmer may ha) 72 254 T
(v) 428.03 254 T
(e to set the size with) 433.85 254 T
4 10 Q
(DMstatus dmBufferSetSize \050 DMbuffer buff, int size \051;) 72 236.33 T
0 12 Q
(The size is in bytes.) 72 218 T
-0.26 (The sending program can also use the user data area of the DMb) 72 199 P
-0.26 (uf) 377.9 199 P
-0.26 (fer to carry information such as) 387.6 199 P
(frame number and \336eld information. The user data can be set with) 72 185 T
4 10 Q
(DMstatus dmBufferSetUserData \050 DMbuffer buffer, const u_char *data,) 72 167.33 T
( int size  \051;) 234 155.33 T
0 12 Q
(When the sender is \336nished sending, it should close the connection with) 72 137 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 119.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 31
%%Page: "4" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(4) 535 749.33 T
1 12 Q
(Receiving Data with dmNet) 72 712 T
0 F
(The recei) 72 693 T
(v) 116.68 693 T
(er must open a connection and set the parameter v) 122.5 693 T
(alues just lik) 362.47 693 T
(e the sender) 423.02 693 T
(, e) 479.86 693 T
(xcept it) 491 693 T
(does not ha) 72 679 T
(v) 126.42 679 T
(e to supply either a DMNET_REMO) 132.24 679 T
(TE_HOSTN) 309.41 679 T
(AME or a) 369.65 679 T
(DMNET_REMO) 72 665 T
(TE_SOCKADDR. Also, the recei) 154.85 665 T
(v) 316.86 665 T
(er does not call) 322.68 665 T
3 F
(dmNetConnect\050\051) 398.66 665 T
0 F
(. Instead it) 483.97 665 T
(calls) 72 651 T
3 F
(dmNetListen\050\051) 97 651 T
0 F
( and) 171.65 651 T
3 F
(dmNetAccept\050\051) 194.98 651 T
0 F
(.) 272.94 651 T
4 10 Q
(DMstatus dmNetListen \050DMnetconnection connection, DMparams * params \051;) 72 633.33 T
0 12 Q
-0.22 (This must be called before the sender calls) 72 615 P
3 F
-0.22 (dmNetConnect\050\051) 277.51 615 P
0 F
-0.22 (. This call can f) 362.82 615 P
-0.22 (ail if the port number) 436.12 615 P
(supplied in the params is already in use. In this case the port number in the params should be) 72 601 T
-0.09 (changed, and the call to) 72 587 P
3 F
-0.09 (dmNetListen\050\051) 188.17 587 P
0 F
-0.09 ( retried. When) 262.82 587 P
3 F
-0.09 (dmNetListen\050\051) 334.52 587 P
0 F
-0.09 ( succeeds, the port number) 409.17 587 P
(should be transmitted to the sender so that it kno) 72 573 T
(ws which port number to connect to.) 304.69 573 T
(After) 72 554 T
3 F
(dmNetListen\050\051) 100.32 554 T
0 F
( succeeds call) 174.97 554 T
4 10 Q
(DMstatus dmNetAccept \050DMnetconnection connection \051;) 72 536.33 T
0 12 Q
-0.38 (After the) 72 518 P
3 F
-0.38 (dmNetAccept\050\051) 117.23 518 P
0 F
-0.38 ( call returns, the recei) 195.19 518 P
-0.38 (v) 297.01 518 P
-0.38 (er must re) 302.83 518 P
-0.38 (gister a b) 349.88 518 P
-0.38 (uf) 392.88 518 P
-0.38 (fer pool with dmNet. dmNet) 402.57 518 P
(will allocate b) 72 504 T
(uf) 139.75 504 T
(fers from this pool for the recei) 149.45 504 T
(v) 299.11 504 T
(ed b) 304.93 504 T
(uf) 325.02 504 T
(fers. The b) 334.72 504 T
(uf) 386.12 504 T
(fer pool must be created with) 395.82 504 T
(parameters consistent with dmNet\325) 72 490 T
(s requirements. The call) 238.98 490 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection, DMparams params \051;) 72 472.33 T
0 12 Q
(can be used to modify the b) 72 454 T
(uf) 204.41 454 T
(fer pool creation parameters in params as necessary) 214.1 454 T
(. \050The pool cre-) 460.91 454 T
(ation process in) 72 440 T
(v) 146.84 440 T
(olv) 152.6 440 T
(es se) 167.76 440 T
(v) 190.45 440 T
(eral steps that are best understood from the sample code belo) 196.27 440 T
(w) 488.58 440 T
(.\051) 496.46 440 T
(After the pool is created, it must be re) 72 421 T
(gistered with the dmNet connection) 253.45 421 T
4 10 Q
(DMstatus dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 403.33 T
0 12 Q
(This tells the connection to allocate a b) 72 385 T
(uf) 259.4 385 T
(fer from pool for each b) 269.1 385 T
(uf) 383.82 385 T
(fer recei) 393.52 385 T
(v) 432.85 385 T
(ed with) 438.67 385 T
3 F
(dmNetRecv\050\051) 72 371 T
0 F
(.) 139.97 371 T
3 F
(dmNetRegisterP) 145.97 371 T
(ool\050\051) 230.36 371 T
0 F
( can be called ag) 253.69 371 T
(ain to change the pool, say) 333.6 371 T
(, to switch to a) 460.8 371 T
(lar) 72 357 T
(ger pool. The \336rst pool can then be freed with) 84.44 357 T
3 F
(dmBufferDestr) 307.4 357 T
(oyP) 385.16 357 T
(ool\050\051) 404.26 357 T
0 F
(.) 427.58 357 T
(The recei) 72 338 T
(v) 116.68 338 T
(er recei) 122.5 338 T
(v) 157.84 338 T
(es b) 163.66 338 T
(uf) 182.41 338 T
(fers with) 192.11 338 T
4 10 Q
(int dmNetRecv \050 DMnetconnection connection, DMbuffer * buff \051;) 72 320.33 T
0 12 Q
-0.37 (This call does not block. The recei) 72 302 P
-0.37 (v) 235.13 302 P
-0.37 (er program has tw) 240.95 302 P
-0.37 (o choices. It could use) 326.7 302 P
3 F
-0.37 (select\050\051) 434.84 302 P
0 F
-0.37 ( to ensure that) 470.82 302 P
(there is a b) 72 288 T
(uf) 124.08 288 T
(fer w) 133.78 288 T
(aiting in the netw) 158.64 288 T
(ork\325) 242.18 288 T
(s input queue \050see the Adv) 261.52 288 T
(anced Examples belo) 388.86 288 T
(w\051. The) 490.54 288 T
(alternati) 72 274 T
(v) 111.02 274 T
(e is to check the return v) 116.84 274 T
(alue. If it is DM_SUCCESS then a b) 234.52 274 T
(uf) 410.28 274 T
(fer w) 419.98 274 T
(as recei) 444.84 274 T
(v) 480.85 274 T
(ed. If the) 486.67 274 T
(return v) 72 260 T
(alue is DM_F) 109.36 260 T
(AILURE, then the v) 174.47 260 T
(alue of errno must be check) 271.49 260 T
(ed. A v) 404.33 260 T
(alue of EB) 439.02 260 T
(USY) 490.22 260 T
(implies that there w) 72 246 T
(as no data a) 166.87 246 T
(v) 222.95 246 T
(ailable and) 228.65 246 T
3 F
(dmNetRecv\050\051) 283.97 246 T
0 F
( should be called ag) 351.94 246 T
(ain after a suitable) 447.19 246 T
(delay) 72 232 T
(. If errno is 0 then the connection has been closed \050the sender could ha) 97.21 232 T
(v) 434.56 232 T
(e died or closed the) 440.38 232 T
(connection\051.) 72 218 T
3 F
(dmNetRecv\050\051) 72 199 T
0 F
( can f) 139.97 199 T
(ail if it is unable to allocate a DMb) 166.5 199 T
(uf) 333.58 199 T
(fer to recei) 343.27 199 T
(v) 394.94 199 T
(e the data into. The applica-) 400.76 199 T
-0.12 (tion is responsible for ensuring that there is a free b) 72 185 P
-0.12 (uf) 317.2 185 P
-0.12 (fer in the pool before calling) 326.89 185 P
3 F
-0.12 (dmNetRecv\050\051) 466.15 185 P
0 F
-0.12 (.) 534.12 185 P
-0.4 (It could do this by k) 72 171 P
-0.4 (eeping careful count of allocated b) 166.22 171 P
-0.4 (uf) 330.27 171 P
-0.4 (fers, b) 339.97 171 P
-0.4 (ut this can be dif) 369.32 171 P
-0.4 (\336cult if DMb) 447.42 171 P
-0.4 (uf) 509.71 171 P
-0.4 (fers) 519.41 171 P
-0.13 (are sent to VL or other libraries that hold the b) 72 157 P
-0.13 (uf) 293.73 157 P
-0.13 (fers in queues until processing is completed. The) 303.42 157 P
-0.11 (alternati) 72 143 P
-0.11 (v) 111.02 143 P
-0.11 (e is to delay until there is a free b) 116.84 143 P
-0.11 (uf) 275.25 143 P
-0.11 (fer in the b) 284.95 143 P
-0.11 (uf) 336.7 143 P
-0.11 (fer pool. Code to do this is sho) 346.4 143 P
-0.11 (wn in the) 492.67 143 P
(Adv) 72 129 T
(anced Examples belo) 92.36 129 T
(w) 194.04 129 T
(.) 201.92 129 T
(When the recei) 72 110 T
(v) 144.34 110 T
(er program is \336nished recei) 150.16 110 T
(ving it should call) 281.16 110 T
3 F
(dmNetClose\050\051) 370.5 110 T
0 F
(.) 441.14 110 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 32
%%Page: "5" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(5) 535 749.33 T
0 12 Q
(If the b) 72 712 T
(uf) 106.42 712 T
(fer pool that is re) 116.11 712 T
(gistered on the recie) 197.92 712 T
(ving side supports v) 294.59 712 T
(ariable size DMb) 390.62 712 T
(uf) 473.03 712 T
(fers \050e.g.,) 482.72 712 T
4 10 Q
(dmParamsSetEnum\050plist, DM_POOL_VARIABLE, DM_TRUE\051;) 72 698 T
0 12 Q
(\051, then dmNet will allocate b) 372 698 T
(uf) 509.08 698 T
(fers) 518.77 698 T
(big enough for the incoming data, rounded up to the ne) 72 684 T
(xt con) 336.12 684 T
(v) 365.3 684 T
(enient size. This means that audio) 371.12 684 T
(data \050probably a fe) 72 670 T
(w k bytes per DMb) 162 670 T
(uf) 254.41 670 T
(fer\051 and video data \050probably 100\325) 264.11 670 T
(s of k bytes per) 428.4 670 T
(DMb) 72 656 T
(uf) 97.09 656 T
(fer\051 can be mix) 106.79 656 T
(ed on the same dmNet connection and the use of the b) 179.58 656 T
(uf) 438.96 656 T
(fer pool memory) 448.66 656 T
(will be ef) 72 642 T
(\336cient.) 117.02 642 T
1 F
(Examples) 72 614 T
0 F
(A simple program for sending DMb) 72 595 T
(uf) 244.74 595 T
(fers to a process on another host) 254.44 595 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 577.33 T
(main \050int argc, char ** argv\051 {) 72 553.33 T
(  int i;) 72 529.33 T
(  int Nframes     = 10;) 72 517.33 T
(  int sizeInBytes = 10;) 72 505.33 T
(  int bufferCount = 5;) 72 493.33 T
(  int bufferSize  = 100;) 72 481.33 T
(  int port        = 9161;) 72 469.33 T
(  DMbufferpool    pool;) 72 445.33 T
(  DMnetconnection connection;) 72 433.33 T
(  DMparams *      plist;) 72 421.33 T
(  DMbuffer        buff;) 72 409.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 385.33 T
(    abort\050\051;) 72 373.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 361.33 T
(    abort\050\051;) 72 349.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 337.33 T
(      DM_FAILURE\051) 72 325.33 T
(    abort\050\051;) 72 313.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 301.33 T
(    abort\050\051;) 72 289.33 T
(  /* A remote address may also be specified instead by the following call:) 72 277.33 T
(  ** dmParamsSetInt\050plist, DMNET_REMOTE_SOCKADDR, sin.sin_addr.s_addr\051; */) 72 265.33 T
(  if \050dmParamsSetString\050plist, DMNET_REMOTE_HOSTNAME, \322hostname\323\051 ==) 72 253.33 T
(      DM_FAILURE\051) 72 241.33 T
(    abort\050\051;) 72 229.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 217.33 T
(     dmNetListen. */) 72 205.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 193.33 T
(    abort\050\051;) 72 181.33 T
(  /* now create the buffer pool */) 72 157.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 145.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 133.33 T
(    abort\050\051;) 72 121.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 109.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 97.33 T
(    abort\050\051;) 72 85.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 33
%%Page: "6" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(6) 535 749.33 T
4 F
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 713.33 T
(    abort\050\051;) 72 701.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 677.33 T
(    if \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 665.33 T
(      abort\050\051;) 72 653.33 T
(    /* put some data into buff here*/) 72 641.33 T
(    /* if necessary, set its size with ... */) 72 629.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 617.33 T
(    if \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 605.33 T
(      abort\050\051;) 72 593.33 T
(    }) 72 581.33 T
(    dmBufferFree\050buff\051;) 72 569.33 T
(  }) 72 557.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 533.33 T
(    abort\050\051;) 72 521.33 T
(}) 72 509.33 T
0 12 Q
(A simple program for recei) 72 479 T
(ving DMb) 202.33 479 T
(uf) 251.76 479 T
(fers from a remote host) 261.46 479 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 461.33 T
(main \050int argc, char ** argv\051 {) 72 437.33 T
(  int i;) 72 413.33 T
(  int Nframes     = 10;) 72 401.33 T
(  int bufferCount = 5;) 72 389.33 T
(  int bufferSize  = 100;) 72 377.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 365.33 T
(  DMnetconnection connection;) 72 341.33 T
(  DMparams *      plist;) 72 329.33 T
(  DMbufferpool    pool;) 72 317.33 T
(  DMbuffer        buff;) 72 305.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 233.33 T
(      DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 173.33 T
(    /* we should try a new port number if we get here. */) 72 161.33 T
(    abort\050\051;) 72 149.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 137.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 125.33 T
(    abort\050\051;) 72 113.33 T
(  /* Now set up the buffer pool */) 72 101.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 89.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 34
%%Page: "7" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(7) 535 749.33 T
4 F
(    abort\050\051;) 72 713.33 T
(  /* set the pool parameters as needed by dmNet. */) 72 701.33 T
(  /* you may also have to call, for example, vlDMPoolGetParams, to get the) 72 689.33 T
(buffer) 72 677.33 T
(     pool parameters needed by vl. */) 72 665.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 653.33 T
(    abort\050\051;) 72 641.33 T
(  /* create the buffer pool */) 72 629.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(  if \050dmNetRegisterPool\050connection, pool\051 != DM_SUCCESS\051) 72 593.33 T
(    abort\050\051;) 72 581.33 T
(  /* now loop to receive the buffers. */) 72 569.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 557.33 T
(    if \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 545.33 T
(      abort\050\051;) 72 533.33 T
(    }) 72 521.33 T
(    /* use the data in buff here */) 72 509.33 T
(    dmBufferFree\050buff\051;) 72 497.33 T
(  }) 72 485.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 473.33 T
(    abort\050\051;) 72 461.33 T
(}) 72 449.33 T
1 12 Q
(Sending DMb) 72 398 T
(uff) 148.43 398 T
(er) 163.63 398 T
(s fr) 174.79 398 T
(om Pr) 193.22 398 T
(ocess to Pr) 226.99 398 T
(ocess on one Host) 291.44 398 T
0 F
-0.43 (dmNet can ef) 72 379 P
-0.43 (\336ciently mo) 135.48 379 P
-0.43 (v) 192.54 379 P
-0.43 (e DMb) 198.36 379 P
-0.43 (uf) 231.35 379 P
-0.43 (fers between processes on the same host. The dif) 241.04 379 P
-0.43 (ferences from) 471.56 379 P
(the remote case are) 72 365 T
(\245) 72 346 T
4.42 (the DMNET_CONNECTION_TYPE is DMNET_LOCAL for both the sender and) 90 346 P
(recei) 90 332 T
(v) 113.02 332 T
(er) 118.84 332 T
(.) 127.5 332 T
(\245) 72 312 T
13.14 (the sender need not specify the DMNET_REMO) 90 312 P
13.14 (TE_HOSTN) 402.96 312 P
13.14 (AME nor) 463.2 312 P
(DMNET_REMO) 90 298 T
(TE_SOCKADDR) 172.85 298 T
(\245) 72 278 T
(the recei) 90 278 T
(v) 130.68 278 T
(e need not allocate or re) 136.5 278 T
(gister a b) 251.28 278 T
(uf) 295.03 278 T
(fer pool) 304.73 278 T
(There is a critical dif) 72 258 T
(ference between the local and remote cases for DMb) 171.67 258 T
(uf) 424.01 258 T
(fer handling. In the) 433.7 258 T
(remote case, DMb) 72 244 T
(uf) 160.07 244 T
(fers that are sent are quickly returned to the sender\325) 169.76 244 T
(s pool \050assuming the) 416.03 244 T
(sender calls) 72 230 T
3 F
(dmNetFr) 131.32 230 T
(ee\050\051) 178.42 230 T
0 F
( after) 197.06 230 T
3 F
(dmNetSend\050\051) 225.05 230 T
0 F
(\051. In the local case, the b) 293.04 230 T
(uf) 410.1 230 T
(fers are passed to the) 419.8 230 T
(recei) 72 216 T
(ving process and are not returned to the sender\325) 95.02 216 T
(s pool until the after the recei) 322.3 216 T
(v) 462.64 216 T
(er frees them.) 468.46 216 T
-0.16 (Thus, the sender must allocate a pool big enough for both the sender\325) 72 202 P
-0.16 (s and recei) 401.66 202 P
-0.16 (v) 452.35 202 P
-0.16 (er\325) 458.17 202 P
-0.16 (s needs. Also,) 470.83 202 P
(b) 72 188 T
(uf) 77.76 188 T
(fer pool parameters can depend on the w) 87.46 188 T
(ay the b) 282.28 188 T
(uf) 320.03 188 T
(fers will be used. F) 329.72 188 T
(or e) 421.2 188 T
(xample,) 439.34 188 T
3 F
-0.16 (vlDMP) 72 174 P
-0.16 (oolGetP) 108.42 174 P
-0.16 (arams\050\051) 149.63 174 P
0 F
-0.16 ( can be used to set a DMparams structure with parameters needed for the) 189.61 174 P
(video library) 72 160 T
(. In the remote case, if the recei) 132.88 160 T
(v) 283.52 160 T
(er is sending b) 289.34 160 T
(uf) 358.76 160 T
(fers to VL, it w) 368.46 160 T
(ould call) 442 160 T
3 F
-0.33 (vlDMP) 72 146 P
-0.33 (oolGetP) 108.42 146 P
-0.33 (arams\050\051) 149.63 146 P
0 F
-0.33 (, b) 189.61 146 P
-0.33 (ut in the local case, the sender must mak) 201.04 146 P
-0.33 (e this call and set up the b) 392.56 146 P
-0.33 (uf) 514.32 146 P
-0.33 (fer) 524.01 146 P
(pool appropriately) 72 132 T
(. All b) 159.54 132 T
(uf) 189.64 132 T
(fer pool requirements for the recei) 199.33 132 T
(v) 363.31 132 T
(er are pushed back onto the sender) 369.13 132 T
(so that the sender must kno) 72 118 T
(w ho) 202.69 118 T
(w the recei) 226.06 118 T
(v) 278.4 118 T
(er will use the DMb) 284.22 118 T
(uf) 379.97 118 T
(fers.) 389.66 118 T
3 F
(Examples) 72 99 T
0 F
(A simple program for sending DMb) 72 80 T
(uf) 244.74 80 T
(fers to a process on the same host) 254.44 80 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 35
%%Page: "8" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(8) 535 749.33 T
4 F
(#include <dmedia/dmnet.h>) 72 713.33 T
(#include <errno.h>) 72 701.33 T
(main \050int argc, char ** argv\051 {) 72 677.33 T
(  int i;) 72 653.33 T
(  int Nframes     = 10;) 72 641.33 T
(  int sizeInBytes = 10;) 72 629.33 T
(  int bufferCount = 5;) 72 617.33 T
(  int bufferSize  = 100;) 72 605.33 T
(  int port        = 9161;) 72 593.33 T
(  DMbufferpool    pool;) 72 569.33 T
(  DMnetconnection connection;) 72 557.33 T
(  DMparams *      plist;) 72 545.33 T
(  DMbuffer        buff;) 72 533.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 509.33 T
(    abort\050\051;) 72 497.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 485.33 T
(    abort\050\051;) 72 473.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 461.33 T
(      DM_FAILURE\051) 72 449.33 T
(    abort\050\051;) 72 437.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 425.33 T
(    abort\050\051;) 72 413.33 T
(  /* we don\325t need to specify the remote host in the local case. */) 72 389.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 365.33 T
(     dmNetListen. */) 72 353.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  /* now create the buffer pool */) 72 305.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 293.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 281.33 T
(    abort\050\051;) 72 269.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 257.33 T
(  /* in the local case, the pool params must be appropriate for how */) 72 245.33 T
(  /* the receiver will use the buffers too. */) 72 233.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 161.33 T
(    while \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 149.33 T
(      abort\050\051;) 72 137.33 T
(    /* put some data into buff here*/) 72 125.33 T
(    /* if necessary, set its size with ... */) 72 113.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 101.33 T
(    while \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 89.33 T
(       if \050errno != EBUSY\051 {) 72 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 36
%%Page: "9" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(9) 535 749.33 T
4 F
(      abort\050\051;) 90 713.33 T
(      }) 72 701.33 T
-0.6 (      /* in local case we get EBUSY if we send faster than receiver consumes. */) 72 689.33 P
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    dmBufferFree\050buff\051;) 72 653.33 T
(    sginap\0505\051;  /* give the receiver a chance to do something. */) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 605.33 T
(    abort\050\051;) 72 593.33 T
(}) 72 581.33 T
0 12 Q
(A simple program for recei) 72 551 T
(ving DMb) 202.33 551 T
(uf) 251.76 551 T
(fers from a process on the same host) 261.46 551 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 533.33 T
(#include <errno.h>) 72 521.33 T
(main \050int argc, char ** argv\051 {) 72 497.33 T
(  int i;) 72 473.33 T
(  int Nframes     = 10;) 72 461.33 T
(  int bufferCount = 5;) 72 449.33 T
(  int bufferSize  = 100;) 72 437.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 425.33 T
(  DMnetconnection connection;) 72 401.33 T
(  DMparams *      plist;) 72 389.33 T
(  DMbufferpool    pool;) 72 377.33 T
(  DMbuffer        buff;) 72 365.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 317.33 T
(    abort\050\051;) 72 305.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 293.33 T
(      DM_FAILURE\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 233.33 T
(    /* we should try a new port number if we get here. */) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 197.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 185.33 T
(    abort\050\051;) 72 173.33 T
(  /* receiver does not need a pool in the local case. */) 72 149.33 T
(  /* now loop to receive the buffers. */) 72 125.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 113.33 T
(    while \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 101.33 T
(      if \050errno != EBUSY\051 {) 72 89.33 T
(     abort\050\051;) 90 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 37
%%Page: "10" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(10) 530 749.33 T
4 F
(      }) 72 713.33 T
(      /* if we don\325t give the sender enough time to send we get */) 72 701.33 T
(      /* EBUSY in the local case. */) 72 689.33 T
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    /* use the data in buff here */) 72 653.33 T
(    dmBufferFree\050buff\051;) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(}) 72 593.33 T
1 12 Q
(UST and MSC v) 72 566 T
(alues) 160.44 566 T
0 F
(If the DMb) 72 547 T
(uf) 125.75 547 T
(fer to be sent contains a non-zero UST v) 135.44 547 T
(alue,) 329.1 547 T
3 F
(dmNetSend\050\051) 355.09 547 T
0 F
( will cooperate with) 423.08 547 T
3 F
-0.22 (dmNetRecv\050\051) 72 533 P
0 F
-0.22 ( to adjust the UST v) 139.97 533 P
-0.22 (alue. The attempt is to mak) 234.92 533 P
-0.22 (e the UST v) 364.37 533 P
-0.22 (alue at the recei) 421.08 533 P
-0.22 (ving end) 495.77 533 P
(of the netw) 72 519 T
(ork connection equi) 125.87 519 T
(v) 220.88 519 T
(alent to the UST v) 226.58 519 T
(alue that w) 314.28 519 T
(as set at the sending end. This is) 366.82 519 T
(accomplished by con) 72 505 T
(v) 172.84 505 T
(erting the sent UST to an equi) 178.66 505 T
(v) 322.34 505 T
(alent \322w) 328.04 505 T
(all clock\323 v) 368.24 505 T
(alue \050via) 423.26 505 T
3 F
(dmGetUSTCurr) 72 491 T
(entT) 156.44 491 T
(imeP) 180.23 491 T
(air\050\051) 206.1 491 T
0 F
(\051. This w) 228.76 491 T
(all clock v) 271.63 491 T
(alue is sent to the recei) 321.32 491 T
(ving end, which con-) 430.67 491 T
(v) 72 477 T
(erts it back to an equi) 77.82 477 T
(v) 180.5 477 T
(alent local UST v) 186.2 477 T
(alue. F) 270.23 477 T
(or this to be ef) 302.71 477 T
(fecti) 371.74 477 T
(v) 392.76 477 T
(e, the system clocks on the) 398.58 477 T
-0.07 (tw) 72 463 P
-0.07 (o machines must be synchronized by some e) 83.88 463 P
-0.07 (xternal mechanism, such as) 296.86 463 P
2 F
-0.07 (xntpd) 431.57 463 P
0 F
-0.07 (or) 461.17 463 P
2 F
-0.07 (timed) 474.1 463 P
0 F
-0.07 (. T) 500.76 463 P
-0.07 (o dis-) 513.07 463 P
-0.28 (able this con) 72 449 P
-0.28 (v) 131.62 449 P
-0.28 (ersion, or to mak) 137.44 449 P
-0.28 (e it clear to the recei) 217.8 449 P
-0.28 (ving end that the UST v) 313.73 449 P
-0.28 (alue is not to be trusted) 427.02 449 P
(\050perhaps because it is kno) 72 435 T
(wn that the system clocks are not synchronized\051, the sender can set the) 195.67 435 T
(UST v) 72 421 T
(alue in the DMb) 103.37 421 T
(uf) 181.45 421 T
(fer to zero, using) 191.15 421 T
3 F
(dmBufferSetUSTMSCpair\050\051) 275.46 421 T
0 F
(.) 420.78 421 T
(This con) 72 402 T
(v) 113.18 402 T
(ersion is not done when DMNET_CONNECTION_TYPE is DMNET_LOCAL.) 119 402 T
(If the DMb) 72 383 T
(uf) 125.75 383 T
(fer to be sent contains a non-zero MSC v) 135.44 383 T
(alue, DMnet preserv) 331.78 383 T
(es it. This is useful) 429.9 383 T
-0.2 (when relaying DMb) 72 369 P
-0.2 (uf) 168 369 P
-0.2 (fers that ha) 177.69 369 P
-0.2 (v) 230.36 369 P
-0.2 (e been \336lled by a de) 236.18 369 P
-0.2 (vice dri) 331.16 369 P
-0.2 (v) 366.98 369 P
-0.2 (er) 372.8 369 P
-0.2 (. When \336lling DMb) 381.46 369 P
-0.2 (uf) 475.28 369 P
-0.2 (fers from a) 484.97 369 P
-0.28 (disk \336le or memory) 72 355 P
-0.28 (, there may not be an associated MSC. If the sender lea) 164.7 355 P
-0.28 (v) 425.61 355 P
-0.28 (es the MSC \336eld zero,) 431.43 355 P
3 F
-0.28 (dmNetSend\050\051) 72 341 P
0 F
-0.28 ( will pro) 139.99 341 P
-0.28 (vide a monotonically increasing v) 179.92 341 P
-0.28 (alue. T) 341.15 341 P
-0.28 (o a) 373.23 341 P
-0.28 (v) 387.04 341 P
-0.28 (oid possible confusion, callers) 392.8 341 P
(should either) 72 327 T
3 F
(always) 137.33 327 T
0 F
( set the MSC v) 172 327 T
(alue or) 243.04 327 T
3 F
( ne) 276.02 327 T
(v) 290.84 327 T
(er) 296.72 327 T
0 F
( set one.) 307.38 327 T
1 F
(Ad) 72 299 T
(v) 87.82 299 T
(anced Examples) 94.25 299 T
3 F
(P) 72 280 T
(ort number management and connection start up) 79.09 280 T
0 F
-0.04 (There are tw) 72 261 P
-0.04 (o k) 132.44 261 P
-0.04 (e) 147.28 261 P
-0.04 (y issues to be concerned with when starting up a connection: the recei) 152.43 261 P
-0.04 (v) 486.93 261 P
-0.04 (er should) 492.75 261 P
-0.46 (call) 72 247 P
3 F
-0.46 (dmNetListen\050\051) 91.87 247 P
0 F
-0.46 ( before the sender calls) 166.52 247 P
3 F
-0.46 (dmNetConnect\050\051) 277.87 247 P
0 F
-0.46 (, and the sender and recei) 363.18 247 P
-0.46 (v) 482.56 247 P
-0.46 (er must be) 488.38 247 P
(prepared for) 72 233 T
3 F
(dmNetListen\050\051) 133.97 233 T
0 F
( to f) 208.62 233 T
(ail because the port is in use.) 227.83 233 T
(Normally the sender and recei) 72 214 T
(v) 216.32 214 T
(er use a bi-directional sock) 222.14 214 T
(et connection and an application spe-) 351.32 214 T
(ci\336c protocol to start up a session. This control connection can be used to send the port number) 72 200 T
(from the recei) 72 186 T
(v) 139.01 186 T
(er to the sender) 144.83 186 T
(, after the recei) 217.99 186 T
(v) 289.66 186 T
(er has successfully called) 295.48 186 T
3 F
(dmNetListen\050\051) 420.11 186 T
0 F
(. The) 494.76 186 T
(sender\325) 72 172 T
(s code is v) 106.66 172 T
(ery simple:) 156.8 172 T
4 10 Q
(/* receive a message from the receiver saying which port to send to. */) 72 154.33 T
(/* set dmNetPort to that port number. */) 72 142.33 T
(int dmNetPort = ...;) 72 130.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 72 118.33 T
(return FAIL;) 90 106.33 T
(}) 72 94.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 38
%%Page: "11" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(11) 530 749.33 T
4 F
(dmNetConnect\050connection, plist\051 == DM_FAILURE\051 {) 72 713.33 T
(return FAIL;) 90 701.33 T
(}) 72 689.33 T
0 12 Q
(The recei) 72 671 T
(v) 116.68 671 T
(er code follo) 122.5 671 T
(ws) 182.84 671 T
4 10 Q
(int i;) 72 653.33 T
(int dmNetPort = ...;) 72 641.33 T
(/* some initial port number */) 204 641.33 T
(for \050i = 0; i < 10; i++\051 {) 72 629.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 90 617.33 T
(return FAIL;) 108 605.33 T
(}) 90 593.33 T
(if \050dmNetListen\050connection, plist\051 == DM_SUCCESS\051 {) 90 581.33 T
(/* success, exit for loop and carry on. */) 108 569.33 T
(break;) 108 557.33 T
(}) 90 545.33 T
(if \050errno != EADDRINUSE\051 {) 90 533.33 T
(/* dmNetListen failed for some other reason */) 108 521.33 T
(return FAIL;) 108 509.33 T
(}) 90 497.33 T
(/* increment port and try again */) 90 485.33 T
(dmNetPort++;) 90 473.33 T
(}) 72 461.33 T
(if \050i >= 10\051 {) 72 449.33 T
(/* could not find a free port. */) 90 437.33 T
(return FAIL;) 90 425.33 T
(}) 72 413.33 T
(/* at this point, send dmNetPort to the sender. */) 72 401.33 T
(if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051 {) 72 389.33 T
(/* unexpected error in dmNetAccept\050\051. */) 90 377.33 T
(return FAIL;) 90 365.33 T
(}) 72 353.33 T
0 12 Q
(The recei) 72 335 T
(v) 116.68 335 T
(er starts from some initial port number) 122.5 335 T
(. It calls) 307.15 335 T
3 F
(dmNetListen\050\051) 348.48 335 T
0 F
( on each port number) 423.13 335 T
-0.3 (until it succeeds. Then it sends the port number to the sender and calls) 72 321 P
3 F
-0.3 (dmNetAccept\050\051) 407.38 321 P
0 F
-0.3 ( to w) 485.34 321 P
-0.3 (ait for) 508.61 321 P
(the sender to call) 72 307 T
3 F
(dmNetConnect\050\051) 156.65 307 T
0 F
(.) 241.96 307 T
3 F
(A) 72 269 T
(v) 79.46 269 T
(oiding Spinning on dmNetRecv\050\051) 85.34 269 T
0 F
(The simple e) 72 250 T
(xample abo) 133.81 250 T
(v) 189.29 250 T
(e loops on) 195.11 250 T
3 F
(dmNetRecv\050\051) 247.44 250 T
0 F
( with a small delay if) 315.41 250 T
3 F
(dmNetRecv\050\051) 419.4 250 T
0 F
( f) 487.37 250 T
(ails) 494.24 250 T
(because nothing is a) 72 236 T
(v) 168.74 236 T
(ailable. An alternati) 174.44 236 T
(v) 269.12 236 T
(e is to use) 274.94 236 T
3 F
(select\050\051) 325.61 236 T
0 F
( to ensure that there is data a) 361.58 236 T
(v) 498.31 236 T
(ailable) 504.01 236 T
(before calling) 72 222 T
3 F
(dmNetRecv\050\051) 141.31 222 T
0 F
(:) 209.28 222 T
4 10 Q
(fd_set readFDs;) 72 204.33 T
(struct timeval waitTime;) 72 180.33 T
(waitTime.tv_sec = 2;) 72 168.33 T
(waitTime.tv_usec = 0;) 72 156.33 T
(FD_ZERO\050&readFDs\051;) 72 132.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 120.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 108.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 96.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 84.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 39
%%Page: "12" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(12) 530 749.33 T
4 F
(}) 72 713.33 T
(while \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 689.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 677.33 T
(  abort\050\051;) 72 665.33 T
(}) 72 653.33 T
3 12 Q
(Ensuring ther) 72 623 T
(e is a fr) 143.46 623 T
(ee b) 180.9 623 T
(uffer in the pool) 200.99 623 T
0 F
(The recei) 72 604 T
(v) 116.68 604 T
(er program is responsible for ensuring that there is a free b) 122.5 604 T
(uf) 403.19 604 T
(fer in the b) 412.88 604 T
(uf) 464.96 604 T
(fer pool) 474.66 604 T
-0.06 (before calling) 72 590 P
3 F
-0.06 (dmNetRecv\050\051) 141.18 590 P
0 F
-0.06 (. It may not be practical to do this by counting b) 209.15 590 P
-0.06 (uf) 438.85 590 P
-0.06 (fer allocations and) 448.55 590 P
(frees because when a b) 72 576 T
(uf) 182.38 576 T
(fer is queued in for processing by the VLor dmIC, it may be some time) 192.07 576 T
(before it is freed. An alternati) 72 562 T
(v) 213.66 562 T
(e is to use) 219.48 562 T
3 F
(select\050\051) 270.14 562 T
0 F
( to delay until a b) 306.12 562 T
(uf) 389.54 562 T
(fer is free:) 399.24 562 T
4 10 Q
(fd_set readFDs;) 72 544.33 T
(fd_set writeFDs;) 72 532.33 T
(long long bytesAvailable;) 72 508.33 T
(int       buffersAvailable;) 72 496.33 T
(struct timeval waitTime;) 72 472.33 T
(waitTime.tv_sec = 2;) 72 460.33 T
(waitTime.tv_usec = 0;) 72 448.33 T
(/* wait for something to recv. */) 72 424.33 T
(FD_ZERO\050&readFDs\051;) 72 412.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 400.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 388.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 376.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 364.33 T
(}) 72 352.33 T
(if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 328.33 T
(    != DM_SUCCESS\051 {) 72 316.33 T
(   abort\050\051;) 72 304.33 T
(}) 72 292.33 T
(/* wait for a free buffer */) 72 268.33 T
(while \050buffersAvailable < 1\051 {) 72 256.33 T
(  FD_ZERO\050&writeFDs\051;) 72 244.33 T
(  FD_SET \050poolFD, &writeFDs\051;) 72 232.33 T
(  while \050select \050poolFD+1, NULL, &writeFDs, NULL, &waitTime\051 == 0\051 {) 72 220.33 T
(    if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 208.33 T
(  != DM_SUCCESS\051 {) 90 196.33 T
(      abort\050\051;) 72 184.33 T
(    }) 72 172.33 T
(    fprintf\050stderr, \322Select waiting 2 seconds for a free buffer.\134n\323\051;) 72 160.33 T
(    FD_SET \050poolFD, &writeFDs\051;) 72 148.33 T
(  }) 72 136.33 T
(  if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 124.33 T
(!= DM_SUCCESS\051 {) 90 112.33 T
(    abort\050\051;) 72 100.33 T
(  }) 72 88.33 T
(}) 72 76.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 40
%%Page: "13" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(13) 530 749.33 T
4 F
(if \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 701.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 689.33 T
(  abort\050\051;) 72 677.33 T
(}) 72 665.33 T
0 12 Q
(Note that this code can f) 72 635 T
(ail if there is another thread or a de) 188.86 635 T
(vice dri) 356.51 635 T
(v) 392.53 635 T
(er allocating from the same) 398.35 635 T
(pool. Also note that this code \336rst w) 72 621 T
(aits for input to become a) 245.88 621 T
(v) 367.96 621 T
(ailable, then it w) 373.66 621 T
(aits for a b) 453.53 621 T
(uf) 504.28 621 T
(fer) 513.97 621 T
(.) 526.63 621 T
-0.06 (This is to simplify generalizing to the multi-threaded case with multiple allocators. The goal is to) 72 607 P
-0.36 (minimize the delay between a b) 72 593 P
-0.36 (uf) 222.28 593 P
-0.36 (fer becoming a) 231.98 593 P
-0.36 (v) 303 593 P
-0.36 (ailable in the pool and using it. The data w) 308.7 593 P
-0.36 (aiting) 510.02 593 P
(in the netw) 72 579 T
(ork input queue will not go a) 125.21 579 T
(w) 263.69 579 T
(ay) 272.23 579 T
(, b) 282.78 579 T
(ut the free b) 294.54 579 T
(uf) 351.95 579 T
(fer in the b) 361.64 579 T
(uf) 413.72 579 T
(fer pool might be allo-) 423.42 579 T
(cated by the other thread.) 72 565 T
-0.06 (Note that the b) 72 546 P
-0.06 (uf) 142.56 546 P
-0.06 (fer pool\325) 152.25 546 P
-0.06 (s fd is sent to select as a write fd.  This is because) 193.18 546 P
3 F
-0.06 (dmNetRecv\050\051) 433.23 546 P
0 F
-0.06 ( will be) 501.2 546 P
(trying to get a DMb) 72 532 T
(uf) 167.09 532 T
(fer to write to.  \050A common mistak) 176.78 532 T
(e may be to use it as a read fd because) 343.98 532 T
(this code is trying to read.\051) 72 518 T
1 F
(Summar) 72 490 T
(y of Entr) 120.13 490 T
(y P) 168.92 490 T
(oints) 186.46 490 T
0 F
-0.37 (A) 72 471 P
3 F
-0.37 (DMnetconnection) 83.29 471 P
0 F
-0.37 ( is an opaque structure which maintains the state of both the control and data) 174.61 471 P
(connections. It is a pointer to the real structure the library allocates and maintains.) 72 457 T
(There are logically tw) 72 438 T
(o connections in a DMnetconnection, the \336rst for control \050e.g., setup, tear-) 177.52 438 T
(do) 72 424 T
(wn, management and synchronization\051, and the second for passing DMb) 83.7 424 T
(uf) 431.06 424 T
(fer content. Cur-) 440.76 424 T
(rently the control connection is al) 72 410 T
(w) 232.86 410 T
(ays a sock) 241.4 410 T
(et. The current implementation of dmNet supports) 290.6 410 T
(data connections which are either sock) 72 396 T
(ets \050for remote\051 or local \050using a DMS \336fo\051.) 257.5 396 T
4 10 Q
(DMnetconnection connection;) 72 378.33 T
3 12 Q
-0.25 (dmNetOpen\050\051) 72 360 P
0 F
-0.25 ( is the \336rst dmNet call one mak) 142.66 360 P
-0.25 (es. It allocates the internal connection struct and ini-) 291.08 360 P
(tializes it. Returns DM_SUCCESS on successful open, DM_F) 72 346 T
(AILURE otherwise.) 370.12 346 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 328.33 T
3 12 Q
(dmNetClose\050\051) 72 310 T
0 F
( is the last call to mak) 142.64 310 T
(e, it deallocates all the structures including an) 247.19 310 T
(y DMS \336fos) 466.31 310 T
(that might ha) 72 296 T
(v) 135.1 296 T
(e been created. Returns DM_SUCCESS.) 140.92 296 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 278.33 T
3 12 Q
(dmNetConnect\050\051) 72 260 T
0 F
( is the sender side call that sets up the control connection. It looks through the) 157.31 260 T
(DMparams ar) 72 246 T
(gument for a remote host name or remote address and opens a communications) 138.1 246 T
(sock) 72 232 T
(et to the speci\336ed destination. It calls) 93.88 232 T
3 F
(connect\050\051) 275.2 232 T
0 F
( and sets appropriate sock) 322.51 232 T
(et options. Then it) 446.36 232 T
-0.08 (creates whate) 72 218 P
-0.08 (v) 136.59 218 P
-0.08 (er form of communication channel has been speci\336ed for the data portion. Returns) 142.41 218 P
(DM_SUCCESS if connection made and) 72 204 T
3 F
(setsock) 267.66 204 T
(opt\050\051) 304.14 204 T
0 F
( calls succeed, DM_F) 328.8 204 T
(AILURE otherwise.) 431.89 204 T
(This call will block until the recei) 72 190 T
(v) 233.69 190 T
(er calls) 239.51 190 T
3 F
(dmNetAccept\050\051) 276.83 190 T
0 F
(.) 354.79 190 T
4 10 Q
(DMstatus dmNetConnect \050 DMnetconnection connection, DMparams* plist \051;) 72 172.33 T
3 12 Q
(dmNetListen\050\051) 72 154 T
0 F
(and) 149.65 154 T
3 F
( dmNetAccept\050\051) 166.98 154 T
0 F
( are the recei) 247.94 154 T
(v) 309.28 154 T
(er side calls that sets up the control and data) 315.1 154 T
(connections.) 72 140 T
3 F
(dmNetListen\050\051) 135.32 140 T
0 F
( should be called by the recei) 209.98 140 T
(v) 349.64 140 T
(er before the sender calls) 355.46 140 T
3 F
(dmNetConnect\050\051) 72 126 T
0 F
(. T) 157.31 126 T
(ypically) 169.68 126 T
(, the recei) 207.56 126 T
(v) 254.24 126 T
(er will tell the sender what port to use after calling) 260.06 126 T
3 F
(dmNetListen\050\051) 72 112 T
0 F
( b) 146.65 112 T
(ut before calling) 155.41 112 T
3 F
(dmNetAccept\050\051) 237.06 112 T
0 F
(.) 315.02 112 T
3 F
(dmNetAccept\050\051) 321.02 112 T
0 F
( will block until the sender) 398.99 112 T
(calls) 72 98 T
3 F
(dmNetConnect\050\051) 97 98 T
0 F
(.) 182.3 98 T
4 10 Q
(DMstatus dmNetListen \050 DMnetconnection connection , DMparams* plist \051;) 72 80.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 41
%%Page: "14" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(14) 530 749.33 T
4 F
(DMstatus dmNetAccept \050 DMnetconnection connection , DMparams* plist \051;) 72 713.33 T
3 12 Q
(dmNetRegisterP) 72 695 T
(ool\050\051) 156.4 695 T
0 F
( re) 179.72 695 T
(gisters a b) 191.87 695 T
(uf) 240.29 695 T
(fer pool on the connection. This is only needed on a recei) 249.98 695 T
(v-) 524.96 695 T
(ing side. DMb) 72 681 T
(uf) 140.76 681 T
(fers to hold incoming data will be allocated from this pool.) 150.46 681 T
4 10 Q
(int dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 663.33 T
3 12 Q
(dmNetGetP) 72 645 T
(arams\050\051) 132.53 645 T
0 F
( tak) 172.51 645 T
(es the speci\336ed parameter list and modi\336es and/or adds parameters v) 190.06 645 T
(al-) 519.7 645 T
-0.11 (ues as necessary for DMb) 72 631 P
-0.11 (uf) 195.28 631 P
-0.11 (ferpool creation and also adds the parameters which describe the data) 204.97 631 P
(connection.) 72 617 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection , DMparams* plist \051;) 72 599.33 T
3 12 Q
-0.05 (dmNetSend\050\051) 72 581 P
0 F
-0.05 ( sends the dmBuf) 139.99 581 P
-0.05 (fer o) 223.2 581 P
-0.05 (v) 245.29 581 P
-0.05 (er the data connection. Returns DM_SUCCESS on success,) 251.11 581 P
(DM_F) 72 567 T
(AILURE otherwise and errno is set to EB) 103.12 567 T
(USY if the \336fo o) 303.3 567 T
(v) 383.78 567 T
(er\337o) 389.6 567 T
(ws \050i.e., the block couldn\325) 411.3 567 T
(t) 536.06 567 T
(be enqueued because too man) 72 553 T
(y outstanding blocks in the queue\051. If the errno is 0, the underlying) 215.11 553 T
(connection w) 72 539 T
(as closed \050possibly because the recei) 136.2 539 T
(v) 311.52 539 T
(er died or closed the connection\051.) 317.34 539 T
4 10 Q
(DMstatus dmNetSend \050 DMnetconnection connection , DMbuffer buff\051;) 72 521.33 T
3 12 Q
(dmNetRecv\050\051) 72 503 T
0 F
( recei) 139.97 503 T
(v) 165.98 503 T
(es a DMb) 171.8 503 T
(uf) 218.22 503 T
(fer from the data connection. When called,) 227.92 503 T
3 F
(dmNetRecv\050\051) 436.19 503 T
0 F
( allo-) 504.15 503 T
(cates a DMb) 72 489 T
(uf) 132.41 489 T
(fer from the re) 142.1 489 T
(gistered pool, \336lls in the recei) 211.56 489 T
(v) 353.92 489 T
(ed data and metadata and returns it.) 359.74 489 T
(This is a non-blocking call and returns DM_F) 72 475 T
(AILURE with errno set to EB) 290.76 475 T
(USY if no data w) 434.29 475 T
(as) 518.16 475 T
(a) 72 461 T
(v) 77.09 461 T
(ailable. Applications can loop on this return v) 82.79 461 T
(alue or select on the fd \050use) 301.8 461 T
3 F
(dmNetDataFd\050\051) 436.76 461 T
0 F
( to) 518.08 461 T
(get the fd\051. If there are no free DMb) 72 447 T
(uf) 244.69 447 T
(fers in the b) 254.39 447 T
(uf) 311.14 447 T
(fer pool DM_F) 320.83 447 T
(AILURE will be returned and) 392.6 447 T
(errno will be set to ENOMEM. The application can simply delay until a b) 72 433 T
(uf) 425.72 433 T
(fer should ha) 435.42 433 T
(v) 497.83 433 T
(e been) 503.65 433 T
(freed and try ag) 72 419 T
(ain. If the size of the DMb) 147.58 419 T
(uf) 274.31 419 T
(fers in the b) 284 419 T
(uf) 340.75 419 T
(fer pool is set to small for the b) 350.45 419 T
(uf) 500.2 419 T
(fers) 509.89 419 T
(being recie) 72 405 T
(v) 124.68 405 T
(ed, DM_F) 130.5 405 T
(AILURE will be returned and errno will be set to ERANGE. If) 178.94 405 T
(DM_F) 72 391 T
(AILURE is returned and errno is 0, the underlying connection w) 103.12 391 T
(as closed \050possibly) 412.61 391 T
(because the sender died or closed the connection\051.) 72 377 T
4 10 Q
(DMstatus dmNetRecv \050 DMnetconnection, DMbuffer* \051;) 72 359.33 T
3 12 Q
(dmNetContr) 72 341 T
(olFd\050\051) 137.1 341 T
0 F
( returns the \336le descriptor used to select on the dmNet control connection.) 168.43 341 T
4 10 Q
(int dmNetControlFd \050 DMnetconnection \051;) 72 323.33 T
3 12 Q
(dmNetDataFd\050\051) 72 305 T
0 F
( returns the \336le descriptor for the data connection. If the data connection is a) 153.31 305 T
(sock) 72 291 T
(et, it just returns the sock) 93.88 291 T
(et, if it\325) 214.42 291 T
(s a \336fo, it returns its fd. This fd can be used to select on to get) 249.42 291 T
(noti\336cation of when DMb) 72 277 T
(uf) 196.75 277 T
(fers arri) 206.45 277 T
(v) 243.79 277 T
(e.) 249.61 277 T
4 10 Q
(int dmNetDataFd \050 DMnetconnection \051;) 72 259.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 42
%%Page: "1" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(1) 535 749.33 T
1 14 Q
(Digital Media Netw) 194.9 710.67 T
(orking - dmNet) 318.31 710.67 T
2 12 Q
-0.01 (Note: This is a dr) 126 691 P
-0.01 (aft pr) 209.79 691 P
-0.01 (o) 235.59 691 P
-0.01 (gr) 241.46 691 P
-0.01 (ammer\325) 251.95 691 P
-0.01 (s guide for dmNet. It is intended to be in the style of) 288.79 691 P
(a c) 126 677 T
(hapter for the Insight book \324) 140.15 677 T
(\324IRIS Digitial Media P) 274.48 677 T
(or) 383.17 677 T
(gr) 393.4 677 T
(amming Guide\325) 403.88 677 T
(\325. I have put) 477.54 677 T
-0.14 (little ef) 126 663 P
-0.14 (fort into formating as this document will have to be r) 159.31 663 P
-0.14 (eformated with the of) 411.45 663 P
-0.14 (\336cial) 513.14 663 P
(Insight formats.) 126 649 T
(The c) 126 629 T
(hapter \324) 152.15 629 T
(\324Digital Media Buf) 189.14 629 T
(fer) 280.26 629 T
(s\325) 293.47 629 T
(\325 will need some c) 300.8 629 T
(hang) 387.28 629 T
(es to add dmNet to the list) 411.16 629 T
(of things that can work with DMb) 126 615 T
(uf) 287.77 615 T
(fer) 296.89 615 T
(s.) 310.1 615 T
(Something mor) 126 595 T
(e should be said about the handling of UST/MSC.) 198.55 595 T
0 F
-0.34 (dmNet implements the deli) 72 575 P
-0.34 (v) 201.01 575 P
-0.34 (ery of digital media b) 206.83 575 P
-0.34 (uf) 308.56 575 P
-0.34 (fers o) 318.25 575 P
-0.34 (v) 344.72 575 P
-0.34 (er netw) 350.54 575 P
-0.34 (orks. The central goal of dmNet) 385.73 575 P
(is simple: to allo) 72 561 T
(w media programmers to w) 151.38 561 T
(orry about the details of manipulating media instead) 283.24 561 T
(of managing the netw) 72 547 T
(ork. The API is the same re) 176.2 547 T
(g) 307.66 547 T
(ardless of the underlying netw) 313.6 547 T
(ork - from a 10) 458.78 547 T
(me) 72 533 T
(g) 86.48 533 T
(abit/second Ethernet to striped HIPPI channels transmitting hundreds of me) 92.42 533 T
(g) 455.21 533 T
(abytes/second.) 461.15 533 T
-0.01 (dmNet hides the details and encapsulates tuning ef) 72 519 P
-0.01 (forts to pro) 314.6 519 P
-0.01 (vide the most ef) 367.73 519 P
-0.01 (\336cient data transfer) 444.39 519 P
(possible. dmNet also allo) 72 505 T
(ws ef) 193.03 505 T
(\336cient transfer of DMb) 218.39 505 T
(uf) 329.12 505 T
(fers among processes on the same host.) 338.82 505 T
1 F
(About dmNet) 72 477 T
0 F
(DMb) 72 458 T
(uf) 97.09 458 T
(fers and DMb) 106.79 458 T
(uf) 173.2 458 T
(ferpools allo) 182.89 458 T
(w applications to allocate and use general-purpose system) 242.92 458 T
(memory for transporting media data within an application. A DMb) 72 444 T
(uf) 392.39 444 T
(ferpool is a custom storage) 402.08 444 T
(f) 72 430 T
(acility created by the application. V) 75.88 430 T
(ideo I/O de) 246.46 430 T
(vices, compression de) 300.14 430 T
(vices and algorithms and) 405.49 430 T
-0.32 (graphics de) 72 416 P
-0.32 (vices ha) 126.36 416 P
-0.32 (v) 164.79 416 P
-0.32 (e direct access to this storage on a compartmental basis; each compartment is) 170.61 416 P
(referred to by a DMb) 72 402 T
(uf) 173.72 402 T
(fer) 183.42 402 T
(. An application can de\336ne what this compartment represents, b) 196.08 402 T
(ut in) 501.46 402 T
(general a DMb) 72 388 T
(uf) 143.74 388 T
(fer represents a single image \050e.g., one frame or \336eld of video\051.) 153.43 388 T
(W) 72 369 T
(ithin an application, the contents of a DMb) 82.85 369 T
(uf) 288.59 369 T
(fer are transferred by communicating only a refer-) 298.28 369 T
(ence to the storage location rather than mo) 72 355 T
(ving the actual contents. DMb) 276.11 355 T
(uf) 420.85 355 T
(fers are, essentially) 430.55 355 T
(,) 522.07 355 T
(placeholders which contain pointers to the data; the data bytes are stored else) 72 341 T
(where, in specially) 441.62 341 T
(reserv) 72 327 T
(ed system memory) 101.14 327 T
(. This memory is reserv) 191.02 327 T
(ed at application start-up and guaranteed for the) 304.49 327 T
(life of the application, and is not visited by the page daemon and will not be sw) 72 313 T
(apped out.) 452.84 313 T
(The dmNet API e) 72 294 T
(xtends the functionality of DMb) 156.8 294 T
(uf) 311.22 294 T
(fers, by pro) 320.92 294 T
(viding a lo) 375.72 294 T
(w-ef) 426.76 294 T
(fort, lo) 448.44 294 T
(w-intrusion) 480.8 294 T
(e) 72 280 T
(xtension of the e) 77.15 280 T
(xisting DMb) 156.62 280 T
(uf) 217.39 280 T
(fer API that allo) 227.09 280 T
(ws the application programmer to mo) 304.44 280 T
(v) 484.57 280 T
(e) 490.39 280 T
(DMb) 72 266 T
(uf) 97.09 266 T
(fers across a netw) 106.79 266 T
(ork. It adds four basic calls:) 192.3 266 T
3 F
(dmNetConnect\050\051) 328.61 266 T
0 F
(,) 413.92 266 T
3 F
(dmNetAccept\050\051) 419.92 266 T
0 F
(,) 497.88 266 T
3 F
(dmNetSend\050\051) 72 252 T
0 F
( and) 139.99 252 T
3 F
(dmNetRecv\050\051) 163.32 252 T
0 F
(, which encapsulate the details of sending data on a netw) 231.29 252 T
(ork.) 503.45 252 T
-0.31 (Except for the initialization parameters, the calls are e) 72 238 P
-0.31 (xactly the same, re) 328.26 238 P
-0.31 (g) 417.12 238 P
-0.31 (ardless of netw) 423.06 238 P
-0.31 (ork type.) 494.96 238 P
(This allo) 72 224 T
(ws the application programmer to think about mo) 114.04 224 T
(ving DMb) 351.5 224 T
(uf) 400.93 224 T
(fers, not about the details) 410.63 224 T
(of what are in them.) 72 210 T
(K) 72 191 T
(e) 80.36 191 T
(y features of dmNet include:) 85.51 191 T
(\245) 72 172 T
(dmNet hides man) 90 172 T
(y details of the netw) 174.48 172 T
(ork) 271.68 172 T
(\245) 72 152 T
(the dmNet API is independent of the netw) 90 152 T
(ork) 292.19 152 T
(\245) 72 132 T
-0.3 (on most current netw) 90 132 P
-0.3 (orks, dmNet is no slo) 190.64 132 P
-0.3 (wer than the f) 291.5 132 P
-0.3 (astest alternati) 356.8 132 P
-0.3 (v) 425.19 132 P
-0.3 (e, and can be f) 431.01 132 P
-0.3 (aster) 499.34 132 P
(\245) 72 112 T
(dmNet preserv) 90 112 T
(es all meta-data associated with a DMb) 160.8 112 T
(uf) 349.19 112 T
(fer \050e.g., user data, VITC\051) 358.88 112 T
(\245) 72 92 T
3.53 (dmNet modi\336es the UST on recei) 90 92 P
3.53 (v) 269.01 92 P
3.53 (ed DMb) 274.83 92 P
3.53 (uf) 317.78 92 P
3.53 (fers so that the UST of the recei) 327.47 92 P
3.53 (v) 504.85 92 P
3.53 (ed) 510.67 92 P
(DMb) 90 78 T
(uf) 115.09 78 T
(fers re\337ects the correct time relati) 124.79 78 T
(v) 286.1 78 T
(e to the recei) 291.92 78 T
(v) 353.27 78 T
(er\325) 359.09 78 T
(s clock, not the sender\325) 371.75 78 T
(s clock.) 482.06 78 T
FMENDPAGE
%%EndPage: "1" 43
%%Page: "2" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(2) 535 749.33 T
0 12 Q
(\245) 72 712 T
(the dmNet API is consistent with other APIs for processing DMb) 90 712 T
(uf) 403.07 712 T
(fers \050e.g., dmIC\051) 412.76 712 T
(\245) 72 692 T
(dmNet can be used to ef) 90 692 T
(\336ciently mo) 206 692 T
(v) 263.5 692 T
(e a DMb) 269.32 692 T
(uf) 311.06 692 T
(fer between processes on the same host) 320.76 692 T
1 F
(Using dmNet) 72 664 T
0 F
(A dmNet connection supports the uni-directional \337o) 72 645 T
(w of DMb) 322.34 645 T
(uf) 372.1 645 T
(fers from the sender to the) 381.79 645 T
(recei) 72 631 T
(v) 95.02 631 T
(er) 100.84 631 T
(. Bi-directional \337o) 109.5 631 T
(w requires tw) 197.53 631 T
(o independent connections. Both the sender and the) 262.73 631 T
-0.46 (recei) 72 617 P
-0.46 (v) 95.02 617 P
-0.46 (er must \336rst create a connection instance with) 100.84 617 P
3 F
-0.46 (dmNetOpen\050\051) 319.78 617 P
0 F
-0.46 (. Then the connections must be) 390.44 617 P
(initialized by setting DMb) 72 603 T
(uf) 198.1 603 T
(fer and netw) 207.79 603 T
(ork parameters. This is discussed in detail belo) 267.65 603 T
(w) 491.99 603 T
(. When) 499.87 603 T
(the connections are initialized, the recei) 72 589 T
(v) 262.32 589 T
(er calls) 268.14 589 T
3 F
(dmNetListen\050\051) 305.46 589 T
0 F
( to initialize the connection and) 380.11 589 T
(calls) 72 575 T
3 F
(dmNetAccept\050\051) 97 575 T
0 F
( to w) 174.96 575 T
(ait for the sender to call) 198.84 575 T
3 F
(dmNetConnect\050\051) 315.48 575 T
0 F
(. Usually) 400.79 575 T
(, the recei) 443.34 575 T
(v) 490.02 575 T
(er will) 495.84 575 T
-0.23 (use a separate, application speci\336c control connection to tell the recei) 72 561 P
-0.23 (v) 402.28 561 P
-0.23 (er which IP port to connect) 408.1 561 P
(to. This message is usually sent after) 72 547 T
3 F
(dmNetListen\050\051) 251.32 547 T
0 F
( returns b) 325.97 547 T
(ut before calling) 371.05 547 T
3 F
(dmNetAccept\050\051) 452.7 547 T
0 F
(.) 530.66 547 T
(Once the connection is established, the sender calls) 72 533 T
3 F
(dmNetSend\050\051) 320.95 533 T
0 F
( to send a b) 388.94 533 T
(uf) 443.36 533 T
(fer and the) 453.06 533 T
(recei) 72 519 T
(v) 95.02 519 T
(er calls) 100.84 519 T
3 F
(dmNetRecv\050\051) 138.16 519 T
0 F
( to recei) 206.12 519 T
(v) 244.48 519 T
(e a DMb) 250.3 519 T
(uf) 292.04 519 T
(fer) 301.74 519 T
(. When the sender and recei) 314.4 519 T
(v) 447.38 519 T
(er are done, the) 453.2 519 T
(y) 526.99 519 T
(each call) 72 505 T
3 F
(dmNetClose\050\051) 117.31 505 T
0 F
( to close the connection. \050A simple application need not ha) 187.96 505 T
(v) 469.34 505 T
(e an applica-) 475.16 505 T
-0.14 (tion speci\336c protocol for start up. The sending and reci) 72 491 P
-0.14 (ving side could simply use an agreed upon) 333.77 491 P
(port number) 72 477 T
(.\051) 130.33 477 T
-0.47 (The information required for initialization v) 72 458 P
-0.47 (aries slightly for the sender and recei) 280.3 458 P
-0.47 (v) 454.43 458 P
-0.47 (er) 460.25 458 P
-0.47 (. The sender is) 468.92 458 P
(only concerned with netw) 72 444 T
(ork parameters. There are three parameters that must be set) 196.19 444 T
(\245) 72 425 T
1.24 (the connection type -- either local, to e) 90 425 P
1.24 (xchange DMb) 283.81 425 P
1.24 (uf) 353.13 425 P
1.24 (fers with another process on the) 362.82 425 P
(same machines, or TCP) 90 411 T
(. \050Other connection types may be added in the future.\051) 202.66 411 T
(\245) 72 391 T
(an IP port number) 90 391 T
(\245) 72 371 T
(the name of the recei) 90 371 T
(v) 190.33 371 T
(er \050or sock) 196.15 371 T
(et address\051) 247.34 371 T
(The recei) 72 351 T
(v) 116.68 351 T
(er must specify the connection type and the port number) 122.5 351 T
(. Both must agree with the) 392.12 351 T
(sending side. In addition, the recei) 72 337 T
(v) 236.68 337 T
(er must create a b) 242.5 337 T
(uf) 326.89 337 T
(fer pool from which DMb) 336.59 337 T
(uf) 460.99 337 T
(fers will be) 470.69 337 T
-0.41 (allocated to hold the recei) 72 323 P
-0.41 (v) 194.02 323 P
-0.41 (ed data. Buf) 199.84 323 P
-0.41 (fer pool def) 257.04 323 P
-0.41 (aults for creating this pool can be obtained with) 312.07 323 P
(the) 72 309 T
3 F
(dmNetGetP) 89.66 309 T
(arams\050\051) 150.19 309 T
0 F
( call. The pool must be re) 190.18 309 T
(gistered with the) 312.31 309 T
3 F
(dmNetRegisterP) 395.3 309 T
(ool\050\051) 479.7 309 T
0 F
( call.) 503.03 309 T
3 F
-0.25 (dmNetRegisterP) 72 295 P
-0.25 (ool\050\051) 156.4 295 P
0 F
-0.25 ( is normally called after) 179.72 295 P
3 F
-0.25 (dmNetAccept\050\051) 295.43 295 P
0 F
-0.25 ( and must be called before the \336rst) 373.39 295 P
(call to) 72 281 T
3 F
(dmNetRecv\050\051) 104.66 281 T
0 F
(.) 172.63 281 T
1 F
(Sending Data With dmNet) 72 253 T
0 F
(The dmNet and digital media entry points used by the sending side are presented belo) 72 234 T
(w) 482.98 234 T
(, in the) 490.86 234 T
(order in which the) 72 220 T
(y should be called.) 159.47 220 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 202.33 T
0 12 Q
(dmNetOpen creates and initializes the DMnetconnection structure.) 72 184 T
-0.26 (T) 72 165 P
-0.26 (o set the netw) 78.37 165 P
-0.26 (ork parameters for the ne) 143.79 165 P
-0.26 (w connection, a DMparams structure must be created and) 263.08 165 P
(\336lled in. The structure is created with) 72 151 T
4 10 Q
(DMstatus dmParamsCreate \050DMparams** params \051;) 72 133.33 T
0 12 Q
(The connection type and port can be set with the dmP) 72 115 T
(aramsSetInt call) 329.78 115 T
4 10 Q
(DMstatus dmParamsSetInt \050DMparams* params, const char* paramName, int value \051;) 72 97.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 44
%%Page: "3" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(3) 535 749.33 T
0 12 Q
(The constants DMNET_CONNECTION_TYPE and DMNET_POR) 72 712 T
(T can be used for the) 398.58 712 T
-0.22 (paramName. The v) 72 698 P
-0.22 (alue for the connection type should be either DMNET_TCP for a netw) 163.55 698 P
-0.22 (ork con-) 499.9 698 P
-0.02 (nection, or DMNET_LOCAL for a connection to another process on the same machine. The port) 72 684 P
(number is a 16 bit, unsigned int. V) 72 670 T
(alues from 0 to 1023 are reserv) 237 670 T
(ed. Applications are free to use) 386.11 670 T
(port numbers from 1024 to 65535 inclusi) 72 656 T
(v) 269.03 656 T
(e.) 274.85 656 T
-0.35 (There are tw) 72 637 P
-0.35 (o w) 131.81 637 P
-0.35 (ays to identify the remote machine to connect to: the machine can be identi\336ed by) 149 637 P
(name or by a sock) 72 623 T
(et address.) 159.19 623 T
(A name can be supplied as a character string using) 72 604 T
4 10 Q
(DMstatus dmParamsSetString \050 DMparams* params, const char* paramName, const) 72 586.33 T
(char* value \051;) 72 574.33 T
0 12 Q
(In this case, use the constant DMNET_REMO) 72 556 T
(TE_HOSTN) 294.49 556 T
(AME as the paramName.) 354.73 556 T
(A sock) 72 537 T
(et address can be supplied with) 105.54 537 T
3 F
(dmP) 258.18 537 T
(aramsSetInt\050\051) 282.06 537 T
0 F
( using the constant) 353.38 537 T
(DMNET_REMO) 72 523 T
(TE_SOCKADDR for the paramName. In this case, the v) 154.85 523 T
(alue will lik) 427.16 523 T
(ely be the) 484.38 523 T
(v) 72 509 T
(alue of the sin_addr) 77.7 509 T
(.s_addr \336eld of an instance of the sockaddr_in structure.) 172.02 509 T
-0.14 (When these parameters are set in the DMparams structure, the sender opens the connection to the) 72 490 P
(recei) 72 476 T
(v) 95.02 476 T
(er with) 100.84 476 T
4 10 Q
(DMstatus dmNetConnect \050DMnetconnection connection, DMparams * params \051;) 72 458.33 T
0 12 Q
-0.46 (Before the sender calls) 72 440 P
3 F
-0.46 (dmNetConnect\050\051) 182.79 440 P
0 F
-0.46 (the sender and recie) 270.63 440 P
-0.46 (v) 364.58 440 P
-0.46 (er must agree on a port number and) 370.4 440 P
(the recei) 72 426 T
(v) 112.68 426 T
(er must ha) 118.5 426 T
(v) 168.25 426 T
(e called) 174.07 426 T
3 F
(dmNetListen\050\051) 214.06 426 T
0 F
(.) 288.71 426 T
(After a successful return from) 72 407 T
3 F
(dmNetConnect\050\051) 218.95 407 T
0 F
(, the sender is free to send b) 304.26 407 T
(uf) 437.99 407 T
(fers with) 447.68 407 T
4 10 Q
(DMstatus dmNetSend \050DMnetconnection connection, DMbuffer buff \051;) 72 389.33 T
0 12 Q
(dmNetSend will attach to the b) 72 371 T
(uf) 220.75 371 T
(fer with) 230.45 371 T
3 F
(dmBufferAttach\050\051) 271.1 371 T
0 F
( and free the b) 363.74 371 T
(uf) 432.14 371 T
(fer with) 441.84 371 T
3 F
(dmBufferFr) 72 357 T
(ee\050\051) 134.44 357 T
0 F
( when it is done. The sending program may call) 153.08 357 T
3 F
(dmBufferFr) 384.72 357 T
(ee\050\051) 447.16 357 T
0 F
( on the sent) 465.8 357 T
(b) 72 343 T
(uf) 77.76 343 T
(fer immediately) 87.46 343 T
(, b) 163 343 T
(ut this does not mean the b) 174.76 343 T
(uf) 303.18 343 T
(fer will be returned the to pool -- dmNet may) 312.88 343 T
(not ha) 72 329 T
(v) 101.42 329 T
(e freed the b) 107.24 329 T
(uf) 166.64 329 T
(fer) 176.34 329 T
(. This call may block or may f) 189 329 T
(ail and set errno to EB) 333.53 329 T
(USY) 441.06 329 T
(, if the netw) 463.51 329 T
(ork) 520.72 329 T
(send queue is full. The application should check for the latter case and retry the send after a suit-) 72 315 T
(able delay) 72 301 T
(.) 120.2 301 T
(The sending program should be careful to ensure that the size has been set in the DMb) 72 282 T
(uf) 486.35 282 T
(fer) 496.04 282 T
(. The) 508.7 282 T
(video library) 72 268 T
(, VL, is careful to do this for captured video, b) 132.88 268 T
(ut if the b) 355.6 268 T
(uf) 401.69 268 T
(fers are being \336lled with) 411.38 268 T
(material coming from other sources, such as disk, the programmer may ha) 72 254 T
(v) 428.03 254 T
(e to set the size with) 433.85 254 T
4 10 Q
(DMstatus dmBufferSetSize \050 DMbuffer buff, int size \051;) 72 236.33 T
0 12 Q
(The size is in bytes.) 72 218 T
-0.26 (The sending program can also use the user data area of the DMb) 72 199 P
-0.26 (uf) 377.9 199 P
-0.26 (fer to carry information such as) 387.6 199 P
(frame number and \336eld information. The user data can be set with) 72 185 T
4 10 Q
(DMstatus dmBufferSetUserData \050 DMbuffer buffer, const u_char *data,) 72 167.33 T
( int size  \051;) 234 155.33 T
0 12 Q
(When the sender is \336nished sending, it should close the connection with) 72 137 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 119.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 45
%%Page: "4" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(4) 535 749.33 T
1 12 Q
(Receiving Data with dmNet) 72 712 T
0 F
(The recei) 72 693 T
(v) 116.68 693 T
(er must open a connection and set the parameter v) 122.5 693 T
(alues just lik) 362.47 693 T
(e the sender) 423.02 693 T
(, e) 479.86 693 T
(xcept it) 491 693 T
(does not ha) 72 679 T
(v) 126.42 679 T
(e to supply either a DMNET_REMO) 132.24 679 T
(TE_HOSTN) 309.41 679 T
(AME or a) 369.65 679 T
(DMNET_REMO) 72 665 T
(TE_SOCKADDR. Also, the recei) 154.85 665 T
(v) 316.86 665 T
(er does not call) 322.68 665 T
3 F
(dmNetConnect\050\051) 398.66 665 T
0 F
(. Instead it) 483.97 665 T
(calls) 72 651 T
3 F
(dmNetListen\050\051) 97 651 T
0 F
( and) 171.65 651 T
3 F
(dmNetAccept\050\051) 194.98 651 T
0 F
(.) 272.94 651 T
4 10 Q
(DMstatus dmNetListen \050DMnetconnection connection, DMparams * params \051;) 72 633.33 T
0 12 Q
-0.22 (This must be called before the sender calls) 72 615 P
3 F
-0.22 (dmNetConnect\050\051) 277.51 615 P
0 F
-0.22 (. This call can f) 362.82 615 P
-0.22 (ail if the port number) 436.12 615 P
(supplied in the params is already in use. In this case the port number in the params should be) 72 601 T
-0.09 (changed, and the call to) 72 587 P
3 F
-0.09 (dmNetListen\050\051) 188.17 587 P
0 F
-0.09 ( retried. When) 262.82 587 P
3 F
-0.09 (dmNetListen\050\051) 334.52 587 P
0 F
-0.09 ( succeeds, the port number) 409.17 587 P
(should be transmitted to the sender so that it kno) 72 573 T
(ws which port number to connect to.) 304.69 573 T
(After) 72 554 T
3 F
(dmNetListen\050\051) 100.32 554 T
0 F
( succeeds call) 174.97 554 T
4 10 Q
(DMstatus dmNetAccept \050DMnetconnection connection \051;) 72 536.33 T
0 12 Q
-0.38 (After the) 72 518 P
3 F
-0.38 (dmNetAccept\050\051) 117.23 518 P
0 F
-0.38 ( call returns, the recei) 195.19 518 P
-0.38 (v) 297.01 518 P
-0.38 (er must re) 302.83 518 P
-0.38 (gister a b) 349.88 518 P
-0.38 (uf) 392.88 518 P
-0.38 (fer pool with dmNet. dmNet) 402.57 518 P
(will allocate b) 72 504 T
(uf) 139.75 504 T
(fers from this pool for the recei) 149.45 504 T
(v) 299.11 504 T
(ed b) 304.93 504 T
(uf) 325.02 504 T
(fers. The b) 334.72 504 T
(uf) 386.12 504 T
(fer pool must be created with) 395.82 504 T
(parameters consistent with dmNet\325) 72 490 T
(s requirements. The call) 238.98 490 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection, DMparams params \051;) 72 472.33 T
0 12 Q
(can be used to modify the b) 72 454 T
(uf) 204.41 454 T
(fer pool creation parameters in params as necessary) 214.1 454 T
(. \050The pool cre-) 460.91 454 T
(ation process in) 72 440 T
(v) 146.84 440 T
(olv) 152.6 440 T
(es se) 167.76 440 T
(v) 190.45 440 T
(eral steps that are best understood from the sample code belo) 196.27 440 T
(w) 488.58 440 T
(.\051) 496.46 440 T
(After the pool is created, it must be re) 72 421 T
(gistered with the dmNet connection) 253.45 421 T
4 10 Q
(DMstatus dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 403.33 T
0 12 Q
(This tells the connection to allocate a b) 72 385 T
(uf) 259.4 385 T
(fer from pool for each b) 269.1 385 T
(uf) 383.82 385 T
(fer recei) 393.52 385 T
(v) 432.85 385 T
(ed with) 438.67 385 T
3 F
(dmNetRecv\050\051) 72 371 T
0 F
(.) 139.97 371 T
3 F
(dmNetRegisterP) 145.97 371 T
(ool\050\051) 230.36 371 T
0 F
( can be called ag) 253.69 371 T
(ain to change the pool, say) 333.6 371 T
(, to switch to a) 460.8 371 T
(lar) 72 357 T
(ger pool. The \336rst pool can then be freed with) 84.44 357 T
3 F
(dmBufferDestr) 307.4 357 T
(oyP) 385.16 357 T
(ool\050\051) 404.26 357 T
0 F
(.) 427.58 357 T
(The recei) 72 338 T
(v) 116.68 338 T
(er recei) 122.5 338 T
(v) 157.84 338 T
(es b) 163.66 338 T
(uf) 182.41 338 T
(fers with) 192.11 338 T
4 10 Q
(int dmNetRecv \050 DMnetconnection connection, DMbuffer * buff \051;) 72 320.33 T
0 12 Q
-0.37 (This call does not block. The recei) 72 302 P
-0.37 (v) 235.13 302 P
-0.37 (er program has tw) 240.95 302 P
-0.37 (o choices. It could use) 326.7 302 P
3 F
-0.37 (select\050\051) 434.84 302 P
0 F
-0.37 ( to ensure that) 470.82 302 P
(there is a b) 72 288 T
(uf) 124.08 288 T
(fer w) 133.78 288 T
(aiting in the netw) 158.64 288 T
(ork\325) 242.18 288 T
(s input queue \050see the Adv) 261.52 288 T
(anced Examples belo) 388.86 288 T
(w\051. The) 490.54 288 T
(alternati) 72 274 T
(v) 111.02 274 T
(e is to check the return v) 116.84 274 T
(alue. If it is DM_SUCCESS then a b) 234.52 274 T
(uf) 410.28 274 T
(fer w) 419.98 274 T
(as recei) 444.84 274 T
(v) 480.85 274 T
(ed. If the) 486.67 274 T
(return v) 72 260 T
(alue is DM_F) 109.36 260 T
(AILURE, then the v) 174.47 260 T
(alue of errno must be check) 271.49 260 T
(ed. A v) 404.33 260 T
(alue of EB) 439.02 260 T
(USY) 490.22 260 T
(implies that there w) 72 246 T
(as no data a) 166.87 246 T
(v) 222.95 246 T
(ailable and) 228.65 246 T
3 F
(dmNetRecv\050\051) 283.97 246 T
0 F
( should be called ag) 351.94 246 T
(ain after a suitable) 447.19 246 T
(delay) 72 232 T
(. If errno is 0 then the connection has been closed \050the sender could ha) 97.21 232 T
(v) 434.56 232 T
(e died or closed the) 440.38 232 T
(connection\051.) 72 218 T
3 F
(dmNetRecv\050\051) 72 199 T
0 F
( can f) 139.97 199 T
(ail if it is unable to allocate a DMb) 166.5 199 T
(uf) 333.58 199 T
(fer to recei) 343.27 199 T
(v) 394.94 199 T
(e the data into. The applica-) 400.76 199 T
-0.12 (tion is responsible for ensuring that there is a free b) 72 185 P
-0.12 (uf) 317.2 185 P
-0.12 (fer in the pool before calling) 326.89 185 P
3 F
-0.12 (dmNetRecv\050\051) 466.15 185 P
0 F
-0.12 (.) 534.12 185 P
-0.4 (It could do this by k) 72 171 P
-0.4 (eeping careful count of allocated b) 166.22 171 P
-0.4 (uf) 330.27 171 P
-0.4 (fers, b) 339.97 171 P
-0.4 (ut this can be dif) 369.32 171 P
-0.4 (\336cult if DMb) 447.42 171 P
-0.4 (uf) 509.71 171 P
-0.4 (fers) 519.41 171 P
-0.13 (are sent to VL or other libraries that hold the b) 72 157 P
-0.13 (uf) 293.73 157 P
-0.13 (fers in queues until processing is completed. The) 303.42 157 P
-0.11 (alternati) 72 143 P
-0.11 (v) 111.02 143 P
-0.11 (e is to delay until there is a free b) 116.84 143 P
-0.11 (uf) 275.25 143 P
-0.11 (fer in the b) 284.95 143 P
-0.11 (uf) 336.7 143 P
-0.11 (fer pool. Code to do this is sho) 346.4 143 P
-0.11 (wn in the) 492.67 143 P
(Adv) 72 129 T
(anced Examples belo) 92.36 129 T
(w) 194.04 129 T
(.) 201.92 129 T
(When the recei) 72 110 T
(v) 144.34 110 T
(er program is \336nished recei) 150.16 110 T
(ving it should call) 281.16 110 T
3 F
(dmNetClose\050\051) 370.5 110 T
0 F
(.) 441.14 110 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 46
%%Page: "5" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(5) 535 749.33 T
0 12 Q
(If the b) 72 712 T
(uf) 106.42 712 T
(fer pool that is re) 116.11 712 T
(gistered on the recie) 197.92 712 T
(ving side supports v) 294.59 712 T
(ariable size DMb) 390.62 712 T
(uf) 473.03 712 T
(fers \050e.g.,) 482.72 712 T
4 10 Q
(dmParamsSetEnum\050plist, DM_POOL_VARIABLE, DM_TRUE\051;) 72 698 T
0 12 Q
(\051, then dmNet will allocate b) 372 698 T
(uf) 509.08 698 T
(fers) 518.77 698 T
(big enough for the incoming data, rounded up to the ne) 72 684 T
(xt con) 336.12 684 T
(v) 365.3 684 T
(enient size. This means that audio) 371.12 684 T
(data \050probably a fe) 72 670 T
(w k bytes per DMb) 162 670 T
(uf) 254.41 670 T
(fer\051 and video data \050probably 100\325) 264.11 670 T
(s of k bytes per) 428.4 670 T
(DMb) 72 656 T
(uf) 97.09 656 T
(fer\051 can be mix) 106.79 656 T
(ed on the same dmNet connection and the use of the b) 179.58 656 T
(uf) 438.96 656 T
(fer pool memory) 448.66 656 T
(will be ef) 72 642 T
(\336cient.) 117.02 642 T
1 F
(Examples) 72 614 T
0 F
(A simple program for sending DMb) 72 595 T
(uf) 244.74 595 T
(fers to a process on another host) 254.44 595 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 577.33 T
(main \050int argc, char ** argv\051 {) 72 553.33 T
(  int i;) 72 529.33 T
(  int Nframes     = 10;) 72 517.33 T
(  int sizeInBytes = 10;) 72 505.33 T
(  int bufferCount = 5;) 72 493.33 T
(  int bufferSize  = 100;) 72 481.33 T
(  int port        = 9161;) 72 469.33 T
(  DMbufferpool    pool;) 72 445.33 T
(  DMnetconnection connection;) 72 433.33 T
(  DMparams *      plist;) 72 421.33 T
(  DMbuffer        buff;) 72 409.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 385.33 T
(    abort\050\051;) 72 373.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 361.33 T
(    abort\050\051;) 72 349.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 337.33 T
(      DM_FAILURE\051) 72 325.33 T
(    abort\050\051;) 72 313.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 301.33 T
(    abort\050\051;) 72 289.33 T
(  /* A remote address may also be specified instead by the following call:) 72 277.33 T
(  ** dmParamsSetInt\050plist, DMNET_REMOTE_SOCKADDR, sin.sin_addr.s_addr\051; */) 72 265.33 T
(  if \050dmParamsSetString\050plist, DMNET_REMOTE_HOSTNAME, \322hostname\323\051 ==) 72 253.33 T
(      DM_FAILURE\051) 72 241.33 T
(    abort\050\051;) 72 229.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 217.33 T
(     dmNetListen. */) 72 205.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 193.33 T
(    abort\050\051;) 72 181.33 T
(  /* now create the buffer pool */) 72 157.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 145.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 133.33 T
(    abort\050\051;) 72 121.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 109.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 97.33 T
(    abort\050\051;) 72 85.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 47
%%Page: "6" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(6) 535 749.33 T
4 F
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 713.33 T
(    abort\050\051;) 72 701.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 677.33 T
(    if \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 665.33 T
(      abort\050\051;) 72 653.33 T
(    /* put some data into buff here*/) 72 641.33 T
(    /* if necessary, set its size with ... */) 72 629.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 617.33 T
(    if \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 605.33 T
(      abort\050\051;) 72 593.33 T
(    }) 72 581.33 T
(    dmBufferFree\050buff\051;) 72 569.33 T
(  }) 72 557.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 533.33 T
(    abort\050\051;) 72 521.33 T
(}) 72 509.33 T
0 12 Q
(A simple program for recei) 72 479 T
(ving DMb) 202.33 479 T
(uf) 251.76 479 T
(fers from a remote host) 261.46 479 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 461.33 T
(main \050int argc, char ** argv\051 {) 72 437.33 T
(  int i;) 72 413.33 T
(  int Nframes     = 10;) 72 401.33 T
(  int bufferCount = 5;) 72 389.33 T
(  int bufferSize  = 100;) 72 377.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 365.33 T
(  DMnetconnection connection;) 72 341.33 T
(  DMparams *      plist;) 72 329.33 T
(  DMbufferpool    pool;) 72 317.33 T
(  DMbuffer        buff;) 72 305.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_TCP\051 ==) 72 233.33 T
(      DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 173.33 T
(    /* we should try a new port number if we get here. */) 72 161.33 T
(    abort\050\051;) 72 149.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 137.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 125.33 T
(    abort\050\051;) 72 113.33 T
(  /* Now set up the buffer pool */) 72 101.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 89.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 48
%%Page: "7" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(7) 535 749.33 T
4 F
(    abort\050\051;) 72 713.33 T
(  /* set the pool parameters as needed by dmNet. */) 72 701.33 T
(  /* you may also have to call, for example, vlDMPoolGetParams, to get the) 72 689.33 T
(buffer) 72 677.33 T
(     pool parameters needed by vl. */) 72 665.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 653.33 T
(    abort\050\051;) 72 641.33 T
(  /* create the buffer pool */) 72 629.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(  if \050dmNetRegisterPool\050connection, pool\051 != DM_SUCCESS\051) 72 593.33 T
(    abort\050\051;) 72 581.33 T
(  /* now loop to receive the buffers. */) 72 569.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 557.33 T
(    if \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 545.33 T
(      abort\050\051;) 72 533.33 T
(    }) 72 521.33 T
(    /* use the data in buff here */) 72 509.33 T
(    dmBufferFree\050buff\051;) 72 497.33 T
(  }) 72 485.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 473.33 T
(    abort\050\051;) 72 461.33 T
(}) 72 449.33 T
1 12 Q
(Sending DMb) 72 398 T
(uff) 148.43 398 T
(er) 163.63 398 T
(s fr) 174.79 398 T
(om Pr) 193.22 398 T
(ocess to Pr) 226.99 398 T
(ocess on one Host) 291.44 398 T
0 F
-0.43 (dmNet can ef) 72 379 P
-0.43 (\336ciently mo) 135.48 379 P
-0.43 (v) 192.54 379 P
-0.43 (e DMb) 198.36 379 P
-0.43 (uf) 231.35 379 P
-0.43 (fers between processes on the same host. The dif) 241.04 379 P
-0.43 (ferences from) 471.56 379 P
(the remote case are) 72 365 T
(\245) 72 346 T
4.42 (the DMNET_CONNECTION_TYPE is DMNET_LOCAL for both the sender and) 90 346 P
(recei) 90 332 T
(v) 113.02 332 T
(er) 118.84 332 T
(.) 127.5 332 T
(\245) 72 312 T
13.14 (the sender need not specify the DMNET_REMO) 90 312 P
13.14 (TE_HOSTN) 402.96 312 P
13.14 (AME nor) 463.2 312 P
(DMNET_REMO) 90 298 T
(TE_SOCKADDR) 172.85 298 T
(\245) 72 278 T
(the recei) 90 278 T
(v) 130.68 278 T
(e need not allocate or re) 136.5 278 T
(gister a b) 251.28 278 T
(uf) 295.03 278 T
(fer pool) 304.73 278 T
(There is a critical dif) 72 258 T
(ference between the local and remote cases for DMb) 171.67 258 T
(uf) 424.01 258 T
(fer handling. In the) 433.7 258 T
(remote case, DMb) 72 244 T
(uf) 160.07 244 T
(fers that are sent are quickly returned to the sender\325) 169.76 244 T
(s pool \050assuming the) 416.03 244 T
(sender calls) 72 230 T
3 F
(dmNetFr) 131.32 230 T
(ee\050\051) 178.42 230 T
0 F
( after) 197.06 230 T
3 F
(dmNetSend\050\051) 225.05 230 T
0 F
(\051. In the local case, the b) 293.04 230 T
(uf) 410.1 230 T
(fers are passed to the) 419.8 230 T
(recei) 72 216 T
(ving process and are not returned to the sender\325) 95.02 216 T
(s pool until the after the recei) 322.3 216 T
(v) 462.64 216 T
(er frees them.) 468.46 216 T
-0.16 (Thus, the sender must allocate a pool big enough for both the sender\325) 72 202 P
-0.16 (s and recei) 401.66 202 P
-0.16 (v) 452.35 202 P
-0.16 (er\325) 458.17 202 P
-0.16 (s needs. Also,) 470.83 202 P
(b) 72 188 T
(uf) 77.76 188 T
(fer pool parameters can depend on the w) 87.46 188 T
(ay the b) 282.28 188 T
(uf) 320.03 188 T
(fers will be used. F) 329.72 188 T
(or e) 421.2 188 T
(xample,) 439.34 188 T
3 F
-0.16 (vlDMP) 72 174 P
-0.16 (oolGetP) 108.42 174 P
-0.16 (arams\050\051) 149.63 174 P
0 F
-0.16 ( can be used to set a DMparams structure with parameters needed for the) 189.61 174 P
(video library) 72 160 T
(. In the remote case, if the recei) 132.88 160 T
(v) 283.52 160 T
(er is sending b) 289.34 160 T
(uf) 358.76 160 T
(fers to VL, it w) 368.46 160 T
(ould call) 442 160 T
3 F
-0.33 (vlDMP) 72 146 P
-0.33 (oolGetP) 108.42 146 P
-0.33 (arams\050\051) 149.63 146 P
0 F
-0.33 (, b) 189.61 146 P
-0.33 (ut in the local case, the sender must mak) 201.04 146 P
-0.33 (e this call and set up the b) 392.56 146 P
-0.33 (uf) 514.32 146 P
-0.33 (fer) 524.01 146 P
(pool appropriately) 72 132 T
(. All b) 159.54 132 T
(uf) 189.64 132 T
(fer pool requirements for the recei) 199.33 132 T
(v) 363.31 132 T
(er are pushed back onto the sender) 369.13 132 T
(so that the sender must kno) 72 118 T
(w ho) 202.69 118 T
(w the recei) 226.06 118 T
(v) 278.4 118 T
(er will use the DMb) 284.22 118 T
(uf) 379.97 118 T
(fers.) 389.66 118 T
3 F
(Examples) 72 99 T
0 F
(A simple program for sending DMb) 72 80 T
(uf) 244.74 80 T
(fers to a process on the same host) 254.44 80 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 49
%%Page: "8" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(8) 535 749.33 T
4 F
(#include <dmedia/dmnet.h>) 72 713.33 T
(#include <errno.h>) 72 701.33 T
(main \050int argc, char ** argv\051 {) 72 677.33 T
(  int i;) 72 653.33 T
(  int Nframes     = 10;) 72 641.33 T
(  int sizeInBytes = 10;) 72 629.33 T
(  int bufferCount = 5;) 72 617.33 T
(  int bufferSize  = 100;) 72 605.33 T
(  int port        = 9161;) 72 593.33 T
(  DMbufferpool    pool;) 72 569.33 T
(  DMnetconnection connection;) 72 557.33 T
(  DMparams *      plist;) 72 545.33 T
(  DMbuffer        buff;) 72 533.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 509.33 T
(    abort\050\051;) 72 497.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 485.33 T
(    abort\050\051;) 72 473.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 461.33 T
(      DM_FAILURE\051) 72 449.33 T
(    abort\050\051;) 72 437.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 425.33 T
(    abort\050\051;) 72 413.33 T
(  /* we don\325t need to specify the remote host in the local case. */) 72 389.33 T
(  /* before calling dmNetConnect we should be sure the receiver has called) 72 365.33 T
(     dmNetListen. */) 72 353.33 T
(  if \050dmNetConnect\050connection, plist\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  /* now create the buffer pool */) 72 305.33 T
(  if \050dmBufferSetPoolDefaults\050plist, bufferCount, bufferSize, DM_FALSE,) 72 293.33 T
(      DM_TRUE\051 == DM_FAILURE\051) 126 281.33 T
(    abort\050\051;) 72 269.33 T
(  /* you may have to get params for the DMbuffer source as well. */) 72 257.33 T
(  /* in the local case, the pool params must be appropriate for how */) 72 245.33 T
(  /* the receiver will use the buffers too. */) 72 233.33 T
(  if \050dmNetGetParams\050connection, plist\051 == DM_FAILURE\051) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  if \050dmBufferCreatePool\050plist, &pool\051 == DM_FAILURE\051) 72 197.33 T
(    abort\050\051;) 72 185.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 161.33 T
(    while \050dmBufferAllocate\050pool, &buff\051 != DM_SUCCESS\051) 72 149.33 T
(      abort\050\051;) 72 137.33 T
(    /* put some data into buff here*/) 72 125.33 T
(    /* if necessary, set its size with ... */) 72 113.33 T
(    dmBufferSetSize \050buff, sizeInBytes\051;) 72 101.33 T
(    while \050dmNetSend\050connection, buff\051 != DM_SUCCESS\051 {) 72 89.33 T
(       if \050errno != EBUSY\051 {) 72 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 50
%%Page: "9" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(9) 535 749.33 T
4 F
(      abort\050\051;) 90 713.33 T
(      }) 72 701.33 T
-0.6 (      /* in local case we get EBUSY if we send faster than receiver consumes. */) 72 689.33 P
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    dmBufferFree\050buff\051;) 72 653.33 T
(    sginap\0505\051;  /* give the receiver a chance to do something. */) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 605.33 T
(    abort\050\051;) 72 593.33 T
(}) 72 581.33 T
0 12 Q
(A simple program for recei) 72 551 T
(ving DMb) 202.33 551 T
(uf) 251.76 551 T
(fers from a process on the same host) 261.46 551 T
4 10 Q
(#include <dmedia/dmnet.h>) 72 533.33 T
(#include <errno.h>) 72 521.33 T
(main \050int argc, char ** argv\051 {) 72 497.33 T
(  int i;) 72 473.33 T
(  int Nframes     = 10;) 72 461.33 T
(  int bufferCount = 5;) 72 449.33 T
(  int bufferSize  = 100;) 72 437.33 T
(  int port        = 9161; /* must be the same as the sender */) 72 425.33 T
(  DMnetconnection connection;) 72 401.33 T
(  DMparams *      plist;) 72 389.33 T
(  DMbufferpool    pool;) 72 377.33 T
(  DMbuffer        buff;) 72 365.33 T
(  if \050dmNetOpen\050&connection\051 != DM_SUCCESS\051) 72 341.33 T
(    abort\050\051;) 72 329.33 T
(  if \050dmParamsCreate\050&plist\051 == DM_FAILURE\051) 72 317.33 T
(    abort\050\051;) 72 305.33 T
(  if \050dmParamsSetInt\050plist, DMNET_CONNECTION_TYPE, DMNET_LOCAL\051 ==) 72 293.33 T
(      DM_FAILURE\051) 72 281.33 T
(    abort\050\051;) 72 269.33 T
(  if \050dmParamsSetInt\050plist, DMNET_PORT, port\051 == DM_FAILURE\051) 72 257.33 T
(    abort\050\051;) 72 245.33 T
(  if \050dmNetListen\050connection, plist\051 != DM_SUCCESS\051) 72 233.33 T
(    /* we should try a new port number if we get here. */) 72 221.33 T
(    abort\050\051;) 72 209.33 T
(  /* we should tell the sender what port number we are using at this point. */) 72 197.33 T
(  if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051) 72 185.33 T
(    abort\050\051;) 72 173.33 T
(  /* receiver does not need a pool in the local case. */) 72 149.33 T
(  /* now loop to receive the buffers. */) 72 125.33 T
(  for \050i = 0 ; i < Nframes; i++\051 {) 72 113.33 T
(    while \050dmNetRecv\050connection, &buff\051 != DM_SUCCESS\051 {) 72 101.33 T
(      if \050errno != EBUSY\051 {) 72 89.33 T
(     abort\050\051;) 90 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 51
%%Page: "10" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(10) 530 749.33 T
4 F
(      }) 72 713.33 T
(      /* if we don\325t give the sender enough time to send we get */) 72 701.33 T
(      /* EBUSY in the local case. */) 72 689.33 T
(      sginap\0505\051;) 72 677.33 T
(    }) 72 665.33 T
(    /* use the data in buff here */) 72 653.33 T
(    dmBufferFree\050buff\051;) 72 641.33 T
(  }) 72 629.33 T
(  if \050dmNetClose\050connection\051 == DM_FAILURE\051) 72 617.33 T
(    abort\050\051;) 72 605.33 T
(}) 72 593.33 T
1 12 Q
(UST and MSC v) 72 566 T
(alues) 160.44 566 T
0 F
(If the DMb) 72 547 T
(uf) 125.75 547 T
(fer to be sent contains a non-zero UST v) 135.44 547 T
(alue,) 329.1 547 T
3 F
(dmNetSend\050\051) 355.09 547 T
0 F
( will cooperate with) 423.08 547 T
3 F
-0.22 (dmNetRecv\050\051) 72 533 P
0 F
-0.22 ( to adjust the UST v) 139.97 533 P
-0.22 (alue. The attempt is to mak) 234.92 533 P
-0.22 (e the UST v) 364.37 533 P
-0.22 (alue at the recei) 421.08 533 P
-0.22 (ving end) 495.77 533 P
(of the netw) 72 519 T
(ork connection equi) 125.87 519 T
(v) 220.88 519 T
(alent to the UST v) 226.58 519 T
(alue that w) 314.28 519 T
(as set at the sending end. This is) 366.82 519 T
(accomplished by con) 72 505 T
(v) 172.84 505 T
(erting the sent UST to an equi) 178.66 505 T
(v) 322.34 505 T
(alent \322w) 328.04 505 T
(all clock\323 v) 368.24 505 T
(alue \050via) 423.26 505 T
3 F
(dmGetUSTCurr) 72 491 T
(entT) 156.44 491 T
(imeP) 180.23 491 T
(air\050\051) 206.1 491 T
0 F
(\051. This w) 228.76 491 T
(all clock v) 271.63 491 T
(alue is sent to the recei) 321.32 491 T
(ving end, which con-) 430.67 491 T
(v) 72 477 T
(erts it back to an equi) 77.82 477 T
(v) 180.5 477 T
(alent local UST v) 186.2 477 T
(alue. F) 270.23 477 T
(or this to be ef) 302.71 477 T
(fecti) 371.74 477 T
(v) 392.76 477 T
(e, the system clocks on the) 398.58 477 T
-0.07 (tw) 72 463 P
-0.07 (o machines must be synchronized by some e) 83.88 463 P
-0.07 (xternal mechanism, such as) 296.86 463 P
2 F
-0.07 (xntpd) 431.57 463 P
0 F
-0.07 (or) 461.17 463 P
2 F
-0.07 (timed) 474.1 463 P
0 F
-0.07 (. T) 500.76 463 P
-0.07 (o dis-) 513.07 463 P
-0.28 (able this con) 72 449 P
-0.28 (v) 131.62 449 P
-0.28 (ersion, or to mak) 137.44 449 P
-0.28 (e it clear to the recei) 217.8 449 P
-0.28 (ving end that the UST v) 313.73 449 P
-0.28 (alue is not to be trusted) 427.02 449 P
(\050perhaps because it is kno) 72 435 T
(wn that the system clocks are not synchronized\051, the sender can set the) 195.67 435 T
(UST v) 72 421 T
(alue in the DMb) 103.37 421 T
(uf) 181.45 421 T
(fer to zero, using) 191.15 421 T
3 F
(dmBufferSetUSTMSCpair\050\051) 275.46 421 T
0 F
(.) 420.78 421 T
(This con) 72 402 T
(v) 113.18 402 T
(ersion is not done when DMNET_CONNECTION_TYPE is DMNET_LOCAL.) 119 402 T
(If the DMb) 72 383 T
(uf) 125.75 383 T
(fer to be sent contains a non-zero MSC v) 135.44 383 T
(alue, DMnet preserv) 331.78 383 T
(es it. This is useful) 429.9 383 T
-0.2 (when relaying DMb) 72 369 P
-0.2 (uf) 168 369 P
-0.2 (fers that ha) 177.69 369 P
-0.2 (v) 230.36 369 P
-0.2 (e been \336lled by a de) 236.18 369 P
-0.2 (vice dri) 331.16 369 P
-0.2 (v) 366.98 369 P
-0.2 (er) 372.8 369 P
-0.2 (. When \336lling DMb) 381.46 369 P
-0.2 (uf) 475.28 369 P
-0.2 (fers from a) 484.97 369 P
-0.28 (disk \336le or memory) 72 355 P
-0.28 (, there may not be an associated MSC. If the sender lea) 164.7 355 P
-0.28 (v) 425.61 355 P
-0.28 (es the MSC \336eld zero,) 431.43 355 P
3 F
-0.28 (dmNetSend\050\051) 72 341 P
0 F
-0.28 ( will pro) 139.99 341 P
-0.28 (vide a monotonically increasing v) 179.92 341 P
-0.28 (alue. T) 341.15 341 P
-0.28 (o a) 373.23 341 P
-0.28 (v) 387.04 341 P
-0.28 (oid possible confusion, callers) 392.8 341 P
(should either) 72 327 T
3 F
(always) 137.33 327 T
0 F
( set the MSC v) 172 327 T
(alue or) 243.04 327 T
3 F
( ne) 276.02 327 T
(v) 290.84 327 T
(er) 296.72 327 T
0 F
( set one.) 307.38 327 T
1 F
(Ad) 72 299 T
(v) 87.82 299 T
(anced Examples) 94.25 299 T
3 F
(P) 72 280 T
(ort number management and connection start up) 79.09 280 T
0 F
-0.04 (There are tw) 72 261 P
-0.04 (o k) 132.44 261 P
-0.04 (e) 147.28 261 P
-0.04 (y issues to be concerned with when starting up a connection: the recei) 152.43 261 P
-0.04 (v) 486.93 261 P
-0.04 (er should) 492.75 261 P
-0.46 (call) 72 247 P
3 F
-0.46 (dmNetListen\050\051) 91.87 247 P
0 F
-0.46 ( before the sender calls) 166.52 247 P
3 F
-0.46 (dmNetConnect\050\051) 277.87 247 P
0 F
-0.46 (, and the sender and recei) 363.18 247 P
-0.46 (v) 482.56 247 P
-0.46 (er must be) 488.38 247 P
(prepared for) 72 233 T
3 F
(dmNetListen\050\051) 133.97 233 T
0 F
( to f) 208.62 233 T
(ail because the port is in use.) 227.83 233 T
(Normally the sender and recei) 72 214 T
(v) 216.32 214 T
(er use a bi-directional sock) 222.14 214 T
(et connection and an application spe-) 351.32 214 T
(ci\336c protocol to start up a session. This control connection can be used to send the port number) 72 200 T
(from the recei) 72 186 T
(v) 139.01 186 T
(er to the sender) 144.83 186 T
(, after the recei) 217.99 186 T
(v) 289.66 186 T
(er has successfully called) 295.48 186 T
3 F
(dmNetListen\050\051) 420.11 186 T
0 F
(. The) 494.76 186 T
(sender\325) 72 172 T
(s code is v) 106.66 172 T
(ery simple:) 156.8 172 T
4 10 Q
(/* receive a message from the receiver saying which port to send to. */) 72 154.33 T
(/* set dmNetPort to that port number. */) 72 142.33 T
(int dmNetPort = ...;) 72 130.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 72 118.33 T
(return FAIL;) 90 106.33 T
(}) 72 94.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 52
%%Page: "11" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(11) 530 749.33 T
4 F
(dmNetConnect\050connection, plist\051 == DM_FAILURE\051 {) 72 713.33 T
(return FAIL;) 90 701.33 T
(}) 72 689.33 T
0 12 Q
(The recei) 72 671 T
(v) 116.68 671 T
(er code follo) 122.5 671 T
(ws) 182.84 671 T
4 10 Q
(int i;) 72 653.33 T
(int dmNetPort = ...;) 72 641.33 T
(/* some initial port number */) 204 641.33 T
(for \050i = 0; i < 10; i++\051 {) 72 629.33 T
(if \050dmParamsSetInt\050plist, DMNET_PORT, dmNetPort\051 == DM_FAILURE\051 {) 90 617.33 T
(return FAIL;) 108 605.33 T
(}) 90 593.33 T
(if \050dmNetListen\050connection, plist\051 == DM_SUCCESS\051 {) 90 581.33 T
(/* success, exit for loop and carry on. */) 108 569.33 T
(break;) 108 557.33 T
(}) 90 545.33 T
(if \050errno != EADDRINUSE\051 {) 90 533.33 T
(/* dmNetListen failed for some other reason */) 108 521.33 T
(return FAIL;) 108 509.33 T
(}) 90 497.33 T
(/* increment port and try again */) 90 485.33 T
(dmNetPort++;) 90 473.33 T
(}) 72 461.33 T
(if \050i >= 10\051 {) 72 449.33 T
(/* could not find a free port. */) 90 437.33 T
(return FAIL;) 90 425.33 T
(}) 72 413.33 T
(/* at this point, send dmNetPort to the sender. */) 72 401.33 T
(if \050dmNetAccept\050connection, plist\051 != DM_SUCCESS\051 {) 72 389.33 T
(/* unexpected error in dmNetAccept\050\051. */) 90 377.33 T
(return FAIL;) 90 365.33 T
(}) 72 353.33 T
0 12 Q
(The recei) 72 335 T
(v) 116.68 335 T
(er starts from some initial port number) 122.5 335 T
(. It calls) 307.15 335 T
3 F
(dmNetListen\050\051) 348.48 335 T
0 F
( on each port number) 423.13 335 T
-0.3 (until it succeeds. Then it sends the port number to the sender and calls) 72 321 P
3 F
-0.3 (dmNetAccept\050\051) 407.38 321 P
0 F
-0.3 ( to w) 485.34 321 P
-0.3 (ait for) 508.61 321 P
(the sender to call) 72 307 T
3 F
(dmNetConnect\050\051) 156.65 307 T
0 F
(.) 241.96 307 T
3 F
(A) 72 269 T
(v) 79.46 269 T
(oiding Spinning on dmNetRecv\050\051) 85.34 269 T
0 F
(The simple e) 72 250 T
(xample abo) 133.81 250 T
(v) 189.29 250 T
(e loops on) 195.11 250 T
3 F
(dmNetRecv\050\051) 247.44 250 T
0 F
( with a small delay if) 315.41 250 T
3 F
(dmNetRecv\050\051) 419.4 250 T
0 F
( f) 487.37 250 T
(ails) 494.24 250 T
(because nothing is a) 72 236 T
(v) 168.74 236 T
(ailable. An alternati) 174.44 236 T
(v) 269.12 236 T
(e is to use) 274.94 236 T
3 F
(select\050\051) 325.61 236 T
0 F
( to ensure that there is data a) 361.58 236 T
(v) 498.31 236 T
(ailable) 504.01 236 T
(before calling) 72 222 T
3 F
(dmNetRecv\050\051) 141.31 222 T
0 F
(:) 209.28 222 T
4 10 Q
(fd_set readFDs;) 72 204.33 T
(struct timeval waitTime;) 72 180.33 T
(waitTime.tv_sec = 2;) 72 168.33 T
(waitTime.tv_usec = 0;) 72 156.33 T
(FD_ZERO\050&readFDs\051;) 72 132.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 120.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 108.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 96.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 84.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 53
%%Page: "12" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(12) 530 749.33 T
4 F
(}) 72 713.33 T
(while \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 689.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 677.33 T
(  abort\050\051;) 72 665.33 T
(}) 72 653.33 T
3 12 Q
(Ensuring ther) 72 623 T
(e is a fr) 143.46 623 T
(ee b) 180.9 623 T
(uffer in the pool) 200.99 623 T
0 F
(The recei) 72 604 T
(v) 116.68 604 T
(er program is responsible for ensuring that there is a free b) 122.5 604 T
(uf) 403.19 604 T
(fer in the b) 412.88 604 T
(uf) 464.96 604 T
(fer pool) 474.66 604 T
-0.06 (before calling) 72 590 P
3 F
-0.06 (dmNetRecv\050\051) 141.18 590 P
0 F
-0.06 (. It may not be practical to do this by counting b) 209.15 590 P
-0.06 (uf) 438.85 590 P
-0.06 (fer allocations and) 448.55 590 P
(frees because when a b) 72 576 T
(uf) 182.38 576 T
(fer is queued in for processing by the VLor dmIC, it may be some time) 192.07 576 T
(before it is freed. An alternati) 72 562 T
(v) 213.66 562 T
(e is to use) 219.48 562 T
3 F
(select\050\051) 270.14 562 T
0 F
( to delay until a b) 306.12 562 T
(uf) 389.54 562 T
(fer is free:) 399.24 562 T
4 10 Q
(fd_set readFDs;) 72 544.33 T
(fd_set writeFDs;) 72 532.33 T
(long long bytesAvailable;) 72 508.33 T
(int       buffersAvailable;) 72 496.33 T
(struct timeval waitTime;) 72 472.33 T
(waitTime.tv_sec = 2;) 72 460.33 T
(waitTime.tv_usec = 0;) 72 448.33 T
(/* wait for something to recv. */) 72 424.33 T
(FD_ZERO\050&readFDs\051;) 72 412.33 T
(FD_SET \050dataFD, &readFDs\051;) 72 400.33 T
(while \050select \050dataFD+1, &readFDs, NULL, NULL, &waitTime\051 == 0\051 {) 72 388.33 T
(  fprintf\050stderr, \322Select waiting 2 seconds.  Server died?\134n\323\051;) 72 376.33 T
(  FD_SET \050dataFD, &readFDs\051;) 72 364.33 T
(}) 72 352.33 T
(if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 328.33 T
(    != DM_SUCCESS\051 {) 72 316.33 T
(   abort\050\051;) 72 304.33 T
(}) 72 292.33 T
(/* wait for a free buffer */) 72 268.33 T
(while \050buffersAvailable < 1\051 {) 72 256.33 T
(  FD_ZERO\050&writeFDs\051;) 72 244.33 T
(  FD_SET \050poolFD, &writeFDs\051;) 72 232.33 T
(  while \050select \050poolFD+1, NULL, &writeFDs, NULL, &waitTime\051 == 0\051 {) 72 220.33 T
(    if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 208.33 T
(  != DM_SUCCESS\051 {) 90 196.33 T
(      abort\050\051;) 72 184.33 T
(    }) 72 172.33 T
(    fprintf\050stderr, \322Select waiting 2 seconds for a free buffer.\134n\323\051;) 72 160.33 T
(    FD_SET \050poolFD, &writeFDs\051;) 72 148.33 T
(  }) 72 136.33 T
(  if \050dmBufferGetPoolState\050bufferPool, &bytesAvailable, &buffersAvailable\051) 72 124.33 T
(!= DM_SUCCESS\051 {) 90 112.33 T
(    abort\050\051;) 72 100.33 T
(  }) 72 88.33 T
(}) 72 76.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 54
%%Page: "13" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(13) 530 749.33 T
4 F
(if \050dmNetRecv\050connection, buff\051 != DM_SUCCESS\051 {) 72 701.33 T
(  perror \050\322dmNetRecv failed\323\051;) 72 689.33 T
(  abort\050\051;) 72 677.33 T
(}) 72 665.33 T
0 12 Q
(Note that this code can f) 72 635 T
(ail if there is another thread or a de) 188.86 635 T
(vice dri) 356.51 635 T
(v) 392.53 635 T
(er allocating from the same) 398.35 635 T
(pool. Also note that this code \336rst w) 72 621 T
(aits for input to become a) 245.88 621 T
(v) 367.96 621 T
(ailable, then it w) 373.66 621 T
(aits for a b) 453.53 621 T
(uf) 504.28 621 T
(fer) 513.97 621 T
(.) 526.63 621 T
-0.06 (This is to simplify generalizing to the multi-threaded case with multiple allocators. The goal is to) 72 607 P
-0.36 (minimize the delay between a b) 72 593 P
-0.36 (uf) 222.28 593 P
-0.36 (fer becoming a) 231.98 593 P
-0.36 (v) 303 593 P
-0.36 (ailable in the pool and using it. The data w) 308.7 593 P
-0.36 (aiting) 510.02 593 P
(in the netw) 72 579 T
(ork input queue will not go a) 125.21 579 T
(w) 263.69 579 T
(ay) 272.23 579 T
(, b) 282.78 579 T
(ut the free b) 294.54 579 T
(uf) 351.95 579 T
(fer in the b) 361.64 579 T
(uf) 413.72 579 T
(fer pool might be allo-) 423.42 579 T
(cated by the other thread.) 72 565 T
-0.06 (Note that the b) 72 546 P
-0.06 (uf) 142.56 546 P
-0.06 (fer pool\325) 152.25 546 P
-0.06 (s fd is sent to select as a write fd.  This is because) 193.18 546 P
3 F
-0.06 (dmNetRecv\050\051) 433.23 546 P
0 F
-0.06 ( will be) 501.2 546 P
(trying to get a DMb) 72 532 T
(uf) 167.09 532 T
(fer to write to.  \050A common mistak) 176.78 532 T
(e may be to use it as a read fd because) 343.98 532 T
(this code is trying to read.\051) 72 518 T
1 F
(Summar) 72 490 T
(y of Entr) 120.13 490 T
(y P) 168.92 490 T
(oints) 186.46 490 T
0 F
-0.37 (A) 72 471 P
3 F
-0.37 (DMnetconnection) 83.29 471 P
0 F
-0.37 ( is an opaque structure which maintains the state of both the control and data) 174.61 471 P
(connections. It is a pointer to the real structure the library allocates and maintains.) 72 457 T
(There are logically tw) 72 438 T
(o connections in a DMnetconnection, the \336rst for control \050e.g., setup, tear-) 177.52 438 T
(do) 72 424 T
(wn, management and synchronization\051, and the second for passing DMb) 83.7 424 T
(uf) 431.06 424 T
(fer content. Cur-) 440.76 424 T
(rently the control connection is al) 72 410 T
(w) 232.86 410 T
(ays a sock) 241.4 410 T
(et. The current implementation of dmNet supports) 290.6 410 T
(data connections which are either sock) 72 396 T
(ets \050for remote\051 or local \050using a DMS \336fo\051.) 257.5 396 T
4 10 Q
(DMnetconnection connection;) 72 378.33 T
3 12 Q
-0.25 (dmNetOpen\050\051) 72 360 P
0 F
-0.25 ( is the \336rst dmNet call one mak) 142.66 360 P
-0.25 (es. It allocates the internal connection struct and ini-) 291.08 360 P
(tializes it. Returns DM_SUCCESS on successful open, DM_F) 72 346 T
(AILURE otherwise.) 370.12 346 T
4 10 Q
(DMstatus dmNetOpen \050 DMnetconnection* connection \051;) 72 328.33 T
3 12 Q
(dmNetClose\050\051) 72 310 T
0 F
( is the last call to mak) 142.64 310 T
(e, it deallocates all the structures including an) 247.19 310 T
(y DMS \336fos) 466.31 310 T
(that might ha) 72 296 T
(v) 135.1 296 T
(e been created. Returns DM_SUCCESS.) 140.92 296 T
4 10 Q
(DMstatus dmNetClose \050 DMnetconnection connection \051;) 72 278.33 T
3 12 Q
(dmNetConnect\050\051) 72 260 T
0 F
( is the sender side call that sets up the control connection. It looks through the) 157.31 260 T
(DMparams ar) 72 246 T
(gument for a remote host name or remote address and opens a communications) 138.1 246 T
(sock) 72 232 T
(et to the speci\336ed destination. It calls) 93.88 232 T
3 F
(connect\050\051) 275.2 232 T
0 F
( and sets appropriate sock) 322.51 232 T
(et options. Then it) 446.36 232 T
-0.08 (creates whate) 72 218 P
-0.08 (v) 136.59 218 P
-0.08 (er form of communication channel has been speci\336ed for the data portion. Returns) 142.41 218 P
(DM_SUCCESS if connection made and) 72 204 T
3 F
(setsock) 267.66 204 T
(opt\050\051) 304.14 204 T
0 F
( calls succeed, DM_F) 328.8 204 T
(AILURE otherwise.) 431.89 204 T
(This call will block until the recei) 72 190 T
(v) 233.69 190 T
(er calls) 239.51 190 T
3 F
(dmNetAccept\050\051) 276.83 190 T
0 F
(.) 354.79 190 T
4 10 Q
(DMstatus dmNetConnect \050 DMnetconnection connection, DMparams* plist \051;) 72 172.33 T
3 12 Q
(dmNetListen\050\051) 72 154 T
0 F
(and) 149.65 154 T
3 F
( dmNetAccept\050\051) 166.98 154 T
0 F
( are the recei) 247.94 154 T
(v) 309.28 154 T
(er side calls that sets up the control and data) 315.1 154 T
(connections.) 72 140 T
3 F
(dmNetListen\050\051) 135.32 140 T
0 F
( should be called by the recei) 209.98 140 T
(v) 349.64 140 T
(er before the sender calls) 355.46 140 T
3 F
(dmNetConnect\050\051) 72 126 T
0 F
(. T) 157.31 126 T
(ypically) 169.68 126 T
(, the recei) 207.56 126 T
(v) 254.24 126 T
(er will tell the sender what port to use after calling) 260.06 126 T
3 F
(dmNetListen\050\051) 72 112 T
0 F
( b) 146.65 112 T
(ut before calling) 155.41 112 T
3 F
(dmNetAccept\050\051) 237.06 112 T
0 F
(.) 315.02 112 T
3 F
(dmNetAccept\050\051) 321.02 112 T
0 F
( will block until the sender) 398.99 112 T
(calls) 72 98 T
3 F
(dmNetConnect\050\051) 97 98 T
0 F
(.) 182.3 98 T
4 10 Q
(DMstatus dmNetListen \050 DMnetconnection connection , DMparams* plist \051;) 72 80.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 55
%%Page: "14" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Dec 9 Draft) 72 749.33 T
(14) 530 749.33 T
4 F
(DMstatus dmNetAccept \050 DMnetconnection connection , DMparams* plist \051;) 72 713.33 T
3 12 Q
(dmNetRegisterP) 72 695 T
(ool\050\051) 156.4 695 T
0 F
( re) 179.72 695 T
(gisters a b) 191.87 695 T
(uf) 240.29 695 T
(fer pool on the connection. This is only needed on a recei) 249.98 695 T
(v-) 524.96 695 T
(ing side. DMb) 72 681 T
(uf) 140.76 681 T
(fers to hold incoming data will be allocated from this pool.) 150.46 681 T
4 10 Q
(int dmNetRegisterPool \050 DMnetconnection connection, DMbufferpool pool \051;) 72 663.33 T
3 12 Q
(dmNetGetP) 72 645 T
(arams\050\051) 132.53 645 T
0 F
( tak) 172.51 645 T
(es the speci\336ed parameter list and modi\336es and/or adds parameters v) 190.06 645 T
(al-) 519.7 645 T
-0.11 (ues as necessary for DMb) 72 631 P
-0.11 (uf) 195.28 631 P
-0.11 (ferpool creation and also adds the parameters which describe the data) 204.97 631 P
(connection.) 72 617 T
4 10 Q
(DMstatus dmNetGetParams \050 DMnetconnection connection , DMparams* plist \051;) 72 599.33 T
3 12 Q
-0.05 (dmNetSend\050\051) 72 581 P
0 F
-0.05 ( sends the dmBuf) 139.99 581 P
-0.05 (fer o) 223.2 581 P
-0.05 (v) 245.29 581 P
-0.05 (er the data connection. Returns DM_SUCCESS on success,) 251.11 581 P
(DM_F) 72 567 T
(AILURE otherwise and errno is set to EB) 103.12 567 T
(USY if the \336fo o) 303.3 567 T
(v) 383.78 567 T
(er\337o) 389.6 567 T
(ws \050i.e., the block couldn\325) 411.3 567 T
(t) 536.06 567 T
(be enqueued because too man) 72 553 T
(y outstanding blocks in the queue\051. If the errno is 0, the underlying) 215.11 553 T
(connection w) 72 539 T
(as closed \050possibly because the recei) 136.2 539 T
(v) 311.52 539 T
(er died or closed the connection\051.) 317.34 539 T
4 10 Q
(DMstatus dmNetSend \050 DMnetconnection connection , DMbuffer buff\051;) 72 521.33 T
3 12 Q
(dmNetRecv\050\051) 72 503 T
0 F
( recei) 139.97 503 T
(v) 165.98 503 T
(es a DMb) 171.8 503 T
(uf) 218.22 503 T
(fer from the data connection. When called,) 227.92 503 T
3 F
(dmNetRecv\050\051) 436.19 503 T
0 F
( allo-) 504.15 503 T
(cates a DMb) 72 489 T
(uf) 132.41 489 T
(fer from the re) 142.1 489 T
(gistered pool, \336lls in the recei) 211.56 489 T
(v) 353.92 489 T
(ed data and metadata and returns it.) 359.74 489 T
(This is a non-blocking call and returns DM_F) 72 475 T
(AILURE with errno set to EB) 290.76 475 T
(USY if no data w) 434.29 475 T
(as) 518.16 475 T
(a) 72 461 T
(v) 77.09 461 T
(ailable. Applications can loop on this return v) 82.79 461 T
(alue or select on the fd \050use) 301.8 461 T
3 F
(dmNetDataFd\050\051) 436.76 461 T
0 F
( to) 518.08 461 T
(get the fd\051. If there are no free DMb) 72 447 T
(uf) 244.69 447 T
(fers in the b) 254.39 447 T
(uf) 311.14 447 T
(fer pool DM_F) 320.83 447 T
(AILURE will be returned and) 392.6 447 T
(errno will be set to ENOMEM. The application can simply delay until a b) 72 433 T
(uf) 425.72 433 T
(fer should ha) 435.42 433 T
(v) 497.83 433 T
(e been) 503.65 433 T
(freed and try ag) 72 419 T
(ain. If the size of the DMb) 147.58 419 T
(uf) 274.31 419 T
(fers in the b) 284 419 T
(uf) 340.75 419 T
(fer pool is set to small for the b) 350.45 419 T
(uf) 500.2 419 T
(fers) 509.89 419 T
(being recie) 72 405 T
(v) 124.68 405 T
(ed, DM_F) 130.5 405 T
(AILURE will be returned and errno will be set to ERANGE. If) 178.94 405 T
(DM_F) 72 391 T
(AILURE is returned and errno is 0, the underlying connection w) 103.12 391 T
(as closed \050possibly) 412.61 391 T
(because the sender died or closed the connection\051.) 72 377 T
4 10 Q
(DMstatus dmNetRecv \050 DMnetconnection, DMbuffer* \051;) 72 359.33 T
3 12 Q
(dmNetContr) 72 341 T
(olFd\050\051) 137.1 341 T
0 F
( returns the \336le descriptor used to select on the dmNet control connection.) 168.43 341 T
4 10 Q
(int dmNetControlFd \050 DMnetconnection \051;) 72 323.33 T
3 12 Q
(dmNetDataFd\050\051) 72 305 T
0 F
( returns the \336le descriptor for the data connection. If the data connection is a) 153.31 305 T
(sock) 72 291 T
(et, it just returns the sock) 93.88 291 T
(et, if it\325) 214.42 291 T
(s a \336fo, it returns its fd. This fd can be used to select on to get) 249.42 291 T
(noti\336cation of when DMb) 72 277 T
(uf) 196.75 277 T
(fers arri) 206.45 277 T
(v) 243.79 277 T
(e.) 249.61 277 T
4 10 Q
(int dmNetDataFd \050 DMnetconnection \051;) 72 259.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 56
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 56
%%DocumentFonts: Times-Roman
%%+ Helvetica-Bold
%%+ Times-Italic
%%+ Times-Bold
%%+ Courier
%%EOF
